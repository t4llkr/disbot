# -*- coding: utf-8 -*-

import discord
from discord.ext import commands
# import random
import string
import os
from discord.ext.commands import Bot
from discord_components import DiscordComponents, Button, Select, SelectOption

bot = commands.Bot(command_prefix=["xx", "Xx"], help_command=None)

@bot.event
async def on_ready():
    DiscordComponents(bot)
    print("Boba is online")
    await bot.change_presence(activity=discord.Game('xxhelp | cutt.ly/feedmejohn'))
  

wrong_str = ["чё?", "неправильно, попробуй ещё раз", "пиши нормально", "не понял", "оно немножечко не так пишется, тебе объяснить?", "а теперь ещё раз, медленнее и аккуратнее", "икскьюзьми?"]

nuzhd = ["Аптека.\n— У вас есть лекарство от гонореи? \n— Да, платите в кассу.\n— А вы заверните его покрасивее. Подарок всё-таки.", "— Доктор, я умираю, помогите!\n— Ну, это мы мигом.", "Новый тариф ''Бисексуал''. Исходящие знакомым девушкам и входящий от знакомых парней бесплатно.", "Родственники - это группа лиц, собирающихся периодически пересчитаться и вкусно покушать по случаю изменения их количества.", "— Какую рекламу сегодня смотреть будем?", "Если вы чувствуете, что охрипли - возможно, кто-то оглох.", "— Почему Красная площадь именно красной называется?\n— Видите ли, Сергей, это очень древняя история, когда в в 1147 году первые жители тогда ещё маленького-\n— А покороче нельзя?\n— Именно поэтому она и называется красной.", "Молодой человек ищет женщину, друга, собеседника и любовницу в одном лице. Если придут все четверо, буду только рад.", "— Давайте позовём тех, без кого не обходится ни один новый год.\n— Давайте! Ми-ли-ци-я!", "Мы рождены, чтоб папе было стыдно.", "Полезный совет: никогда не разворачивайте подарок сразу, а дождитесь ухода гостей. Если развернёте его при гостях, то никому из присутствующих его уже не подаришь.", "Обычно на свадьбах воруют невесту, а у меня украли тёщу. Больше дорогих подарков не было.", "Доброе утро, уважаемые радиослушатели! Вы только что прослушали передачу о безопасности приближения к нашей галактике чёрной дыры. В Москве по-прежнему 7 часов 51 минута.", "Штраф за ложный вызов пожарной службы - 100 рублей, за ложный вызов милиции - 200 рублей, за ложный вызов скорой помощи - 300 рублей, за вызов трёх служб сразу - скидка 20%.", "''Дедушка Мороз, выходи!'' - кричали, пританцовывая, дети около туалета.", "Выпуск новостей. \n— Террористы, захватившие заложников, снова смягчили свои требования. Если первоначально они просили 30 миллионов долларов и вертолёт, то теперь бутылку водки, две конфеты и велосипед. Переговоры продолжаются.", "Клиент изучает счёт в ресторане. \n— Салат - 5 долларов, горячее - 20, десерт - 15, бутылка вина - 25, всего 65, а у вас 110! Это как ж так получилось?\nОфициант, с досадой: \n— Ну, значит, не получилось.", "Утро вечера бодунее.", "Толстячок, а приятно.", "Таможня берёт добро.", "Полночи с Германом, а близости всё нет.", "Мял золотник до дырок.", "Ложись, девка, большая и маленькая.", "Его называли охотником на крокодилов, потому что ему попадались только страшные девушки.", "Еврейская семья в театре, на сцене ''Евгений Онегин'', жена будит мужа.\n— Изя, пока ты спал, Ленский послал Онегину вызов.\n— И что, Онегин едет?", "Медсестра заводит карточку пациентки.\n— Замужем?\n— Да.\n— Дети есть?\n— Шестеро. Двое от первого мужа, двое от второго и двое лично мои.", "Что такое учебный план? Это обычный табак.", "— У меня украли паспорт.\n— В милиции был?\n— Был... Не они.", "— А почему у вас козёл безрогий?\n— А у нас коза честная!", "Выходят мужики из лесу и смотрят - дед на пеньке сидит. Они к нему: \n— Дедушка, а как пройти в деревню?\n— Идите прямо. Там будет конопляное поле, а сразу за ним - говорящая река.", "SMS-сообщение:\nСаня, я сегодня к тебе не приду, буду дома бухать. Некому будет приходить.", "Объявление.\nЗа умеренную плату злой сотрудник милиции посетит вечером вашего непослушного ребёнка, заберёт его, поставит в угол или съест.", "— Вот у меня дед-сибиряк на медведя один ходил. Однажды с редким уссурийским медведем за руку поздоровался, так он с тех пор эту рукук и не моет. Так, почистит, смажет, болты заменит - и нормально.", "Родила царица в ночь \nколи сына, толи дочь.", "Надпись женской консультации:\nСкоро сказка делается, да не скоро дело сказывается.", "— Серый волк, а почему у тебя такие большие?\n— А это чтобы лучше, Красная Шапочка.", "Новая рекламная акция: купи десять беляшей и собери кошку.", "Я знаю много, но помню мало.", "Дед внуку:\n— Вот мы с бабкой два года встречались перед тем, как жениться, да-а-а... Так и не встретились.", "Если у итальянцев национальное блюдо - пицца, то у русских - напиться.", "— Скажи мне, Вова: уже семь лет тебя знаю, всё никак не могу понять, кто же носит твои рубашки, когда они чистые?", "Утро у цыган: кто первый встал, тот красивей всех оделся.", "После обыска у самогонщицы Сидоровой я и сержант Карасюк никак не могли найти входную дверь. Когда Карасюк устал и уснул в туалете, дверь я всё-таки нашёл. Но зачем принёс эту дверь в наш участок, не помню.", "— У меня сегодня свидание.\n— С резиновой куклой?\n— Нет, с настоящей девушкой.\n— Ты поссорился с резиновой куклой?", "— Скажите, доктор, у меня скоро спадёт температура?\n— Да, уважаемый, к вечеру будет комнатная.", "Взять высушенное сердце жабы, залить отваром корней можжевельника, добавить перьев чёрного петуха, двух скорпионов и зуб дракона, выпаривать после захода солнца до первого крика совы.\nСтаринный рецепт изготовления тонера для лазерного принтера", "— Дорогой, я в магазин, тебе взять что-нибудь вкусненькое?\n— Конечно, дорогая, только осторожнее, на улице гололёд, смотри не разбей.", "Скорая помощь по эстонски - это как?\nВремя лечит.", "Рота ОМОНа ликвидировала поле конопли площадью 2 гектара, после чего объявила себя дивизией и отправилась в космос воевать с покемонами.", "Вдруг из маминой из спальни,\nКривоногий и хромой,\nВыбегает умывальник\nИ окончательно ломает неокрепшую детскую психику", "Как отличить быка от коровы?\nКогда доишь быка, он улыбается.", "В квартире звонит телефон. Подходит собака, пастью снимает телефон.\n— Гав!\n— Алло!\n— Гав!\n— Алло, вас не слышно, говорите по буквам!\n— Галина, Антон, Виктор!", "Во время нападения никогда не кричите ''Помогите, убивают!''. Лучше крикнуть что-то нейтральное, например ''Немцы!'' или ''Эй, на пароме!''", "Приходит Вовочка домой пьяный. Дверь открывает мама и говорит:\n— Вовочка, ты пьяненький?\n— В жопочку!", "Хлебозавод предлагает бублы, ватрухи, прянищи, батонищи и кренделищи. Надоело заниматься мелочёвкой.", "Застряли две блондинки в лифте. Первая орёт:\n— Помогите, спасите!\nА вторая говорит:\n— Чтобы нас услышали, нужно кричать вместе.\n— Вместе, вместе!", "Мой друг патологоанатомом работает, человек какой-то нелюдимый. Неразговорчивый, неулыбчивый, даже глазами делает так: морг, морг", "Мужик в аптеке:\n— Мне поллитра спирта.\n— А рецепт у вас есть?\n— Есть. Килограмм сахара, полкило свёклы и сто граммов дрожжей.", "Вышел Кащей Бессмертный на улицу зимой босиком и отморозил себе левую смерть.", "Вниманию граждан, наблюдавших 13 ноября в городе Новокузнецк медведя, сбежавшего из местного цирка: с облегчением!", "Объявление в солдатской бане:\nГолый - не тётка.", "— Смертельный номер! - сказал конферансье, объявляя выступление акробатов Попузиных. Какой всё-таки провидец.", "Своё последнее лицо Майкл Джексон купил в магазине ''Мир кожи в Сокольниках''.", "— Блииин, - сказал слон, наступив на колобка.", "На всех вечеринках Кутузов сидел напротив девчонок и строил им глазик.", "Технику безопасности при работе на шлифовальных станках я знаю как свои три пальца.", "— Мимо! - весело гремя карабинами, пронеслась связка альпинистов.", "Объявление:\nЦирк примет на работу ещё десять воздушных гимнастов.", "— Лёд тронулся, господа крестоносцы! - сказал Александр Невский.", "Краткая аннотация к ''Преступлению и наказанию'' про то, как Родион Раскольников нарубил бабок.", "В страшной и тёмной чаще лесной\nГрязный, оборванный, злой, утомлённый\nБродит обросший густой бородой\nМальчик, забытый экскурсией школьной.", "Процесс замедлялся, субстанции всплески\nВсё реже случались. Больной засыпал.\nЗаря пробиралась сквозь занавески,\nВ палате всё стихло. Пурген отыграл.", "Если у вас нет тренажёра с бегущей дорожкой, можно намазать ступни вазелином и бегать на месте.", "Великая отечественная война, перед боем Рабинович пишет заявление в партию:\nЕсли я не вернусь из боя, прошу считать меня коммунистом. А если да, то нет.", "Пописай в сугроб - почувствуй себя лазером.", "— Доктор, когда я кончиком дотрагиваюсь до комочков фольги, в которой до этого пекли картошку, у меня покалывает за ухом. Что это значит?\n— Что у вас слишком много свободного времени.", "Полезные советы: когда бандиты начинают выламывать дверь, попробуйте одновременно ломать её со своей стороны. Это озадачит злоумышленников.", "Объявление:\nПродаются женские часики. Один часик - 50 долларов.", "Если отложить на послезавтра то, что можно сделать сегодня, у тебя будет два свободных дня.", "Владимир Ильич Ленин очень спорт любил. Особенно гири. Только поднять не мог.", "Дровосеки - это люди, занимающиеся дровосексуализмом.", "Вчера паспортное имя Иванова Петра Степановича был за вознаграждение возвращён Курмангалиеву Ахмеду Арсановичу.", "Что может быть отвратительнее, чем откусить яблоко и обнаружить там червяка?\nОткусить яблоко и обнаружить там полчервяка.", "В Киеском пищевом институте защищена диссертация на тему ''Как правильно закусывать водку''. Правильно закусывать водку надо винегретом и манной кашей, потому что манная каша потом выходит легко, а винегрет - красиво.", "— Мойша, откуда у тебя такие классные часы?\n— Это мне папа продал, когда умирал.", "— Девушка, что вы будете: водку или самогон?\n— Ой, ну я прямо даже не знаю. Всё такое вкусное.", "Инструктор по прыжкам с парашютом в самолёте:\n— Первый пошёл! Второй пошёл! Третий пошёл! Парашютики не забываем, не забываем парашютики!", "В автобусе:\n— Мужчина, развернитесь, мне держаться не за что!", "На рынке:\n— Бабуля, что это у вас за ягода?\n— Чёрная смородина.\n— А почему красная?\n— Потому что зелёная.", "На рынке:\n— Это у вас картошка на посадку?\n— Нет, блин, на взлёт!", "Заходит мужик в магазин.\n— У вас есть верёвка и мыло?\n— Вы что, вешаться собрались?\n— Нет, блин, сейчас помоюсь и в горы!", "Если вас съели, не волнуйтесь - у вас есть **два** выхода.", "Не бывает некрасивых надувных женщин. Бывают слабые лёгкие.", "Наши учёные научились скрещивать вишню с коноплёй. Теперь из неё можно варить вкусное и смешное варенье.", "Хозяйке на заметку: стеклянный глаз, вставленный в дверной глазок, отпугнёт от вашей квартиры любого вора.", "Сторонники газового оружия до сих пор спорят, что всё-таки лучше: газовый ключ или газовая труба.\n     ||очевидно газовая ебля :roflaneblishe:||", "Мужик решает кроссворд.\nПервая буква финского алфавита. 16 букв.", "— Девушка, у вас такие большие глаза, что в них можно утонуть! А на носу - повеситься.", "Хозяйке на заметку: если муж назвал вас в постели чужим именем - откликайтесь, не пожалеете.", "Хозяйке на заметку: если у вас сломалась мясорубка, попробуйте продавить мясо через дуршлаг.", "— Я вас, кажется, где-то видел.\n— Да, я там часто бываю.", "Отдых бывает активный и пассивный. Активный - когда отдыхаете вы, пассивный - когда отдыхают вас.", "Любите внуков. Они отомстят вашим детям.", "На западе догорала зорька - последняя колхозная корова.", "Из репортажа:\n— Но вот сошла лавина, и все лыжники финишировали одновременно.", "Не так страшно стать дедушкой, как страшно спать с бабушкой.", "И волки сыты, и овцы целы. И пастуху светлая память.", "На солнце можно посмотреть в телескоп дважды: один раз левым глазом и один раз правым.", "— Тоже неплохо! - сказал муж, кинув камень в собаку и попав в тёщу.", "Вышла Василиса Прекрасная замуж за Иванушку и стала Василиса Дурак.", "Чтобы корова меньше ела и давала больше молока, её надо меньше кормить и больше доить.", "Почему у гориллы такие широкие ноздри?\nПотому что у неё очень толстые пальцы.", "— Девушка, где вы купили такие тонкие кривые чулки?", "Огуречный рассол - нового дня глоток.", "В воскресный поход приглашаются все энтузиасты этого дела. Этого дела брать по две бутылки.", "Яблочко от яблоньки недалеко ябнулось.", "— Дедуля, ты что, хочешь засунуть этот кораблик в эту бутылку?\n— Нет, внучек, я просто хочу высунуть из неё руку.", "Палач заносит топор над головой осуждённого и спрашивает:\n— Вам как: куском или порезать?", "Виагра плюс димедрол: любовь, похожая на сон.", "Секс в презервативе - совмещение неприятного с бесполезным.", "Если выпил хорошо - значит, утром плохо.\nЕсли утром хорошо - значит, выпил плохо.", "Лечу бесплодие методом тыка.", "Объявление:\nТребуется женщина 90 на 90 на 90 для уборки в танке.", "Объявление в газете:\nКрутая тёлка с клёвым прикидом и хатой снимет чувака с тачкой для разговоров о погоде.", "Продам китайский гарнитур из 11 предметов: 2 ценовки и 9 портретов Мао Цзедуна.", "Водка, водка, огуречик - вот и спился человечек.", "— Сынок, если ты съешь ещё один кусок торта, ты лопнешь!\n— Дай мне торт и отойди подальше!", "В Эстонии вывели новую породу собак ''эстонская борсая'' для охоты на раненых улиток и черепах.", "Известный режиссёр Роман Виктюк поставил ''Дядю Ваню''. Ещё никто так не ставил Дядю Ваню.", "В джунгли пришла большая засуха. Вчера отмечали день рождения Маугли.", "— Мама, что такое паранойя?\n— Ты же понимаешь, что я этого не знаю и спрашиваешь это, чтобы поиздеваться надо мной?!", "Недавно вышла русифицированная версия голливудского хита ''Харли Дэвидсон и ковбой Мальборо''. Она называется ''Иж Юпитер-3 и пастух Беломор''.", "— Я вчера в лесу три ведра грибов собрал для тёщи.\n— А вдруг они ядовитые?\n— Что значит вдруг?", "Объявление:\nНа этой неделе в студенческом общежитии ожидаются перебои с горячей и холодной водой. Перебьются корпуса 1, 4 и 6.", "Профессор студентам-медикам:\n— Мой внутренний телефон 32-08, запомнить очень просто: 32 зуба и 8 пальцев.", "Пейте, дети, молоко - туалет недалеко.", "Вот тебе и мыло душистое, и верёвка пушистая.", "— Как тебя зовут?\n— Сам Самыч.\n— Значит, девушки у тебя нет?", "Сдаётся кровать с девушкой. Кровать красивая, девушка надёжная.", "Десятое ноября - день милиции, или Хэллоуин по новому стилю.", "Из школьного сочинения:\nМедведи увидели, что постель медвежонка измята и поняли - здесь была Маша.", "— Девочка, почему у тебя платьице белое?\n— А я сдаюсь.", "— Девушка, кем это вы себя мните?\n— Не ваше дело, кем я себя мну.", "— У меня голова болит, не знаете, чем можно снять напряжение?\n— Вольтметром.", "И распороли волку брюхо, и достали оттуда бабушку. Правда, не всю: только голову и левую руку.", "— Алло, это морг? Вы тут в заявке требуете десять новых холодильников. Что они у вас тут, постоянно жрут, что ли?", "Секунда - время, за которое время негр пробегает одну девятую часть стометровки. Эталонные негры хранятся в подвале палаты мер и весов.", "— А правда, что тебя укусила акула?\n— Правда.\n— А за что?\n— А вот это неправда!", "Если у вас подмышкой пахнет, постирайте коврик.", "Мужик приходит к врачу.\n— Доктор, мне плохо, почему у меня такой больной вид?\n— Вам, дорогой, надо почаще бывать на свежем воздухе.\n— Скажите, а это до того, как я почту разнесу или после?", "И швец, и жнец, да и вообще пиздец.", "Тридцать пять - баба ягодка опять.\nСорок один - баба снова мандарин.", "— Пап, а люди есть?\n— Нет, сынок, возьми-ка сыру поешь.", "О жёнах.\n\nЕсть только миг\nМежду прошлой и будущей.\nИменно он\nНазывается жизнь.", "Вот в Помпеях тоже все жили долго и счастливо. И умерли в один день.", "— А с чем связана твоя работа?\n— С идиотами.", "Отец приходит домой после ночной смены. Его встречают дети и начинают кричать:\n— Папа, папа, давай поиграем!\n— Давай поиграем в мавзолей: я буду Ленин, а вы - часовые.", "Если сделать шнурки на ботинках длиннее, то можно будет ходить при ходьбе, помогая себе руками.", "После того, как Буратино подхватил грибок, в доме у папы Карло не переводилась отличная закуска.", "В Израиле анонсирована новая модификация американского танка ''Абрам'' с учётом местных особенностей. Результатом многолетних изысканий военных учёных Израиля стал танк с обрезанным дулом ''Авраам'', украшенный непобедимой звездой Давида.", "В фотостудию заходит клиент.\n— Сделайте мне, пожалуйста, фотографии с этой плёнки.\n— 9 на 13?\n— 117, а что?", "Внезапно меня охватила необычайная лёгкость. Тело стало словно пушинка, и я плавно переплывал от одной стенки к другой, слегка отталкиваясь. Ничто не стесняло движений. И только в голове вертелась назойливая мысль: почему в нашей стране не могут сделать нормальных канатов для лифтов?", "Книгу Гиннеса украсил\nВася Крючкин из Орла.\nТри поллитра может Вася\nВыпить залпом из горла.", "— Товарищи! Вы из правоохранительных органов?\n— Нет, мы из левонарушительных.", "— Доченька, принеси пять тарелок!\n— А зачем столько?\n— Мне нужно с папой поговорить.", "У нас есть такая традиция - присесть на дорожку, но нет традиции убрать за собой.", "Я свою верность мужу блюла, блюду и блють буду.", "Кого достал Достоевский? Косил ли от армии Касьянов? Кого пугает Пугачёва? Что курит фигурист Плющенко? И на что кидает Надежда Бабкина? Смотрите новую передачу ''Вечер весёлых вопросов''.", "Бабе скоро сорок лет, прыгает как дурочка.\nКто даст правильный ответ: кто она?", "Кошмар альпиниста: день потерять, а потом за пять минут долететь.", "— Девочка, вы отличница?\n— Нет.\n— Хорошистка?\n— Нет. Я удовлетворительница.", "Несмотря на все усилия, прилагаемые ватерполистами Чукотки, команда проиграла Туркменистану 26:0. Тяжёлые сапоги сковывали движения спортсменов, собаки тонули, да и упряжки плохо скользили по воде.", "Новогоднее предложение от сети ресторанов ''Ёлки-Палки'': днём для детей праздник ёлки, а ночью для взрослых...", "Сначала он снял с неё юбку, затем медленно стянул блузку. Потом он расстегнул лифчик, и он упал к его ногам. А потом он снял с неё трусики. Перед ним находилась голая бельевая верёвка.", "В сандуновских банях:\n— Рюрик Соломонович, одно из двух: или снимите крестик, или наденьте трусы.", "Опытная снегурочка поможет вашему малышу не испугаться прихода Деда Мороза.", "Снегурочке 90/60/90 требуется Дед Мороз с хорошим подарком.", "Сижу дома, вдруг звонок. Открываю дверь - никого. Опять звонок, опять открываю дверь - никого. И так пять раз. Думаю, полтергейст?\nДа нет, телефон.", "Идёт операция в травматологической больнице.\n— Доктор, а я ногу не потеряю?\n— Смотря где вы будете её хранить.", "Испекла бабушка колобок. Оставила остывать и говорит ему:\n— Не ходи в Макдональдс, а то сосиску в задницу вставят.", "По наивности своей Пятачок полагал, что Винни питается исключительно мёдом, поэтому не обращал внимания на то, что Винни кормил его шесть раз в день.", "Послание от Золушки к фее:\nВремя проебала, сижу в тыкве, пью водку с крысами.", "Бабка, торгующая цветами, говорит проходящему мимо мужику:\n— Милок, купи букетик, неделю стоять будет!\n— Правда? Давай четыре.", "Кладбище. Ночь. К могильщику подходит сбежавший из тюрьмы зэк и говорит:\n— Браток, схорониться мне надо.", "Хозяйке на заметку: если ваша кошка вам надоела, не спешите её выбрасывать. Из неё может получиться замечательный кролик в сметане.", "В городе который день орудует маньяк. Пресса его уже назвала Джек Петушитель.", "Чтобы узнать, посолен ли борщ, достаточно опустить в него два электрода и пустить по ним ток. Если появится запах хлора - значит, борщ уже посолен.", "Как здорово, что все мы здесь сегодня набрались.", "Состарившись, Карлсон жил двумя вещами: вареньем и инсулином.", "Рецепт борща по-украински для гостей: берёте красную тарелку и наливаете кипятка.", "— Папочка, а почему у меня никогда не выпадает ден рождения на пятницу 13-е?\n— Да потому что ты родился 24 июня, идиот!", "— Вы не скажете, почём стоит это мясо?\n— Почему не скажу? Мы с вами разве поссорились?", "На фильм ''Гарри Поттер и Философский Камень'' вышло продолжение: ''Гарри Поттер не вылезает из Тайной Комнаты''.", "— Вась, а ты знаешь, что в водке много калорий?\n— Да ну? Давай тогда вторую на закуску возьмём!", "— Жирная свинья! - ещё долго звучало в ушах Пятачка после того, как Винни в очередной раз обнаружил пустой горшочек мёда. Но Пятачок понимал, что это была лишь лесть и ему надо было ещё долго работать над собой.", "Знаете ли вы, что собачья упряжка движется в два раза быстрее, если в санях сидит хотя бы один кореец?", "В автомобильной аварии Буратино потерял ногу и ходил по улицам, мягко постукивая протезом из колбасы.", "Поцеловал Иван Царевич Василису, и превратилась она в лягушку. Поцеловал Иван лягушку, и превратилась она в Василису. Поцеловал Иван Василису, а гости всё изгалялись:\n— Горько! Горько!", "Где щи, там и нас ищи.", "— Алё, это пожарные?\n— Да.\n— Тут врач с милиционером дерутся, я что-то не знаю, куда позвонить.", "Повар и официант наблюдают за посетителем из кухни.\n— Смотри, Федь, он это ест! Честное слово, ест!", "Почему у гаишника палка полосатая?\nПотому что когда везёт, когда не везёт...", "Лёгким движением руки танцплощадка превращается в ринг.", "Сын, вбегая к отцу в кабинет:\n— Пап, я на минутку, только поздороваться!\n— Ты опоздал, мама уже забегала поздороваться и выгребла всё, что было у меня в карманах.", "— Классное в этом году было лето!\n— Ага. А главное, что на выходные пришлось.", "— Чебурашка, ты меня слышишь?\n— Ген, ну посмотри на меня, конечно, тебя слышу!", "— Всё! Кончилась моя семья! - говорил папа Карло, сидя в холодный вечер у камина.", "Если вы боитесь поправиться, выпейте перед едой 50 грамм коньяка. Коньяк притупляет чувство страха.", "Потерялся мальчик с самокатом. Особые приметы: перекачана правая нога.", "Рекламная акция от производителей тестов на беременность: обменяй положительный тест на погремушку!", "Маленькие хитрости: знаете ли вы, что если золотую рыбку положить на сковородку, то количество желаний увеличивается до пятидесяти?", "Брюнетка заварила кофе и говорит:\n— Ты знаешь, в чайнике осталась горячая вода, выливать жалко. Куда её деть?\nБлондинка ей говорит:\n— Поставь её в холодильник. Горячая вода в доме всегда пригодится.", "Дни недели делятся на выходные и за одни проходные.", "Один приятель звонит другому с радостным сообщением:\n— У меня уехала тёща!\n— Кто уехал?\n— Говорю по буквам: тигр, ехидна, щука, акула!", "Утренний макияж - это восстановление лица по черепу.", "Ёжик в парикмахерской.\n— Как будем стричься?\n— Под ёжик!", "Специально для живущих в Санкт-Петербурге: машинист электропоезда Сидоров, будучи в состоянии алкогольного опьянения, открыл движение поездов на участке ''Лесная - Площадь Мужества''.", "Летайте самолётами Узбекских авиалиний! В них уютно!", "Объявление:\nПродаётся детский велосипед Харковского Ордена Трудового Красного Знамени и Ордена Великой Октябрьской Социалистической Революции велосипедного завода имени Владимира Ильича Ленина.", "Примета: если свет в туалете выключается со звуком ''эээээээ'', значит в туалете кто-то есть.", "Объявление:\nГолова профессора Доуэлля ищет работу. Интим не предлагать.", "С утра ехали на дачу, а вечером возвращались с этого грёбанного огорода.", "Утром не завтракаю, так как думаю о тебе. Днём не обедаю - думаю о тебе. Вечером не ужинаю - думаю о тебе. Ночью не сплю - кушать хочу.", "— Великий князь, а почему тебя называют Владимир Ясно Солнышко?\n— Та-а-ак, чтобы сегодня ночью была у меня в опочивальне! Ясно, солнышко?!", "Настоящий охотник определит возраст медведя по количеству засосов на лапах.", "— Всё, что вы скажете, может быть использовано против вас!\n— Арифмометр.\n— Что?\n— Используйте против меня арифмометр.", "Если у вас накопилось много пустых пузырьков из-под французских духов, не спешите их выбрасывать. В этих пузырьках можно носить приятно пахнущие анализы в поликлинику.", "И дым копчёностей нам сладок и приятен.", "Он был настолько утончён, что вместо туалетной бумаги пользовался серпантином.", "Хорошо в Сибири летом!\nЦелый месяц снега нету.", "Секретарша должна знать и хорошо выполнять три команды: сидеть, лежать и факс.", "Ужин при свечах - романтическое лечение геморроя.", "Диалог в больнице:\n— Сестра! Сестра! Я хочу пи-пи!\n— Сейчас принесу кря-кря!", "Аптека. Мужик, показывая на упаковку с сушеным зверобоем:\n— Девушка, у Вас зверобой свежий?\nПродавщица, саркастически:\n— Вчерашний!", "Взмахнула Василиса Премудрая платочком, три раза вокруг себя обернулась, ударилась о землю и вырубилась.", "Мужчина приходит к окулисту:\n— Доктор, у меня болит глаз, что делать?\nОкулист спокойно отвечает:\n— Знаете что, любезный? У меня недавно болел зуб, так я его вырвал и всех делов.", "Объявление: «Продаётся собака. Добрая, ласковая. Ест всё. Очень любит детей.»", "Вопрос теста: «Ваша тёща и налоговый инспектор находятся в объятом пламенем доме. У Вас есть возможность спасти только одного из них. Что Вы выберете: пойти пообедать иди сходить в кино?»", "Машина Штирлица - руль слева. Машина Джеймса Бонда - руль справа. Машина агента Малдера - руль где-то рядом.", "— Алло, Международный Валютный Фонд?\n— Да.\n— Вы обещали перевести деньги!\n— Переводим: «деньги» - это «money».", "Разговор двух англичан:\n— Куда идёшь?\n— Домой... (*показывает направление взмахом руки*)\n— Значит, к морю?\n— Почему это к морю?\n— А здесь всё в сторону моря. Ёбаный остров.", "Английская поговорка: «Когда леди покидает кабриолет, лошадь испытывает некоторое облегчение.»", "— Доктор, что применять при раскалывающей головной боли?\n— Клей!", "— Доктор, у меня звенит в ухе!\n— А вы не отвечайте!", "— Почему у тебя круги вокруг глаз? Опять пил вчера?\n— Чё сразу пил? Просто уснул на стаканах.", "Поговорка: «Семь раз об дверь, один раз об рельс.»", "Объявление в газете: «Куплю инвалидную коляску и фильтры для базара.»", "После выпуска книги «Чудо голодания» Поль Брэк приступил к написанию трилогии - «Радость плоскостопия», «Восторг педикулёза» и «Счастье слабоумия».", "Из эротического романа:\n…и он овладел ею в позе ''поиск домашних тапочек под диваном''.", "В эстонском варианте игры «Кто хочет стать миллионером» ввели дополнительную четвёртую подсказку: «ПИСЬМО ДРУГУ».", "Как добиться того, чтобы у блондинки загорелись глаза?\nПосветить фонариком в ухо.", "Как называется, когда блондинка перекрашивает волосы в чёрный цвет?\nИскусственный интеллект.", "Редкая Снегурочка долетит до середины костра.", "— Мне очень не нравится Ваш кашель.\n— Не могу ничего поделать, другого нет.", "Нашей кошечке сначала тоже не понравился пылесос. А потом - втянулась...", "— Сестра! Утку мне!\nС соседней кровати доносится голос:\n— И мне кусочек...", "Врач слушает лёгкие больного и приговаривает:\n— Хорошо, хорошо, очень хорошо…\n— А что ж хорошего?\n— Хорошо, что у меня такого нет!", "«Бутылки не принимаем. Умолять - бесполезно.»", "Пионеры на заработанные деньги покупали проституток и отпускали их на волю.", "Дайверы бывают смелые или старые. Смелых старых - не бывает.", "«Фирме требуется главный бухгалтер. Работа - год через пять.»", "«Меняю скатерть-самобранку на аналогичную простынь.»", "Объявление: «Экстрасенс - дамам: Снимаю. Порчу.»", "Объявление в газете: «Прекрасной семье для полной гармонии требуется урод.»", "Объявление: «Меняю ВАЗ 2110 на Вас в 21:10.»", "Объявление: «Молодая семья из трёх человек, без детей, снимет квартиру. Порядок и чистоту - гарантируем.»", "Объявление: «Срочно, за полцены продам полдома. Обращаться после полудня. Спросить полхозяина.»", "Брачное объявление: «Падишах ищет свою 1/100 часть.»", "Объявление: «Работа для 40 человек. Спросить Робин Бобин Барабека.»", "Я развелся в третий раз,\nОбъясню причину:\nЛетом ездил на Кавказ -\nПолюбил мужчину.", "Не тот герой, что кучу баб победил, а тот герой, кто с одной бабой всю жизнь борется.", "К чёрту латынь! Слово «милиция» имеет исконно русское происхождение. Это просто сокращение от слов «милые лица».", "Новый лох лучше старых трёх.", "Настоящий интеллигент никогда не скажет «Ёб вашу мать!»\nОн скажет: «Я Вам в отцы гожусь!»", "Спецкомиссия ООН приняла решение запретить проведение в Китае опытов по клонированию. Так, на всякий случай.", "— Зачем Вам так много хозяйственного мыла?\n— Хозяйство своё мыть!", "Женщина за рулём как звезда: её все видят, она - никого.", "Он жил долго, счастливо и умер в один день.", "Шведская поговорка: «Четвёртый - лишний!»", "Если у вас всё время отличное настроение, великолепные друзья, сногсшибательная подруга, огромная зарплата, не бывает похмелья, и вы никогда не были у дантиста, у вас есть один выход - скажите «Нет!» наркотикам!", "Имея один маркер, можно изрисовать всё, кроме этого маркера. Имея два маркера, можно изрисовать вообще всё.", "Мы делили апельсин, много наших полегло.", "Эстонская вермишель быстрого приготовления.", "На нудистском пляже:\n— Знаешь, что мне сейчас нужно?\n— Не слепая, вижу!", "Из хроники происшествий: «Сегодня под Дублином двухместный самолёт «Cesna» упал на католическое кладбище. Спасатели уже обнаружили 750 тел, поиски продолжаются…»", "Поговорка: «У семи геев дитя без мазы.»", "«Куплю сторожевого хомячка с трёхлитровой будкой.»", "Возбуждённый колобок чем-то напоминает чупа-чупс.", "Очкарик очкарику друг, товарищ и запасные очки.", "Чувствую - могу! Но никто не даёт.", "Когда я ем, я глух и нем, хитёр и быстр, и дьявольски умён.", "Весело и приветливо светятся окна морга.", "Грамм никотина убивает лошадь, а капля нашего моющего средства убивает жирную лошадь.", "Секрет счастливой жизни: «Никогда не заглядывай в пирожок, который ешь!»", "Если Чебурашку положить на асфальт и обвести мелом, то получится вполне неприличная фигура.", "Сборная России по спортивной ходьбе с мячом.", "Если быка неожиданно взять за рога, он может так испугаться, что потом всю жизнь не будет давать молоко.", "Мы рязанские мужики простые. В топ-модели не кончали.", "— Родила царица в ночь не то сына, не то дочь… Серёгой назвал!", "На торжественном приёме: «Господин Цукерман с супругой - госпожой Цукервумен.»", "Лети, лети лепесток, через запад на восток, через север, через юг, возвращайся, сделав круг, а потом залети на Кавказ, потом к тёте в Житомир, передай привет бабушке и дедушке из Пензы, только отпусти нас, чудо-трава!", "Если бы Бог хотел, чтобы мы думали только головой, он бы сделал нас колобками.", "Кастрированный бык - это бык, который не несёт яйца.", "— Девушка! Да что ж вы так убиваетесь? Вы ж так никогда не убьётесь!", "— У меня к вам два вопроса. Во-первых, сколько это стоит? Во-вторых, почему так дорого?", "Учитель сказал, что я совсем не знаю математики и поставил мне в дневник какую-то цифру.", "«Убью соседей. Быстро. Недорого. Земфира.»", "Объявление: «Редкостная скотина ищет изощрённую стерву для совместных дискуссий. Телефон…»", "«Циклюю паркет. Недорого. Правда, хреново…»", "Объявление: «Подземный гараж в лесу. Сыро. Страшно. Дорого. Телефон…»", "Три дня и три ночи смешил Иван-Царевич царевну Несмеяну, но всё безрезультатно. Тогда он обиделся, встал, оделся и ушёл.", "За обедом жена с большим увлечением выколачивает мозги из кости в ложку. Желая угостить мужа, говорит:\n— Хочешь, я и тебе мозги вышибу?", "Рецепт: «Как приготовить сосиски в тесте? Сварить сосиски и дать их тестю.»", "Кто не рискует - тот не пьёт антибиотики.", "Стоят на остановке два психолога. Первый:\n— Что-то автобуса долго нет.\n— Хочешь поговорить об этом?", "Знаете, почему рыба не клюёт?\nПотому что у неё нет клюва.", "Коней на переправе не имеют.", "Оля, отлично выглядишь! Бухала вчера?", "Человек портится с головы.", "— Как тебя называет жена?\n— Обезьяной.\n— Это почему?\n— Потому, что от меня уже произошло несколько человек.", "— Скажите, у вас ноги от рождения такие кривые или вы их бигудями накручиваете?", "Из-за отключения электроэнергии в эстонском метрополитене около двух сот эстонцев на два часа застряли на эскалаторе.", "Я своей смешною рожей сам себя и веселю.", "Что означает жест ГАИшника «Руки с жезлом, поднятые вверх»?\n«Свободная касса»!", "Счастливые ментов не замечают.", "Картина Репина: «Кащей Бессмертный слушает кукушку.»", "— Ну и синяк! Ты что, стукнулся ночью о дверь? - спрашивает один приятель другого.\nНет, это моя домашняя фея приложила свою волшебную палочку к моему лбу!", "Пока у бабы грим не смоется, мужик не перекрестится.", "Если вы пригласили девушку кормить рыбок, а аквариума у вас отродясь не было, откройте хотя бы банку шпрот. Как правило, покрошив туда немного хлеба, девушки начинают догадываться, зачем их позвали.", "Горох - как много в этом звуке!", "Гражданами Непала считаются люди, зачатые НЕпальцем и НЕпалкой.", "Хороша Маша, да жена - Наташа.", "Семь раз - налей, один раз - заешь!", "Записи в школьном дневнике Л.И.Брежнева: «Носит по четыре октябрятских звёздочки!»", "Кулинарный совет: «Праздничный пирог не будет рассыпаться, если слои варенья чередовать со слоями фанеры.»", "В магазине:\n— Девушка, покажите мне, пожалуйста, соковыжималку.\n— Извините, я как-то не сильна в пантомиме.", "Психическая атака: «Матросы, скачущие на зебрах.»", "Из учебника для военных водителей: «Зеркало заднего вида служит для подачи заднего вида в глаза водителя.»", "Одна секретарша приходит наниматься в фирму на работу и говорит:\n— Я печатаю 1200 знаков в минуту.\nВсе ахнули. Она добавляет в сторону:\n— Такая ерунда получается!", "Экскурсовод в зоопарке рассказывает:\n— Это - индийский слон, а это - африканский.\n— А какая между ними разница? - спрашивает один из посетителей.\n— Огромная: одного зовут Раджа, а другого - Бобо.", "Если на следующий день после пьянки ты чувствуешь себя хорошо, голова не болит и нет похмелья - значит, пили позавчера.", "Реклама: «Смотрите - к ней прикованы все взгляды! Она принимает новый натуральный препарат на основе редьки и гороха, и резко, с треском, худеет прямо у всех на глазах.»", "Дети, зачатые с помощью Виагры, отличаются от нормальных тем, что могут стоять сразу после рождения.", "Напрасно так орал и сопротивлялся Кащей. Санитары всё равно запихали его яйцо в утку.", "В школу №56 поступил звонок о заложенной бомбе. Когда было установлено, что звонок ложный, на место происшествия тут же выехала группа быстрого реагирования.", "Объявление: «Придумаю имя вашему ребёнку. Звонить по телефону… Спросить Кетсалькоатля Некрономиконовича Ортонктидоносцева.»", "Выйду замуж за милую душу.", "Снимаю судимость по фотороботу.", "Пыль со склада в Москве. Самовысос.", "Если фотоальбомчик маленький и тоненький, а фотография одна и страшненькая, это - паспорт.", "— Женщина! Вам очень идет эта шляпка!\n— А по-моему, она мне велика.\n— Это не страшно: в ней же есть дырочки для глаз.", "Лотерея Минздрава «Лото-Больной». Еженедельно разыгрываются биллютени от трёх до пяти дней, плоскостопие для призывников, лечение за рубежом и суперприз: инвалидность первой группы.", "В нашем спортивном магазине вы можете купить всё для подводного плавания: гирю, веревку, тазик с цементом.", "После нас хоть потом.", "Каждым осенним вечером я люблю сидеть дома и тупо смотреть на обои. На обои мои волосатые ноги.", "Как йоги делают клизму? Садятся в лужу и делают глубокий вдох.", "— Кукушка-кукушка, накукуй мне сто лет!\n— А накукуй тебе столько?", "Почему у бегемотов круглые ступни?\nЧтобы легче было перепрыгивать с кувшинки на кувшинку.", "Рекордный урожай хлопка собрали в этом году узбекские колхозники. Для этого им потребовалось выпотрошить около 100 тысяч ватных халатов.", "Когда-то я работал парикмахером. В моей практике был ужасный случай - я нечаянно отрезал ухо своему клиенту. Я стал просить у него прощения, но он, по-моему, меня не услышал…", "Слабые люди спят лицом в салате, сильные - в десерте.", "— Можно ли на одну путёвку отдохнуть всей семьёй?\n— Можно, если путевку отдать тёще.", "Маленькая кулинарная хитрость: «Если сосиски отварить с кубиком говяжьего бульона, то они будут пахнуть мясом.»", "Встречаются два психолога. Один другому:\n— Ну, у тебя всё нормально. А как у меня?", "Бесконечно можно делать три вещи: смотреть на огонь, глядеть на воду и стирать с рук суперклей.", "Там было темно, как у дядюшки Тома в хижине.", "Было у отца три сына. И пришла им пора жениться. Так и живут с тех пор - втроём.", "— Доктор! У меня что-то болит где-то вот тут…\n— Сейчас я Вам выпишу какие-то таблетки…", "Если вы - бисексуал, то ваши шансы интересно провести субботний вечер резко увеличиваются.", "Дедушка Мороз! Пишу тебе письмо - принеси мне, пожалуйста, под ёлочку холодного кефирчика!", "Не до конца выпитое спиртное говорит о нездоровой атмосфере в коллективе.", "К двери подходит переписчик и звонит.\n— Кто там? - раздается голос из-за двери.\n— А кто там? - спрашивает переписчик, мгновенно приготовившись писать.", "Духовный дилер Вахабитов.", "С помощью бутылки водки табуретка легко превращается в кресло-качалку.", "Отпуск надо проводить так, чтобы потом не было мучительно хорошо от того, что он наконец закончился.", "Мой папаша, царство ему небесное, всегда был терпеливым человеком. Если я набедокурю, он медленно считал до ста, успокаивался, и только потом выпускал мою голову из-под воды.", "— Знаю, что муж мне изменяет, знаю - с кем, знаю - где, знаю - когда. Но не знаю - чем?", "Кличка Кутузова: «Один - ноль!»", "Вилка с четырьмя зубами - для гарнира. Вилка с тремя зубами - для мяса. Вилка с двумя зубами - для рыбы. Вилка с одним зубом - это нож.", "Они жили долго, счастливо, пока не узнали, что другие живут дольше и счастливее.", "Объявление: «Гадю на картах.»", "Если ваша девушка дуется по пустякам - проколите в ней дырочку.", "Праздник без водки - как паспорт без фотки.", "«Только через мой труп!» - отрезал Кащей Бессмертный, и Иванушка поскучнел.", "Мармелад следует есть понемногу, жадно, горстями выгребать его из коробки, стараясь набить себе полный рот. Глаза следует придерживать пальцами.", "Горячие эстонские парни в зоопарке любят наблюдать, как на ветвях деревьев резвятся ленивцы.", "На социологический вопрос «Есть ли милиционеры, которых Вы не боитесь?» подавляющее большинство опрашиваемых ответило: «Есть. Это хор МВД.»", "Крыша хлопает в ладоши. Всем спасибо. План хороший.", "«Покупайте лотерейные авиабилеты!»", "Кровать-расплодушка.", "Если женщине заткнуть рот, она будет говорить носом.", "Новый тариф «Пенсионный» - последний звонок бесплатно.", "Один мужчина молодой влюбился в бабу с бородой.", "Я пришёл тебе с дискеткой рассказать, что сеть упала.", "Блевать не блюю. Организм скотский. Если уж чего урвал - хрен отпустит.", "Фаберже. Автопортрет. Фрагмент.", "По полу тапки грохотали.", "Театр одного актера. Весь билет продан.", "По-чукотски «вегетарианец» означает «криворукий охотник».", "— А меня родители в честь прадедушки назвали и теперь надо мною все смеются.\n— А как вас зовут?\n— Прадедушка.", "Неудачная операция - половина удачного вскрытия.", "— Достань-ка из холодильника торт, милый!\n— Пожалуйста, а на сколько кусков его порезать? На четыре или на восемь?\n— Наверное, на четыре, восемь мне не одолеть.", "У Лёши было одно яблоко, а у Лёвы - четыре. Определите национальность каждого мальчика.", "Дудка - не барабан. В двери не застрянет.", "Кривые руки ломом не поправишь.", "— Радость моя, жёнушка моя милая, дай мне, пожалуйста, пиджак.\n— А где он, мой котёночек?\n— Наверное, куколка, в прихожей. Я бросил его там, когда ты, козочка моя, била меня вчера шваброй за моё позднее возвращение.", "Что такое «действительно страшная женщина»?\nЭто когда вы просыпаетесь с ней в одной постели, её голова лежит у вас на руке, и вы отгрызаете себе руку, чтобы убежать.", "Я пришёл к тебе с приветом, топором и пистолетом.", "— У меня две новости: хорошая и плохая.\n— Давай сперва хорошую.\n— Хорошая в том, что я не скажу Вам плохую.\n— А плохая?\n— А плохая, что не скажу хорошую.", "Мечта: поставить обогреватель в морозилку, включить его и посмотреть - кто кого.", "Новости медицины:\nТеперь наряду с такими страшными болезнями, как желтуха и краснуха, появилась не менее жуткая болезнь - цокотуха. Симптомы ужасны: люди ходят по полю и ищут денежку.", "— Может ли военный быть умным?\n— Военный может всё.", "В детстве и трава зеленее, и пиздюли мягче.", "— Здесь можно курить?\n— Нет.\n— А тогда откуда взялись эти окурки?\n— От тех, кто не задаёт вопросов.", "В парикмахерской. Мастер, уже дважды порезав клиента, заводит с ним разговор:\n— Вы у нас бывали раньше?\n— Нет, руку я потерял на войне.", "Мужество - это когда твоя жена застаёт тебя с другой в постели, а ты хлопаешь её по заднице и говоришь: «Ты - следующая!»", "А я в зоопарке работаю. Антилопу гну.", "Реклама: «Специальное предложение. Обогреватели «ДОБРОЕ ТЕПЛО». Наши экспедиторы доставят их прямо к вам домой в ёмкостях 0,5; 0,7 и 1 литр.»", "Весело встретил 8 Марта таксист Мамедов. Увидев одиноко идущую девушку, он предложил ей бесплатный проезд. Девушка из вежливости отказалась. Но личное обаяние и монтировка Мамедова помогли преодолеть девичью скромность.", "Чем меньше букв, тем ёмче слово.", "Мама приходит домой и говорит своей дочке:\n— У меня для тебя две новости: плохая и хорошая. Плохая новость - завтра мы переезжаем в другой город. Хорошая новость - там будет полным-полно новых мальчиков, которые не видели, как тебя стошнило в кафе неделю назад.", "К Новому Году на фабрике им. Крупской освоен выпуск новых недорогих невкусных конфет для Петербургской детворы.", "Новый русский читает сыну сказку:\n— Жили-были... короче... короче, умерли-бумерли.", "Парочка, обнявшись, сидит на диване.\n— О чём ты думаешь?\n— О том же, о чём и ты!\n— Прекрасно, тогда сделай мне один, только с ветчиной.", "— Доктор, скажите, а я буду жить?\n— Вот давайте только не будем загадывать, а?", "Впервые в цирке! Представление - «Собачья свадьба»! Супер-аттракцион! Собаки на собаках!", "Воспитанный мужчина, посоветовав кривоногой девушке идти в кавалерию, не будет уточнять мотивацию своего совета.", "Привет, дорогая! Мой козёл наконец-то разрешил мне пользоваться своим компьютером. Даже завёл почтовый ящик. Так что пиши мне по адресу zhena@zhizni.net", "Если выпить нарзана и запить тархуном, то можно стать Тарзаном или Нархуном.", "В роду Кукушкиных было три поколения гинекологов. Никак не могли наглядеться.", "На рынке рабов:\n— Мне два белых и половину чёрного!", "Во время войны мой дед сбил вражеский велосипед и был награждён педалью за отвагу.", "Народные приметы: «Перед дождём муравьи быстро бегают по муравейнику, закрывают все ходы и выходы и негромко матерятся.»", "Что считается не очень приличным тоном?\nЭто, например, когда вы, встретив беременную женщину, говорите: «Всем привет!»", "Венчаются раба Божья Наталья и страх Господен Дмитрий.", "Съел Серый Волк Бабушку, переоделся в её одежду, лёг в её кровать и стал ждать Красную Шапочку. Ну откуда он мог знать, что у Бабушки такой темпераментный Дедушка!", "Сел Иван Дурак на Коня-Идиота.", "Из новостей: «Вчера в Чечне в результате спланированной спецоперации был убит полевой командир Салаутдин Чигияев. По сведениям, полученным из надёжных источников, Чигияев был одним из лидеров боевиков, контролировал крупные финансовые потоки и был правой рукой Хоттаба. Это уже девятая правая рука Хоттаба, уничтоженная за текущий год.»", "— Дай десять баксов!\n— Не дам!\nВы посмотрели сценку «Козёл и Капуста».", "Больница. Врач подходит к больному и спрашивает:\n— Вам какой наркоз: дорогой или дешёвый?\nБольной:\n— Дешёвый, конечно!\nВрач:\n— Баю-баюшки-баю!", "Тихо, я сказал! Или я тихо сказал?", "— Ну как тебе твой новый ухажёр?\n— Вялый какой-то, будто его в теплице растили.\n— В смысле, огурчик - так себе?", "— У Вас есть разрешение на торговлю в Москве?\n— Мнэ такой разрэшэные имеет надо нэт, я сам москвист!", "Дрожащими руками размер не показывают.", "— Мама, я хочу в туалет!\n— А ты уроки сделал?", "В зоомагазине. Дама протягивает палец попугаю и говорит:\n— Ну, зелёненький, ты говорить умеешь?\nПопугай отвечает:\n— Мадам, откровенность за откровенность: Вы яйца несёте?", "Новую породу зайцев вывели работники Шушенской зверофермы имени Ленина. Новые зайцы имеют форму шапки с ушами по бокам. Селекционеры продолжают свою работу с целью получения зайцев с тесёмочками на ушах, с шёлковым подкладом на брюхе и разных размеров.", "Если вы уже полчаса стучитесь в дверь и вам не открывают, и за дверью - гудение, значит, либо там гудят без вас, либо это трансформаторная будка.", "Я русский бы выучил только за то, чтоб в ухо Ивану прохрюкать.", "Кто два раза старое помянет, тому очки не нужны.", "Она:\n— Расстегни мою блузку и положи её на столик. Теперь мой лифчик. Теперь сними мою юбку и мои трусики.\nОн делает всё, что ему велят. Она:\n— Не смей больше одевать мои вещи!", "— Папочка! А почему ты так высоко конфеты на ёлочку повесил?\n— Это чтобы ты, малыш, их до Нового Года не скушал!\n— А что же мне теперь, папочка, серпантин жрать?", "Захожу в казарму - никого нет! Спрашиваю: «Где все?», - молчат!", "Садясь в ванну, вспомни, в какой карман положил мыло.", "Вы меня ещё в драке не видели! Меня так пиздят!", "Попробовав раз, лечусь и сейчас.", "И про старуху бывает порнуха.", "Назвался груздем - лечись дальше.", "Жила-была девушка, очень рассеянная и забывчивая. Часто путала противозачаточные и успокоительное. Теперь у неё девять детей, но это её мало волнует.", "Как называется человек без левого уха, левого глаза, левой руки и левой ноги?\nОлл райт!", "Если вы захотели сосчитать количество иголок у ёжика, а ему некогда, сядьте на него, а потом не спеша у зеркала, посчитайте количество уколов.", "Из больницы сбежали люди с расстройством кишечника. Врачи быстро нашли их по горячим следам.", "В ресторане официант:\n— Поднимите, пожалуйста, голову, я вам салатик поменяю.", "Запер как-то папа Карло Буратино с Мальвиной в сарае, чтобы они ему дров на зиму заготовили.", "— Девушка! Как от вас приятно пахнет! Что вы сегодня пили?", "— О! Женя! Сгоняй за пивом!\n— Что? Это олигархическое проявление тирании и социума! Прекратите меня эксплуатировать! Всё! Это фиаско! Я коллапсирую как личность!\n— Так, отставить пиво. Жень, отсыпь немного?", "Шампанское - хорошо. Вино - ещё лучше! Водка - зашибись!!! Пиво - зря.", "Приглашаем всех принять участие в пивной акции «Молодёжь против ветра - 2002»!", "— Неужели моя болезнь так ужасно безнадёжна?\n— Ну зачем же так мрачно, давайте скажем по-другому: если я вас вылечу, я стану всемирно известен!", "31 декабря. Россия. Глухая провинция. Обыкновенная среднестатистическая семья, замученная финансовым кризисом, готовится к встрече Нового Года. Дети наряжают ёлку, мать хлопочет на кухне. Отец снимает со стены ружьё, выходит на крыльцо и пару раз стреляет в воздух, заходит в дом и громко объявляет:\n— Дети, я только что застрелил Деда Мороза. Подарков НЕ-БУ-ДЕТ!", "— Девушка! Вы, наверное, знаете очень страшную тайну!\n— С чего Вы взяли?\n— У Вас такое загадочно-страшное выражение лица.", "Четыре пропрезидентские партии Украины создали блок с полным названием «За единую Украину!», сокращенно - «ЗА ЕДУ». От более красивого и заманчивого названия «За единую и богатую Украину!» пришлось отказаться.", "— Кто оставил на полу салат «Оливье»?\n— Извините, вырвалось.", "Что-то с памятью моей стало. Отчего-то мне её мало.", "Хорошо смеётся тот, у кого смеялка шире.", "Если ты начал открывать пивные бутылки открывалкой, значит, ты мощно постарел.", "Муж с женой говорят друзьям:\n— Приходите к нам на Новый Год!\n— Мы не сможем.\n— Ах, как это любезно с вашей стороны!", "— Кто у вас в семье самый старший?\n— Пра-пра-пра-прабабушка.\n— Ну это же невозможно!\n— Во-во-во-возможно.", "— Слыхал? Вася выпил «правильного пива» после бани и как заново родился!\n— Что, похмелья не было?\n— Нет, ползал, писался и говорить не мог.", "Вначале я пил шампанское, после него перешёл на вино, затем была водка с пивом, а после этого отравился печенюжкой.", "Мария Исааковна Иванова заполняет анкету. Зав.кадрами интересуется:\n— А почему вы - Исааковна? Еврейка, что ли?\n— А по-вашему, Исаакиевский Собор - синагога?", "У меня был вчера незабываемый эротический вечер. Она - в красивом нижнем белье, на роскошной широкой кровати, а я - в доме напротив, в семейных трусах, с биноклем.", "Мне трудно пробиваться сквозь стену непонимания, я - как брошенный цветок под колёсами реальности, я разочаровалась в любви и дружбе и вкусила горечь предательства. Я - холостой патрон в обойме жизни. Помогите!\nКатя, 5 лет.", "Это тебе не шубу в трусы заправлять!", "Факир был пьян и факинг не удался.", "В соответствии с постановлением правительства Украины за номером таким-то, от такого-то числа «О льготах чернобыльцам»:\nК лицам, проживающим в радиусе 20 км от места аварии, следует обращаться с приставкой «фон». В радиусе 10 км - «Ваша светлость». В радиусе 5 км - «Ваше сиятельство».", "Недавно я зашла с подругой в магазин дублёнок и увидела там точно такую же как у меня куртку, которую я недавно взяла в бутике, но в два раза дешевле. Я очень расстроилась. А сегодня зашла на вьетнамский рынок и вообще чуть не повесилась.", "Новости науки: «Недавно нашими химиками получено новое вещество, от которого они никак не могут отмыть руки.»", "Три года назад мне пришла повестка из военкомата. Теперь мы активно переписываемся.", "Наконец-то сбылась юношеская мечта Васи! Он заасфальтировал все 6 соток родительского огорода.", "— Здесь больно?\n— Больно.\n— А здесь?\n— Больно...\n— А здесь?\n— А-а... Больше я Вам ничего не скажу!", "«Работа - не я!» - любил повторять Волк.", "Если у вас проблемы с ребёнком, спросите у жены. Может быть, это не ваши проблемы.", "— Милая! Не плачь так горько из-за того, что родители против нашего брака, я ведь могу найти себе другую невесту!", "— Алло! Это регистратура?\n— Да.\n— Хирург Ломов сегодня принимает?\n— Как обычно.\n— Я не в смысле «как обычно», я в смысле «больных»?", "— Нет, девушка, что вы! Вы мне не кажетесь немного глуповатой! Вы - немного умноватая!", "Никогда не забуду, как в прошлый раз напился. Ничего не помню.", "Тот, кто смеётся последним, думает медленнее остальных.", "«Ну и где этот чёртов Капитан Немо?» - сказала Му-Му.", "На церемонии бракосочетании двух геев:\n— А теперь один из вас пусть поцелует невесту.", "Экспресс-метод Анны Карениной.", "Если после похода в дорогой супермаркет у Вас осталась сдача, не спешите её выбрасывать...", "После выхода на экраны кинофильма «Гарри Портер» пивовидеоманьяки скоро смогут насладиться сиквелами «Гарри Лагер» и «Гарри Премиум». Особое внимание критиков вызовет «Гарри крепкий в поисках священного утреннего ерша».", "Мусорное ведро следует выносить, когда запах от него будет невыносим.", "Старые примелькавшиеся мужские носки можно покрыть лаком и использовать как вазочки для конфет, креманки для мороженного или мартини.", "После бала Золушка помнила только то, как с крысами закусывала тыквой и как пьяный принц надевал ей на ноги хрустальные салатницы.", "Последняя музыкальная новость:\nПугачёва вместе с семьёй переехала жить в деревню. Алла Борисовна теперь сама доит корову, Филипп Киркоров разводит кроликов и только Кристина Орбакайте, вспомнив детство, одиноко стоит посреди огорода.", "Люблю боулинг. Это единственное место, где можно пить пиво и при этом думать, что занимаешься спортом.", "Герасим поймал золотую рыбку. Теперь у него есть корова, лыжные палки и грудь.", "Однажды, когда я был маленьким, мы с бабушкой зашли в летнее кафе под открытым небом, чтобы пообедать. Потом пошёл ливень. Мне понадобилось три часа, чтобы доесть бульон.", "Все женщины мечтают о ласковом нежном любовнике. Но, к сожалению, у ласковых и нежных мужчин любовники уже есть.", "Настоящий хомяк в своей жизни должен сделать три вещи: пожрать, поспать и сдохнуть.", "— Доктор! Помните симулянта из шестой палаты?\n— Ну?\n— Умер!", "Доктор больному:\n— Какой у Вас вес?\n— Сейчас 116 килограмм. Максимальный был 121 килограмм.\n— А минимальный?\n— 3 килограмма 600 грамм.", "Новая фишка сотрудников ГАИ:\nЧтобы радар показывал больше, они бегут навстречу автомобилю как можно быстрее.", "— Алло! Это секс по телефону?\n— Нет, это секс по барабану.\n— В смысле?\n— В том смысле, что дом престарелых.", "В мире не существует ни одного законченного натюрморта «Холодное пиво с крупными дымящимися креветками».", "Буратино частенько издевался над Герасимом. Наденет шкуру собаки, проберётся в лодку, развалится на корме и орёт:\n— Ну топи, давай, топи, глухое ничтожество!", "Диарея - царица полей!", "— Алё! Это баня?\n— Нет, это его брат Болодя.", "— Мальчиш Кибальчиш?\n— Мальчу. Кибальчу.", "Стараясь не шуметь, рота эстонских разведчиков кралась к штабу противника. Посмотреть на это приходили жители всех окрестных деревень.", "— А я вчера с Ленкой целовался!\n— Ну вот молодец, а говорил - не пьёшь!", "— Скажи, Винни, это правда, что к тебе приезжают все родственники, а ты ещё ничего не готовил?\n— Что, Пятачок, страшно???", "У меня золотые дети, золотая тёща и золотая жена. А сам я - третий слева в фонтане «Дружба народов».", "Цыгынка гадала, что выпадет счастье - выпали зубы.", "Новость: вчера в семействе Букиных состоялся серьёзный разговор между отцом и дочерьми. Разговор был коротким, броски - точными и красивыми.", "С кем поведёшься, на того дети и похожи.", "В США прошёл конкурс на лучшие знания о России. Награды победителям - поездка в Россию. Первая премия - две недели, вторая - три недели.", "— Почему у тебя синяк под глазом?\n— А пусть не лезут!", "Раздел ''Гробы'' на всемирной выставке ''Мир упаковки''.", "Мужчина входит в цветочный магазин и просит:\n— Подберите мне, пожалуйста, сто роз для моей жены.\nПродавщица в ужасе:\n— Господи, что ж вы такого натворили-то, а?", "Хулиганы были так рады меня видеть, что даже дали с собой.", "— Капитан! А как вы догадались, что именно на этом месте и произошло крушение корабля?\n— О, мне помогли эти всплывающие подсказки.", "— Парикмахер, почему у вас такие грязные руки?\n— Я ещё сегодня никому не мыл голову.", "Неопытная леди выходит от гинеколога, внимательно разглядывает отметки врача в карте и возмущённо восклицает:\n— Какая же здоровая? Не больше, чем у других!", "Кто рано встаёт - других достаёт.", "Кактус - это глубоко разочаровавшийся в жизни огурец.", "Жена мужу:\n— Мы с тобой нигде не бываем!\n— Ладно, завтра пойду мусор выбрасывать, возьму тебя с собой.", "— Какие красивые у вас ноги! Одна красивее другой!", "— Сын родился! Три двести! Отдам за две пятьсот.", "— Ты видел сон про обезьянок и бегемота?\n— Нет, не видел.\n— Посмотри, классный!", "— Ты не одолжишь мне простой карандаш?\n— На, возьми.\n— Но это же красный!\n— А что, красный - для тебя уже слишком сложно?", "— Кстати, я сегодня плёнку с фоторужья проявил. Видел там твои гланды. Ты что, застрелиться хотел?", "Не тяни резину! Лучше купи на размер больше.", "Из передачи ''В мире животных'':\n— А мы пока проследим за повадками птички-коноплянки. Вот она, вернулась с прогулки и глупо хихикает.", "Существует легенда, что по количеству зарубок на батоне можно сказать, сколько ему лет.", "Наконец-то добился разрешения на выезд в Израиль Иван Степанович Иванов, сделавший обрезание в четвёртый раз.", "Девушка говорит врачу:\n— Доктор, ну прям не знаю, как вас отблагодарить!\n— Знаете, знаете.", "— Дорогой, у нас сегодня годовщина свадьбы, может, зарежем поросёнка?\n— Поросёнок-то здесь причём? Это братца твоего зарезать надо, он ведь нас познакомил!"]

@bot.command(pass_context=True, aliases=['list', 'commands'])
async def help(ctx):
    from datetime import datetime
    author = ctx.message.author
    help_str = "**xxhelp, xxlist, xxcommands**: выводить этот список\n**xx**r**zhu, xxjoke, xxnuzhd**: написать рандомную шутку из нуждиков. не забывайте прокручивать ''фьить-ха'' в голове после каждой.\n**xxs**c**reen, xxscr**: отобразить случайный скрин из лайтшота (может ничего не выпасть)\n**xxsay**, xxrepeat: сказать любую написанную тобой фразу от своего имени\n**xxlurkpasta, xxlpasta**: отправлять ссылку на какую-нить пасту из архива лурка\n**xxlurk**: кинуть абсолютно любую статью из лурка\n**xxbash, xxbashorg, xxquote**: отправить одну из цитат, хранящихся в цитатнике рунета (https://bash.im)\n**xxoldg, xxoldgames, xxog**: выдать какую-нить игру, выложенную на old-games\n**xxsmallg, xxsmallgames, xxsg**: то же самое, только с small-games\n**xxrps <text>**: поиграть с тобой в камень-ножницы-бумагу. более подробная инфа лежит в приписке help\n**xxd**i**ce <number>**: подбросить кость с любым указанным вами количеством граней. вообще любым.\n**xxfruit, xxfangame, xxfg**: показать случайный фангейм из delicious-fruit. Если вы не ебёте, что это такое - прописывайте **xxfruit help**\n**xxcrypto**: список команд, связанных с шифрами и кодировками\n**xxreport <text>**: книга жалоб и предложений\n**xxfrog**: топ сто(пятьдесят) смешных лягушек\n**xxcat**: коты.жпег\n**xxpepe**: рандомный пепе-пик\n**НОВЫЕ КОМАНДЫ НАХОДЯТСЯ В xxhelpnew ИЛИ hnew**"
    await ctx.send(embed=discord.Embed(title='Что я могу:', description=help_str, color=0xb33700))
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' help\n')

@bot.command(aliases=['hnew', 'helpn'])
async def helpnew(ctx):
    help_str = "**xxsound/xxs <soundname>** - если вы находитесь в войсе, то влетает к вам и проигрывает звук с выбранным названием. список всех доступных звуков находится в xxsound/xxs help\n**xxstop** - отключает бота из войса\n**xxlemur <text>** - переводид декзд на языг чиздейжего узбагоения. превед из 2010\n**xxles <text>** - ДеЛаЕт ТеКсТ нЕрЕаЛьНо КрУтЫм\n**xxtrans <text>** - переводит русский текст в транслитерацию английского\n**xxdetrans <text>** - то же самое, только из английского в русский\n**xxesolangs, xxesol** - выдаёт рандомную страницу из вики, посвящённой эзотерическим языкам\n**xxharosh, xxgood** - рандомная гифка одобрения\n**xxploh, xxbad, xxnasral** - рандомная гифка осуждения\n**xxbop, xxdance** - рандомный флекс.гиф\n**xxost** - блин блинский сколько до нового года осталось\n**xxfact** - love him or hate him he spittin facts\n**xxsaper** - простенький сапёр с поддержкой пресетов, изменения размера поля и количества мин на нём. подробнее - в xxsaper help\n**xxoblique** - эдакий аналог магического шара, но более вариативный и более подходящий для помощи тем, кто попал в творческий тупик. вводя команду, вы получаете напутствие, которое должны трактовать для себя по-своему. подробнее по теме находится здесь: http://futura.ru/article/index.php?id=122, https://zen.yandex.ru/media/antiplankton/sposob-kreativnosti-nepriamye-ili-obhodnye-strategii-braiana-ino-5a53d6e98c8be3221b05bf1e\n**xxpraz, xxday, xxparty** - показывает, какой сегодня праздник\n**xxkym** - рандомпик из know your meme\n**xxreddit <subreddit_name>** - выдаёт один из свежайших постов в указанном сабреддите, кулдаун 10 секунд\n**xxisaac/xxtboir/xxboir <item name>** - выдаёт информацию об указанном предмете из айзека\n**xxpgod/xxplatinumgod/xxtboi/xxboi <item name>** - то же самое, только инфа на инглише и из сайта platinumgod\n**xxava, xxpfp, xxavatar <@user>** - даёт аватарку выбранного пользователя\n**xxbible <text for search>** - при команде без приписки выдаёт случайный стих из библии. приписка служит для поиска стиха по его номеру или части текста\n**xxwordle** - запускает игру в вордл. её суть проста: нужно угадать слово из 5 букв за 6 попыток с помощью других слов из 5 букв. Зелёные клетки после каждой попытки обозначают буквы из введённого слова, которые совпадают с буквами в загаданном слове; жёлтые - буквы, находящиеся в загаданном слове, но на другой позиции; белые - полный промах.\n**xxach** - даёт информацию о случайной ачивке из сайта Retro Achievements\n**xxfortune** - отправляет пикчу со случайным предсказанием из айзека. можно сделать свой фортун-листок, вписав после команды текст. если хотите многострочный, разделяйте текст слешами\n**xxlol/xxlolsport** - кидает инфу о рандомной карте для трекмании от челика с ником lolsport, который наклепал больше десяти(!) тысяч карт\n**xxhexc <text>** - преобразовывает текст в шестнадцатеричный код и визуализирует его в виде квадратов, цвет каждого из которых является тем или иным шестизначным куском кода. эта фигня придумана вашим покорным слугой, так что подобное вы больше нигде не найдёте\n**xxhexcc <text>** - то же самое, только с кодом цвета в каждом квадрате\n**xxdehexc <pic_link>** - дешифрует картинку с квадратами. вместо ссылки к сообщению можно приложить саму картинку\n**xxinvite** - отправляет ссылку на приглашение в сервера"
    await ctx.send(embed=discord.Embed(title='Что я могу:', description=help_str, color=0xb33700))

@bot.command()
async def invite(ctx):
    await ctx.send("Ссылка на приглашение уже находится в моём статусе, но раз интеллект у тебя вкачен не настолько сильно, то вот, на, лови:\nhttps://cutt.ly/feedmejohn\nИ ещё раз, на всякий случай: https://cutt.ly/feedmejohn\nНу и напоследок, чтобы не забыл: https://cutt.ly/feedmejohn")

@bot.command(aliases=['joke', 'nuzh'])
async def rzhu(ctx):
    from datetime import datetime
    import random
    import glob
    author = ctx.message.author
    fch = random.choice(nuzhd)
    filename = random.choice(glob.glob("rzhu//" + str(random.randint(0, 18)) + '.mp3'))
    f = discord.File(filename, filename=None, spoiler=False)
    await ctx.reply(fch, file=f, mention_author=False)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' rzhu\n')

@bot.command()
async def roll(ctx):
    from datetime import datetime
    author = ctx.message.author
    message_id = ctx.message.id
    await ctx.reply(message_id, mention_author=False)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' roll ' + str(message_id) + '\n')

@bot.command()
async def krabik(ctx):
    from datetime import datetime
    author = ctx.message.author
    krabik = "<:krabik:792858253880852511>"
    tfc = "https://www.youtube.com/watch?v=9N7oSJiKwiQ"
    kr = await ctx.send(tfc)
    await kr.add_reaction(krabik)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' krabik\n')

@bot.command(aliases=['lpasta'])
async def lurkpasta(ctx):
    from datetime import datetime
    import random
    author = ctx.message.author
    templ = 'http://nouveau.lurkmore.net/'
    lines = open('lurk.txt', encoding='utf-8').read().splitlines()
    myline = random.choice(lines)
    url = templ + myline
    await ctx.send(url)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' lurkpasta\n')

@bot.command()
async def lurk(ctx):
    from datetime import datetime
    import requests
    from bs4 import BeautifulSoup
    author = ctx.message.author
    site = 'http://nouveau.lurkmore.net/%D0%A1%D0%BB%D1%83%D0%B6%D0%B5%D0%B1%D0%BD%D0%B0%D1%8F:Random'
    req = requests.get(site)
    soup = BeautifulSoup(req.text, 'lxml')
    title = soup.find('title').text[:-11].replace(' ', '_')
    await ctx.send('https://nouveau.lurkmore.net/' + title)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' lurk\n')

@bot.command(pass_context=True, aliases=['bashorg', 'quote'])
async def bash(ctx, *args):
    import random
    import requests
    from bs4 import BeautifulSoup
    quote = ' '.join(args)
    quote_text = '#{}'.format(quote)
    if len(quote_text) > 1:
        site = 'https://bash.im/quote/'
        myline = quote
        site += ''.join(str(myline))
        l = requests.get(site)
        soup = BeautifulSoup(l.text, 'lxml')
        title = soup.find("meta",  property="og:description")
        de = str(title["content"] if title else "Такой цитаты не существует")
        numb = soup.find("meta",  property="og:title")
        det = str(numb["content"] if title else "")
        # if de != ("No meta title given"):
        dett = str(det.replace('Цитата ', ''))
        await ctx.channel.send(dett + '\n' + de)
    elif len(quote_text) == 1:
        site = 'https://bash.im/quote/'
        lines = open('bashids.txt').read().splitlines()
        myline = random.choice(lines)
        site += ''.join(str(myline))
        l = requests.get(site)
        soup = BeautifulSoup(l.text, 'lxml')
        title = soup.find("meta",  property="og:description")
        de = str(title["content"] if title else "")
        numb = soup.find("meta",  property="og:title")
        det = str(numb["content"] if title else "")
        # if de != ("No meta title given"):
        dett = str(det.replace('Цитата ', ''))
        await ctx.channel.send(dett + '\n' + de)

@bot.command(pass_context=True)
async def frog(ctx):
    from datetime import datetime
    import random
    import glob
    author = ctx.message.author
    #frognd = 69
    frognd = random.randint(1, 100)
    if frognd == 2:
        await ctx.send("https://www.youtube.com/watch?v=B604tfczxUg")
    elif frognd == 69:
        await ctx.send("https://cdn.discordapp.com/attachments/907253387236605954/910200370582671400/video0_23-2.mp4")
    else:
        filename = random.choice(glob.glob("funnyfrogs/*"))
        f = discord.File(filename, filename=None, spoiler=False)
        await ctx.send(file=f)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' frog\n')

@bot.command(pass_context=True)
async def cat(ctx):
    from datetime import datetime
    import random
    import glob
    author = ctx.message.author
    filename = random.choice(glob.glob("catz/*"))
    link = str(filename)
    cut = str(link.replace('catz/', ''))
    f = discord.File(filename, filename=None, spoiler=False)
    await ctx.send(file=f)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' cat ' + cut + '\n')

@bot.command(pass_context=True)
async def pepe(ctx):
    from datetime import datetime
    import random
    import glob
    author = ctx.message.author
    filename = random.choice(glob.glob("pepe/*"))
    link = str(filename)
    cut = str(link.replace('pepe/', ''))
    f = discord.File(filename, filename=None, spoiler=False)
    await ctx.send(file=f)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' pepe ' + cut + '\n')

@bot.command()
async def scotland(ctx):
    from datetime import datetime
    author = ctx.message.author
    scurl = "https://www.youtube.com/watch?v=ktJpZbNB-OY"
    kr = await ctx.send(scurl)
    await kr.add_reaction("\U000026BD")
    await kr.add_reaction("\U0001F1F8")
    await kr.add_reaction("\U0001F1E8")
    await kr.add_reaction("\U0001F1F4")
    await kr.add_reaction("\U0001F1F9")
    await kr.add_reaction("<:scotland:825323954662539344>")
    await kr.add_reaction("\U0001F1F1")
    await kr.add_reaction("\U0001F1E6")
    await kr.add_reaction("\U0001F1F3")
    await kr.add_reaction("\U0001F1E9")
    await kr.add_reaction("\U0001F984")
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' scotland\n')

@bot.command(aliases=['og', 'oldgames'])
async def oldg(ctx):
    from datetime import datetime
    import random
    import requests
    from bs4 import BeautifulSoup as bs
    author = ctx.message.author
    
    host = 'https://old-games.ru/game/'
    for i in range(0, 20):
        rng = str(random.randint(0, 12000))
        # url = 'https://www.old-games.ru/game/10538.html'
        url = host + rng + '.html'
        l = requests.get(url)
        if l.status_code == 200:
            break
        elif l.status_code == 404:
            pass
    soup = bs(l.content.decode('utf-8'), 'lxml')
    title = soup.find('title').text[:-66]
    download = url.replace('game/', 'game/download/')
    info = soup.find('td', style="vertical-align: top;").find_all('tr')
    genre = info[0].find('a').text
    publisher = info[2].find('a').text
    devsf = ''
    devs = info[1].find_all('a')
    for item in devs:
        devsf = devsf + item.text + ', '
    screenlink = url.replace('game/', 'game/screenshots/')
    lang = soup.find('ul', class_='game-groups')
    lilang = lang.find_all('li')
    aes = lilang[len(lilang)-1].find_all('a')
    trans = ''
    for a in aes:
        trans = trans + a.text + ', '
    langlist =  {'Bahasa Indonesia':'индонезийский', 'Bahasa Melayu':'малайский',
                 'Català':'каталанский', 'Čeština':'чешский', 'Dansk':'датский',
                 'Deutsch':'немецкий', 'Dolnoserbski':'нижнелужицкий', 'Eesti':'эстонский',
                 'English':'английский', 'Español':'испанский', 'Français':'французский',
                 'Gaeilge':'ирландский гэльский', 'Hornjoserbsce':'верхнелужицкий',
                 'Hrvatski':'хорватский', 'Italiano':'итальянский', 'Latviešu':'латышский',
                 'Lietùvių':'литовский', 'Magyar':'венгерский', 'Nederlands':'нидерландский',
                 'Norsk':'норвежский', 'Oʻzbekcha':'Узбекский', 'Polski':'польский',
                 'Português':'португальский', 'Română':'румынский', 'Slovenčina':'словацкий',
                 'Slovenščina':'словенский', 'Suomi':'финский', 'Svenska':'шведский',
                 'Türkçe':'турецкий', 'Ελληνικά':'греческий', 'Български':'болгарский',
                 'Русский':'русский', 'Саха тыла':'якутский', 'Српски':'сербский',
                 'Українська':'украинский', 'עברית':'иврит', 'العربية':'арабский',
                 'فارسی':'фарси', 'ไทย':'тайский', '中文':'китайский', '日本語':'японский',
                 '한국어':'корейский'}
    for key in langlist.keys():
        trans = trans.replace(key, langlist[key])
    transf = trans[:-2].capitalize()
    rating = soup.find_all('td', style='vertical-align: bottom;')
    recen = rating[0].find_all('img')
    rec = recen[0].get('alt').split(' - ')
    users = recen[1].get('alt').split(' - ')
    screens = soup.find_all('a', class_='gamescreens')
    screenlist = []
    for screen in screens:
        screenlist.append(host[:-6] + screen.get('href'))
    genres_tr = {'Action':'Экшен', 'Adventure':'Приключения', 'Arcade':'Аркада',
                 'Educational':'Образовательная', 'Fighting':'Файтинг',
                 'Interactive Fiction':'Интерактивная история', 'Other':'Прочее',
                 'Puzzle':'Головоломка', 'Quest':'Квест', 'Racing':'Гонки',
                 'RPG':'Ролевая', 'Simulation':'Симулятор', 'Sports':'Спорт',
                 'Strategy':'Стратегия', 'Tabletop':'Настольная'}
    for key in genres_tr.keys():
        genre = genre.replace(key, genres_tr[key])
    embed = discord.Embed(title=title, url=url, color=0x2d58cb)
    embed.add_field(name='Жанр', value=genre, inline=True)
    embed.add_field(name='\u200b', value='\u200b', inline=True)
    embed.add_field(name='Язык', value=transf, inline=True)
    embed.add_field(name='Разработчик', value=devsf[:-2], inline=True)
    embed.add_field(name='\u200b', value='\u200b', inline=True)
    embed.add_field(name='Издатель', value=publisher, inline=True)
    embed.add_field(name=rec[0], value=rec[1], inline=True)
    embed.add_field(name='\u200b', value='\u200b', inline=True)
    embed.add_field(name=users[0], value=users[1], inline=True)
    embed.add_field(name='\u200b', value=f'[Скачать игру]({download})', inline=True)
    embed.add_field(name='\u200b', value='\u200b', inline=True)
    embed.add_field(name='\u200b', value=f'[Все скриншоты]({screenlink})', inline=True)
    if screenlist:
        embed.set_image(url=random.choice(screenlist))
    else:
        embed.set_image(url='https://cdn.discordapp.com/attachments/883101706756436008/897900086284156980/nocover-rus-0000_down2.jpg')
    await ctx.reply(embed=embed, mention_author=True)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' oldg ' + title + '\n')

@bot.command(aliases=['sg', 'smallgames'])
async def smallg(ctx):
    from datetime import datetime
    import random
    import requests
    from bs4 import BeautifulSoup
    author = ctx.message.author
    for i in range(0, 100):
        ssi = "https://small-games.info/?go=game&c="
        ra = random.randint(0, 99)
        gaid = random.randint(0, 29500)
        ssi += ''.join(str(ra))
        pa2 = "&i="
        tr = ssi + pa2
        fin = tr + str(gaid)
        # fin = "https://small-games.info/?go=game&c=15&i=2258"
        l = requests.get(fin)
        soup = BeautifulSoup(l.text, 'lxml')
        cols = str(soup.find('title'))
        cut1 = str(cols.replace('<title>', ''))
        def multiple_replace(target_str, replace_values):
            for i, j in replace_values.items():
                target_str = target_str.replace(i, j)
            return target_str
        cutstr = {' - скачать бесплатно полную версию</title>': '', ' - торрент, скачать бесплатно игру</title>': '', ' - скачать бесплатно игру</title>': '', ' - скачать бесплатно полную русскую версию</title>': '', ' - скачать бесплатно русскую версию</title>': ''}
        cut2 = multiple_replace(cut1, cutstr)
        if cols != "[<title>Error 4 :: small-games.info</title>]":
            await ctx.channel.send(cut2 + '\n' + fin)
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' smallg ' + str(gaid) + ' ' + cut2 + '\n')
            break

# КЛАУДФЛЕЙР НЕ ДАЁТ ПРОПАРСИТЬ ФИКБУК
'''@bot.command()
async def fic(ctx):
    from datetime import datetime
    import random
    import requests
    from bs4 import BeautifulSoup
    author = ctx.message.author
    for i in range(0,100):
        ssi = "https://ficbook.net/readfic/"
        val = str(random.randint(1, 11000000))
        ssi += ''.join(val)
        l = requests.get(ssi)
        soup = BeautifulSoup(l.text, 'lxml')
        cols = str(soup.findAll('title'))
        cut1 = str(cols.replace('[<title>', ''))
        cut2 = str(cut1.replace('</title>]', ''))
        if cols != "[<title>404 — Страница не найдена | Книга Фанфиков</title>]": # or cols != "[<title>Работа удалена</title>]":
            await ctx.channel.send(ssi)
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' fic ' + str(val) + ' ' + cut2 + '\n')
            break
'''

@bot.command()
async def rps(ctx, *, arg):
    from datetime import datetime
    import random
    import asyncio
    author = ctx.message.author
    figbot = [":fist: Камень!", ":v: Ножницы!", ":raised_hand: Бумага!"]
    botwin = ["Ахахахааааааа! Я умнее тебя!))))))", "я победил)", "Что и следовало ожидать собсна", "Удача явно не на твоей стороне"]
    botlose = ["Ладно, в следующий раз я точно отыграюсь", "Ля, ну ты фартовый", "Ну блен(9(99(9((", "ыаыаыыаыыаыы эх"]
    bottie = ["Ничья, го ещё раз", "оооо повезло повезло", "Гении думают одинаково, погнали ещё раз"]
    figrand = str(random.choice(figbot))
    d100 = random.randint(1, 100)
    # d100 = 1
    figcli = '{}'.format(arg)
    one = await ctx.reply("Раз,", mention_author=True)
    await asyncio.sleep(0.3)
    await one.edit(content="два,")
    await asyncio.sleep(0.3)
    await one.edit(content="три!")
    await asyncio.sleep(0.3)
    # await one.delete()
    if figcli == 'Камень' or figcli == 'камень' or figcli == 'Rock' or figcli == 'rock' or figcli == '\U0000270A' or figcli == '\U0001FAA8' or figcli == '\U0001F44A':
        elif figrand == ":fist: Камень!":
            await one.edit(content=figrand + "\n" + str(random.choice(bottie)))
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' rps ' + str('rock tie\n'))
        elif figrand == ":v: Ножницы!":
            await one.edit(content=figrand + "\n" + str(random.choice(botlose)))
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' rps ' + str('rock win\n'))
        elif figrand == ":raised_hand: Бумага!":
            await one.edit(content=figrand + "\n" + str(random.choice(botwin)))
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' rps ' + str('rock lose\n'))
    elif figcli == 'Ножницы' or figcli == 'ножницы' or figcli == 'Scissors' or figcli == 'scissors' or figcli == '\U0000270C\U0000FE0F' or figcli == '\U00002702\U0000FE0F':
        elif figrand == ":fist: Камень!":
            await one.edit(content=figrand + "\n" + str(random.choice(botwin)))
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' rps ' + str('scissors lose\n'))
        elif figrand == ":v: Ножницы!":
            await one.edit(content=figrand + "\n" + str(random.choice(bottie)))
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' rps ' + str('scissors tie\n'))
        elif figrand == ":raised_hand: Бумага!":
            await one.edit(content=figrand + "\n" + str(random.choice(botlose)))
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' rps ' + str('scissors win\n'))
    elif figcli == 'Бумага' or figcli == 'бумага' or figcli == 'Paper' or figcli == 'paper' or figcli == '\U0000270B' or figcli == '\U0001F590\U0000FE0F' or figcli == '\U0001F9FB':
        elif figrand == ":fist: Камень!":
            await one.edit(content=figrand + "\n" + str(random.choice(botlose)))
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' rps ' + str('paper win\n'))
        elif figrand == ":v: Ножницы!":
            await one.edit(content=figrand + "\n" + str(random.choice(botwin)))
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' rps ' + str('paper lose\n'))
        elif figrand == ":raised_hand: Бумага!":
            await one.edit(content=figrand + "\n" + str(random.choice(bottie)))
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' rps ' + str('paper tie\n'))
    elif figcli == 'help':
        await one.edit(content="а, тебе помощь нужна? тогда извиняюсь, зря считали.\nты можешь прописать название фигуры как на русском, так и на английском языке с большой или маленькой буквы. можно даже эмодзи прописать, если тебе так угодно.\nподдерживаемые эмодзи для фигур: :rock: :fist: :punch:            :scissors: :v:          :roll_of_paper: :raised_hand: :hand_splayed:")
    else:
        await one.edit(content="неее чел, так не сработает. пиши по-другому. приписка help тебе в помощь")
        # await ctx.send("неее чел, так не сработает. пиши по-другому")

@bot.command(aliases=['d'])
async def dice(ctx, message):
    from datetime import datetime
    import random
    author = ctx.message.author
    mult = 0
    multisalpha = False
    if 'd' in message:
        divide = message.split('d')
        mult = int(divide[0])
    if mult > 100:
        await ctx.reply('Самый умный тут чтоле?', mention_author=True)
    elif mult != 0:
        randvals = []
        dicesum = 0
        multstr = 'Выпавшее число на ' + str(mult)+' костях из '+str(divide[1])+' граней:\n:game_die:\t**'
        for i in range(0, int(mult)):
            r = random.randint(1, int(divide[1]))
            multstr = multstr + str(r) + '\t'
            dicesum += r
        await ctx.reply(multstr+'**\nСумма: '+str(dicesum), mention_author=True)
    elif len(message) > 15:
        await ctx.reply('MemoryError: stack overflow (status code: 0x00p0sh3lkch3rtu)', mention_author=True)
    elif "-" in message:
        await ctx.reply('ты алису в зазеркалье тут не устраивай, ок?', mention_author=True)
    elif message == '0':
        await ctx.reply('ты как кость без граней себе представляешь, умник?', mention_author=True)
    elif message == '1':
        await ctx.reply('Выпавшее число на кости из 1 грани:\n' + ':game_die: **1**\nА чего ты ещё ожидал?', mention_author=True)
    elif message.isdigit() == False:
        await ctx.reply('Или ты вписал чёт лишнее, или попытался зарандомить слово. Попробуй заново.', mention_author=True)
    else:
        diap = random.randint(1, int(message))
        await ctx.reply('Выпавшее число на кости из ' + str(message) + ' граней:\n' + ':game_die: **' + str(diap) + '**', mention_author=True)
        with open('log.txt', 'a') as file:
            file.write(str(datetime.now()) + ' ' + str(author) + ' dice to ' + str(message) + ', result: ' + str(diap) + '\n')

@bot.command()
async def report(ctx, *args):
    from datetime import datetime
    author = str(ctx.message.author)
    quote = ' '.join(args)
    quote_text = 'Репорт: \n{}'.format(quote)
    if len(quote_text) > 9:
        await ctx.reply('Репорт отправлен. Спасибо за помощь в разработке.', mention_author=True)
        tofile = str(quote_text.replace('Репорт: \n', ''))
        me = await bot.fetch_user(447258887666663425)
        await me.send('Репорт от ' + author + ': ' + tofile)
        with open('quotes.txt', 'a') as file:
            file.write(str(datetime.now()) + ' ' + author + ' ' + tofile + '\n')
    elif len(quote_text) == 9:
        await ctx.send("В сообщении с командой ты можешь описать проблему, с которой столкнулся во время испольования бота или оставить пожелание о том, что можно добавить или доработать в его функционале.\nРофлы и оффтопный бред сюда убедительная просьба не писать. Среди кучи спама не очень приятно искать адекватные отзывы.")

@bot.command()
async def archives(ctx):
    await ctx.send('https://disk.yandex.ru/d/sgN0vYbZHJnEIg')

# КОМИКСЫ
@bot.command()
async def ueb(ctx, message):
    from datetime import datetime
    import random
    import glob
    author = ctx.message.author
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' ueb ' + str(message) + '\n')
    if int(message) <= 6:
        b = random.choice(glob.glob("Бред/uebanskii/ueb" + str(message) + ".png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    elif int(message) > 6:
        await ctx.reply("этот комикс ещё не вышел", mention_author=False)

@bot.command(pass_context=True)
async def bred(ctx, message):
    from datetime import datetime
    import random
    import glob
    author = ctx.message.author
    strm = str(message)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' bred ' + strm + '\n')
    # yandev code be like
    if strm == "archive":
        b = random.choice(glob.glob("bred_complete_collection.rar"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "hvori":
        b = random.choice(glob.glob("Бред/1e59ee431093bb2b.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "16a1":
        b = random.choice(glob.glob("Бред/бред16альтофф.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "16a2":
        b = random.choice(glob.glob("Бред/бред16альторех.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "16a3":
        b = random.choice(glob.glob("Бред/бред16альтрасти.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "iceberg":
        b = random.choice(glob.glob("Бред/iceberg/cfab733326b7df15.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "bonus1":
        b = random.choice(glob.glob("Бред/bonusbred_1.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "bonus2":
        b = random.choice(glob.glob("Бред/bonusbred_2.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "bonus3":
        b = random.choice(glob.glob("Бред/bonusbred_3.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "bonus4":
        b = random.choice(glob.glob("Бред/bonusbred_4.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "bonus5":
        b = random.choice(glob.glob("Бред/bonusbred_5.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "17alt":
        b = random.choice(glob.glob("Бред/17_alt.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "random":
        b = random.choice(glob.glob("Бред/*"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "help":
        await ctx.reply('0-34 - все вышедшие на данный момент каноничные части (нулевая - пилот)\nhvori - шоукейс персонажей с их именами и особенностями\n16a1-16a3 - версии 16 бреда с альтернативными концовками\nbonus1-bonus5 - бонусные комиксы, вышедшие вместе с 29 частью\niceberg - айсберг по бреду\nrandom - случайный комикс из серии\narchive - все комиксы в одном архиве', mention_author=False)
    if int(message) <= 34:
        b = random.choice(glob.glob("Бред/" + str(message) + ".png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if int(message) > 34:
        await ctx.reply("этот бред ещё не вышел", mention_author=False)

@bot.command()
async def flord(ctx, message):
    from datetime import datetime
    import random
    import glob
    author = ctx.message.author
    strm = str(message)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' flord ' + str(message) + '\n')
    if strm == "fan1":
        b = random.choice(glob.glob("Бред/flord/flordfan1.png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "random":
        b = random.choice(glob.glob("Бред/flord/*"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if strm == "help":
        await ctx.reply('1-27 - все вышедшие на данный момент части\nfan1 - фан-комикс от расти', mention_author=False)
    if "-" in message:
        await ctx.reply('ты серьёзно?', mention_author=True)
    if message == '0':
        await ctx.reply('програмистом себя возомнил? с единицы начинай.', mention_author=True)
    if int(message) <= 27:
        b = random.choice(glob.glob("Бред/flord/flord" + str(message) + ".png"))
        f = discord.File(b, filename=None, spoiler=False)
        await ctx.reply(file=f, mention_author=False)
    if int(message) > 27:
        await ctx.reply("комикса с таким номером пока нет. жди.", mention_author=False)

@bot.command(aliases=['repeat'])
async def say(ctx, *, arg):
    from datetime import datetime
    author = ctx.message.author
    say = '{}'.format(arg)
    message = ctx.message
    await message.delete()
    await ctx.send(say)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' say ' + say + '\n')

# спасибо Gpalm за помощь с кодом
@bot.command(aliases=['fangame', 'fg'])
async def fruit(ctx, *args):
    from datetime import datetime
    import re
    import requests
    from bs4 import BeautifulSoup as bs
    author = ctx.message.author
    input = ' '.join(args)
    inp = '#{}'.format(input)
    if len(inp) > 1:
        if inp == '#help':
            await ctx.reply('Наверняка многие из вас знают про великую и ужасную I Wanna be the Boshy, но далеко не все в курсе, что эта игра - вторичный по идее продукт. Она является фан-игрой по I Wanna be the Guy, вышедшей за три года до боши, в 2007 году. Эти две игры имели общие фишки: тысячу и один способ подловить игрока, неоправданно высокую сложность и целую тучу боссов. Ну так вот, на боши всё не остановилось. Комьюнити люто воодушевилось первоисточником и начало пилить свои i wanna-игры с блекджеком и шипами, разного уровня качества и изощрённости. Пусть об этом комьюнити вы могли и не слышать, но оно очень даже живо и активно даже спустя столько лет. Настолько живо, что на данный момент выложено больше 10 ТЫСЯЧ фангеймов. Только вдумайтесь. Все работы участников комьюнити выкладываются на сайт delicious-fruit, на котором и основана эта команда.\nСкажу сразу: использовать эту команду исключительно для знакомства с фангеймами крайне не рекомендуется. Рандом - штука такая, что сходу может выдать непроходимый ужас, который полностью испортит представление об этом, без преувеличения, поджанре игр, а оно вам надо? Чтобы ознакомиться с желательным для новичков списком игр, можете пройти сюда: <https://cwpat.me/beginner-fangames/>\nЕсли вам выпала игра, у которой удалена ссылка на скачивание, вы можете её поискать в архиве фангеймов. Он находится здесь: https://archive.dappermink.com/search', mention_author=False)
            with open('log.txt', 'a') as file:
                file.write(str(datetime.now()) + ' ' + str(author) + ' fruit help\n')
        elif "tag:" in inp:
            tags = re.findall( r'tag:(.*?);', inp)
            #https://delicious-fruit.com/ratings/full.php?tags=kamilia&advanced=1
            url = 'https://delicious-fruit.com/ratings/full.php?tags='
            for tag in red:
                url += tags + '+'
            url = url[:-1] + '&advanced=1'
            await ctx.send(url)
        else:
            inp = inp[1:]
            wanna = 'wanna'
            bethe = 'be the'
            if bethe in inp.lower() or wanna in inp.lower():
                for char in inp.split():
                    if char == wanna or bethe in inp:
                        await ctx.reply('Давай договоримся: вводи название нужного тебе фангейма без вот этих вот "i wanna be the", так как они и так есть у каждого фангейма. Пиши коротко и по делу', mention_author=True)
                        break
            elif len(inp) < 4:
                await ctx.reply('Слишком короткий запрос. Вводи подробнее.', mention_author=True)
            else:
                host = 'https://delicious-fruit.com'
                url = 'https://delicious-fruit.com/ratings/full.php?s=' + inp.replace(' ', '+')
                req = requests.get(url)
                soup = bs(req.content.decode('utf-8'), 'lxml')
                dump = soup.find('tbody')
                if not dump:
                    await ctx.reply('По твоему запросу ничего не найдено. Подумой и повтори.', mention_author=True)
                else:
                    names = dump.find_all('a')
                    kol = str(len(names))
                    if len(names) > 20:
                        names = names[:20]
                    result = ''
                    i = 0
                    for name in names:
                        fullurl = host + name.get('href')
                        result = result + '[' + name.text + '](' + fullurl + ')\n'
                        i = i + 1
                    await ctx.reply(embed=discord.Embed(title='Результатов поиска: ' + kol + ' (отображено ' + str(len(names)) + ')',
                                    description=result, color=0xff5b5b), mention_author=True)
    elif len(inp) == 1:
        site = 'https://delicious-fruit.com/ratings/game_details.php?random=1'
        # site = 'https://delicious-fruit.com/ratings/game_details.php?id=21809'
        l = requests.get(site)
        soup = bs(l.content, "lxml")

        title = soup.find("meta",  property="og:title")
        ee = str(title["content"] if title else "No meta title given")

        # creator = soup.find("h2", {"id": "creator-label"})
        # ce = creator.text.lstrip().replace('Creator','Автор').replace('s:','ы:') + '\n'

        au = soup.find('h2', id='creator-label')
        ce = ''
        authors = au.find_all('a')
        if len(authors) > 1:
            auth_str = 'Авторы'
        else:
            auth_str = 'Автор'
        for i in authors:
            ce = ce + i.text + ', '

        url = soup.find("meta",  property="og:url")
        de = str(url["content"] if url else "No meta title given")

        rating = soup.find("span", {"id": "avgRating"})
        sed = (rating.text + '\n').replace(' / ', '/')

        diff = soup.find("span", {"id": "avgDifficulty"})
        ted = (diff.text + '\n').replace(' / ', '/')

        links = soup.find('a', class_='standalone').get('href')

        rew = str(soup.find('h2', text=re.compile('Reviews:'))).replace('<h2 style="clear:both;">', '').replace('Reviews:</h2>', '').replace('<h2>', '')
        '''if rew == 'None':
            rew = soup.find('h2', text=re.compile('Review:'))
            rew = rew.text.replace('Review:', 'оценка')

        if '11 ' in rew or '12 ' in rew or '13 ' in rew or '14 ' in rew:
            rew = rew + 'оценок'
        elif '3 ' in rew or '2 ' in rew or '4 ' in rew:
            rew = rew + 'оценки'
        elif '1 ' in rew:
            rew = rew + 'оценка'
        else:
            rew = rew + 'оценок'''

        tag = soup.findAll('a', text=re.compile(' \('))
        tagd = 'Теги: '
        for item in tag:
            tagd = tagd + item.text + ', '
        if tagd == "Теги: ":
            tagd = "Тегов нет!!"

        pic = requests.get(de)
        ssoup = bs(pic.content.decode('utf-8'), 'lxml')
        image = ssoup.find_all(class_=re.compile("pi"))
        image_url = []
        image_url.append('title')
        for link in image:
            link = link.find('img').get('src')
            image_url.append('link')
        if link != '':
            imgg = ('https://delicious-fruit.com' + link + ".png")
        else:
            imgg = ('https://cdn.discordapp.com/attachments/812444600765513758/874161401193705482/placeholder.png')

        embed = discord.Embed(title=ee, url=de, color=0xff5b5b)
        embed.add_field(name=auth_str, value=ce[:-2], inline=False)
        embed.add_field(name='Качество', value=sed, inline=True)
        embed.add_field(name='Сложность', value=ted, inline=True)
        embed.add_field(name='Кол-во оценок', value=rew, inline=True)
        embed.add_field(name='Теги', value=tagd[:-2].replace('Теги: ', ''), inline=False)
        if links:
            embed.add_field(name='Ссылка на скачивание', value=f'[*тык*]({links})', inline=False)
        else:
            embed.add_field(name='Ссылка на скачивание', value='[Скачивание недоступно]', inline=False)
        embed.set_image(url = imgg)
        await ctx.reply(embed=embed, mention_author = True)
        # await ctx.reply(ee + '\n' + ce + sed + ted + rew + '\n' + tagd[:-2] + '\n' + de, mention_author = False)
        with open('log.txt', 'a') as file:
            file.write(str(datetime.now()) + ' ' + str(author) + ' fruit ' + ee + '\n')

@bot.command()
async def lemur(ctx, *, arg):
    input = '{}'.format(arg)
    def multiple_replace(target_str, replace_values):
        for i, j in replace_values.items():
            target_str = target_str.replace(i, j)
        return target_str
    rep = {"п":"б", "П":"Б", "к":"г", "К":"Г", "т":"д", "Т":"Д", "с":"з", "С":"З", "ф":"в", "Ф":"В", "ш":"ж", "Ш":"Ж", "p":"b",
           "P":"B", "t":"d", "T":"D", "f":"v", "F":"V", "k":"g", "K":"G", "s":"z", "S":"Z", "c":"g", "C":"G"}
    obsh = multiple_replace(input, rep)
    await ctx.reply(obsh, mention_author=True)

@bot.command()
async def les(ctx, *, arg):
    inp = '{}'.format(arg)
    res = ""
    n = 0
    prep = "ёЁйцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮqwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM"
    for i in inp:
        if i in prep:
            if(n % 2 == 0):
                res += i.lower()
            else:
                res += i.upper()
            n += 1
        else:
            res += i
    await ctx.reply(res, mention_author=True)

@bot.command()
async def flag(ctx, *, arg):
    input = '{}'.format(arg)
    def multiple_replace(target_str, replace_values):
        for i, j in replace_values.items():
            target_str = target_str.replace(i, j)
        return target_str
    inp_low = input.lower()
    rep1 = {'af':'\U0001F1E6\U0001F1EB', 'ax':'\U0001F1E6\U0001F1FD', 'al':'\U0001F1E6\U0001F1F1', 'dz':'\U0001F1E9\U0001F1FF', 'as':'\U0001F1E6\U0001F1F8', 'ad':'\U0001F1E6\U0001F1E9', 'ao':'\U0001F1E6\U0001F1F4', 'ai':'\U0001F1E6\U0001F1EE', 'aq':'\U0001F1E6\U0001F1F6', 'ag':'\U0001F1E6\U0001F1EC', 'ar':'\U0001F1E6\U0001F1F7', 'am':'\U0001F1E6\U0001F1F2', 'aw':'\U0001F1E6\U0001F1FC', 'au':'\U0001F1E6\U0001F1FA', 'at':'\U0001F1E6\U0001F1F9', 'az':'\U0001F1E6\U0001F1FF',
            'bs':'\U0001F1E7\U0001F1F8', 'bh':'\U0001F1E7\U0001F1ED', 'bd':'\U0001F1E7\U0001F1E9', 'bb':'\U0001F1E7\U0001F1E7', 'by':'\U0001F1E7\U0001F1FE', 'be':'\U0001F1E7\U0001F1EA', 'bz':'\U0001F1E7\U0001F1FF', 'bj':'\U0001F1E7\U0001F1EF', 'bm':'\U0001F1E7\U0001F1F2', 'bt':'\U0001F1E7\U0001F1F9', 'bo':'\U0001F1E7\U0001F1F4', 'ba':'\U0001F1E7\U0001F1E6', 'bw':'\U0001F1E7\U0001F1FC', 'br':'\U0001F1E7\U0001F1F7', 'io':'\U0001F1EE\U0001F1F4', 'vg':'\U0001F1FB\U0001F1EC', 'bn':'\U0001F1E7\U0001F1F3', 'bg':'\U0001F1E7\U0001F1EC', 'bf':'\U0001F1E7\U0001F1EB', 'bi':'\U0001F1E7\U0001F1EE', 'kh':'\U0001F1F0\U0001F1ED',
            'cm':'\U0001F1E8\U0001F1F2', 'ca':'\U0001F1E8\U0001F1E6', 'ic':'\U0001F1EE\U0001F1E8', 'cv':'\U0001F1E8\U0001F1FB', 'bq':'\U0001F1E7\U0001F1F6', 'ky':'\U0001F1F0\U0001F1FE', 'cf':'\U0001F1E8\U0001F1EB', 'td':'\U0001F1E8\U0001F1E9', 'cl':'\U0001F1E8\U0001F1F1', 'cn':'\U0001F1E8\U0001F1F3', 'cx':'\U0001F1E8\U0001F1FD', 'cc':'\U0001F1E8\U0001F1E8', 'co':'\U0001F1E8\U0001F1F4', 'km':'\U0001F1F0\U0001F1F2', 'cg':'\U0001F1E8\U0001F1EC', 'cd':'\U0001F1E8\U0001F1E9', 'ck':'\U0001F1E8\U0001F1F0', 'cr':'\U0001F1E8\U0001F1F7', 'ci':'\U0001F1E8\U0001F1EE', 'hr':'\U0001F1ED\U0001F1F7', 'cu':'\U0001F1E8\U0001F1FA', 'cw':'\U0001F1E8\U0001F1FC', 'cy':'\U0001F1E8\U0001F1FE', 'cz':'\U0001F1E8\U0001F1FF',
            'dk':'\U0001F1E9\U0001F1F0', 'dj':'\U0001F1E9\U0001F1EF', 'dm':'\U0001F1E9\U0001F1F2', 'do':'\U0001F1E9\U0001F1F4',
            'ec':'\U0001F1EA\U0001F1E8', 'eg':'\U0001F1EA\U0001F1EC', 'sv':'\U0001F1F8\U0001F1FB', 'gq':'\U0001F1EC\U0001F1F6', 'er':'\U0001F1EA\U0001F1F7', 'ee':'\U0001F1EA\U0001F1EA', 'et':'\U0001F1EA\U0001F1F9', 'eu':'\U0001F1EA\U0001F1FA',
            'fk':'\U0001F1EB\U0001F1F0', 'fo':'\U0001F1EB\U0001F1F4', 'fj':'\U0001F1EB\U0001F1EF', 'fi':'\U0001F1EB\U0001F1EE', 'fr':'\U0001F1EB\U0001F1F7',
            'gf':'\U0001F1EC\U0001F1EB', 'pf':'\U0001F1F5\U0001F1EB', 'tf':'\U0001F1F9\U0001F1EB', 'ga':'\U0001F1EC\U0001F1E6', 'gm':'\U0001F1EC\U0001F1F2', 'ge':'\U0001F1EC\U0001F1EA', 'de':'\U0001F1E9\U0001F1EA', 'gh':'\U0001F1EC\U0001F1ED', 'gi':'\U0001F1EC\U0001F1EE', 'gr':'\U0001F1EC\U0001F1F7', 'gl':'\U0001F1EC\U0001F1F1', 'gd':'\U0001F1EC\U0001F1E9', 'gp':'\U0001F1EC\U0001F1F5', 'gu':'\U0001F1EC\U0001F1FA', 'gt':'\U0001F1EC\U0001F1F9', 'gg':'\U0001F1EC\U0001F1EC', 'gn':'\U0001F1EC\U0001F1F3', 'gw':'\U0001F1EC\U0001F1FC', 'gy':'\U0001F1EC\U0001F1FE',
            'ht':'\U0001F1ED\U0001F1F9', 'hn':'\U0001F1ED\U0001F1F3', 'hk':'\U0001F1ED\U0001F1F0', 'hu':'\U0001F1ED\U0001F1FA',
            'is':'\U0001F1EE\U0001F1F8', 'in':'\U0001F1EE\U0001F1F3', 'id':'\U0001F1EE\U0001F1E9', 'ir':'\U0001F1EE\U0001F1F7', 'iq':'\U0001F1EE\U0001F1F6', 'ie':'\U0001F1EE\U0001F1E9', 'im':'\U0001F1EE\U0001F1F2', 'il':'\U0001F1EE\U0001F1F1', 'it':'\U0001F1EE\U0001F1F9',
            'jm':'\U0001F1EF\U0001F1F8', 'jp':'\U0001F1EF\U0001F1F5', 'je':'\U0001F1EF\U0001F1EA', 'jo':'\U0001F1EF\U0001F1F4',
            'kz':'\U0001F1F0\U0001F1FF', 'ke':'\U0001F1F0\U0001F1EA', 'ki':'\U0001F1F0\U0001F1EE', 'xk':'\U0001F1FD\U0001F1F0', 'kw':'\U0001F1F0\U0001F1FC', 'kg':'\U0001F1F0\U0001F1EC',
            'la':'\U0001F1F1\U0001F1E6', 'lv':'\U0001F1F1\U0001F1FB', 'lb':'\U0001F1F1\U0001F1E7', 'ls':'\U0001F1F1\U0001F1F8', 'lr':'\U0001F1F1\U0001F1F7', 'ly':'\U0001F1F1\U0001F1FE', 'li':'\U0001F1F1\U0001F1EE', 'lt':'\U0001F1F1\U0001F1F9', 'lu':'\U0001F1F1\U0001F1FA',
            'mo':'\U0001F1F2\U0001F1F4', 'mk':'\U0001F1F2\U0001F1F0', 'mg':'\U0001F1F2\U0001F1EC', 'mw':'\U0001F1F2\U0001F1FC', 'my':'\U0001F1F2\U0001F1FE', 'mv':'\U0001F1F2\U0001F1FB', 'ml':'\U0001F1F2\U0001F1F1', 'mt':'\U0001F1F2\U0001F1F9', 'mh':'\U0001F1F2\U0001F1ED', 'mq':'\U0001F1F2\U0001F1F6', 'mr':'\U0001F1F2\U0001F1F7', 'mu':'\U0001F1F2\U0001F1FA', 'yt':'\U0001F1FE\U0001F1F9', 'mx':'\U0001F1F2\U0001F1FD', 'fm':'\U0001F1EB\U0001F1F2', 'md':'\U0001F1F2\U0001F1E9', 'mc':'\U0001F1F2\U0001F1E8', 'mn':'\U0001F1F2\U0001F1F3', 'me':'\U0001F1F2\U0001F1EA', 'ms':'\U0001F1F2\U0001F1F8', 'ma':'\U0001F1F2\U0001F1E6', 'mz':'\U0001F1F2\U0001F1FF', 'mm':'\U0001F1F2\U0001F1F2',
            'na':'\U0001F1F3\U0001F1E6', 'nr':'\U0001F1F3\U0001F1F7', 'np':'\U0001F1F3\U0001F1F5', 'nl':'\U0001F1F3\U0001F1F1', 'nc':'\U0001F1F3\U0001F1E8', 'nz':'\U0001F1F3\U0001F1FF', 'ni':'\U0001F1F3\U0001F1EE', 'ne':'\U0001F1F3\U0001F1EA', 'ng':'\U0001F1F3\U0001F1EC', 'nu':'\U0001F1F3\U0001F1FA', 'nf':'\U0001F1F3\U0001F1EB', 'kp':'\U0001F1F0\U0001F1F5', 'mp':'\U0001F1F2\U0001F1F5', 'no':'\U0001F1F3\U0001F1F4',
            'om':'\U0001F1F4\U0001F1F2',
            'pk':'\U0001F1F5\U0001F1F0', 'pw':'\U0001F1F5\U0001F1FC', 'ps':'\U0001F1F5\U0001F1F8', 'pa':'\U0001F1F5\U0001F1E6', 'pg':'\U0001F1F5\U0001F1EC', 'py':'\U0001F1F5\U0001F1FE', 'pe':'\U0001F1F5\U0001F1EA', 'ph':'\U0001F1F5\U0001F1ED', 'pn':'\U0001F1F5\U0001F1F3', 'pl':'\U0001F1F5\U0001F1F1', 'pt':'\U0001F1F5\U0001F1F9', 'pr':'\U0001F1F5\U0001F1F7',
            'qa':'\U0001F1F6\U0001F1E6',
            're':'\U0001F1F7\U0001F1EA', 'ro':'\U0001F1F7\U0001F1F4', 'ru':'\U0001F1F7\U0001F1FA', 'rw':'\U0001F1F7\U0001F1FC', 'ws':'\U0001F1FC\U0001F1F8',
            'sm':'\U0001F1F8\U0001F1F2', 'st':'\U0001F1F8\U0001F1F9', 'sa':'\U0001F1F8\U0001F1E6', 'sn':'\U0001F1F8\U0001F1F3', 'rs':'\U0001F1F7\U0001F1F8', 'sc':'\U0001F1F8\U0001F1E8', 'sl':'\U0001F1F8\U0001F1F1', 'sg':'\U0001F1F8\U0001F1EC', 'sx':'\U0001F1F8\U0001F1FD', 'sk':'\U0001F1F8\U0001F1F0', 'si':'\U0001F1F8\U0001F1EE', 'gs':'\U0001F1EC\U0001F1F8', 'sb':'\U0001F1F8\U0001F1E7', 'so':'\U0001F1F8\U0001F1F4', 'za':'\U0001F1FF\U0001F1E6', 'kr':'\U0001F1F0\U0001F1F7', 'ss':'\U0001F1F8\U0001F1F8', 'es':'\U0001F1EA\U0001F1F8', 'lk':'\U0001F1F1\U0001F1F0', 'bl':'\U0001F1E7\U0001F1F1', 'sh':'\U0001F1F8\U0001F1ED', 'kn':'\U0001F1F0\U0001F1F3', 'lc':'\U0001F1F1\U0001F1E8', 'pm':'\U0001F1F5\U0001F1F2', 'vc':'\U0001F1FB\U0001F1E8', 'sd':'\U0001F1F8\U0001F1E9', 'sr':'\U0001F1F8\U0001F1F7', 'sz':'\U0001F1F8\U0001F1FF', 'se':'\U0001F1F8\U0001F1EA', 'ch':'\U0001F1E8\U0001F1ED', 'sy':'\U0001F1F8\U0001F1FE',
            'tw':'\U0001F1F9\U0001F1FC', 'tj':'\U0001F1F9\U0001F1EF', 'tz':'\U0001F1F9\U0001F1FF', 'th':'\U0001F1F9\U0001F1ED', 'tl':'\U0001F1F9\U0001F1F1', 'tg':'\U0001F1F9\U0001F1EC', 'tk':'\U0001F1F9\U0001F1F0', 'to':'\U0001F1F9\U0001F1F4', 'tt':'\U0001F1F9\U0001F1F9', 'tn':'\U0001F1F9\U0001F1F3', 'tr':'\U0001F1F9\U0001F1F7', 'tm':'\U0001F1F9\U0001F1F2', 'tc':'\U0001F1F9\U0001F1E8', 'vi':'\U0001F1FB\U0001F1EE', 'tv':'\U0001F1F9\U0001F1FB',
            'ug':'\U0001F1FA\U0001F1EC', 'ua':'\U0001F1FA\U0001F1E6', 'ae':'\U0001F1E6\U0001F1EA', 'gb':'\U0001F1EC\U0001F1E7', 'us':'\U0001F1FA\U0001F1F8', 'uy':'\U0001F1FA\U0001F1FE', 'uz':'\U0001F1FA\U0001F1FF',
            'vu':'\U0001F1FB\U0001F1FA', 'va':'\U0001F1FB\U0001F1E6', 've':'\U0001F1FB\U0001F1EA', 'vn':'\U0001F1FB\U0001F1F3',
            'wf':'\U0001F1FC\U0001F1EB', 'eh':'\U0001F1EA\U0001F1ED', 'ye':'\U0001F1FE\U0001F1EA', 'zm':'\U0001F1FF\U0001F1F2', 'zw':'\U0001F1FF\U0001F1FC', 'ac':'\U0001F1E6\U0001F1E8', 'bv':'\U0001F1E7\U0001F1FB', 'cp':'\U0001F1E8\U0001F1F5', 'ea':'\U0001F1EA\U0001F1E6', 'dg':'\U0001F1E9\U0001F1EC', 'hm':'\U0001F1ED\U0001F1F2', 'mf':'\U0001F1F2\U0001F1EB', 'sj':'\U0001F1F8\U0001F1EF', 'ta':'\U0001F1F9\U0001F1E6', 'um':'\U0001F1FA\U0001F1F2'}
            # rep2 = {'a':'\U0001F1E6 ','b':'\U0001F1E7 ','c':'\U0001F1E8 ','d':'\U0001F1E9 ','e':'\U0001F1EA ','f':'\U0001F1EB ','g':'\U0001F1EC ','h':'\U0001F1ED ','i':'\U0001F1EE ','j':'\U0001F1EF ','k':'\U0001F1F0 ','l':'\U0001F1F1 ','m':'\U0001F1F2 ','n':'\U0001F1F3 ','o':'\U0001F1F4 ','p':'\U0001F1F5 ','q':'\U0001F1F6 ','r':'\U0001F1F7 ','s':'\U0001F1F8 ','t':'\U0001F1F9 ','u':'\U0001F1FA ','v':'\U0001F1FB ','w':'\U0001F1FC ','x':'\U0001F1FD ','y':'\U0001F1FE ','z':'\U0001F1FF '}
    iter = multiple_replace(inp_low, rep1)
    # obsh = multiple_replace(iter, rep2)
    await ctx.reply(iter + '_ _', mention_author=True)

@bot.command(aliases=["1337"])
async def l33t(ctx, *, arg):
    input = '{}'.format(arg)
    def multiple_replace(target_str, replace_values):
        for i, j in replace_values.items():
            target_str = target_str.replace(i, j)
        return target_str
    inp_low = input.lower()
    rep = {'a':'4', 'e':'3', 'i':'1', 'o':'0', 'u':'v', 'A':'4', 'E':'3', 'I':'1', 'O':'0', 'U':'V'}
    obsh = multiple_replace(inp_low, rep)
    await ctx.reply(obsh, mention_author=True)

@bot.command(aliases=['good', 'goode'])
async def harosh(ctx):
    import random
    message = ctx.message
    #await message.delete()
    gifs = ['https://tenor.com/btTGS.gif', 'https://tenor.com/bChYx.gif', 'https://tenor.com/bFKuf.gif', 'https://tenor.com/bxDqx.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/875734953000841246/myod.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/875735512558751775/kharosh1.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/876514921825837096/ezgif-4-4401540c0e.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/878348872274051112/Shirayo-kharosh.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/878576395930972160/woods_kharosh.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/879775724653936710/ezgif_com-gif-maker-3.gif', 'https://tenor.com/view/useless-mouth-disappear-%D1%8E%D0%B7%D1%8F-gif-21282558', 'https://cdn.discordapp.com/attachments/806477880305254413/880027396835799050/12313.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880029632085250068/ochen_ponravilos.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880029652981252116/tenor_4.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880056640886427718/kharosh_gif.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880056654895382578/neplokh.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880056669210542090/Kharosh_Shorakh.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880056670036828160/Kharosh2.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/878357269664907315/kharosh_nifedov.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/948284084294135828/okhuennaya_tema.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/948284086567444560/kharosh3.gif', 'https://cdn.discordapp.com/attachments/692430796031655988/951088091861512252/ezgif.com-gif-maker.gif']
    strs = ['{}'.format(ctx.message.author.mention) + ' одобряет', '{}'.format(ctx.message.author.mention) + ' выражает респект', 'пиздато. по крайней мере, для ' + '{}'.format(ctx.message.author.mention) + ' точно', '{}'.format(ctx.message.author.mention) + ' лайк зис']
    embed = discord.Embed(description=random.choice(strs))
    embed.set_image(url=random.choice(gifs))
    await ctx.send(random.choice(gifs))

@bot.command(aliases=['bad', 'nasral'])
async def ploh(ctx):
    import random
    message = ctx.message
    #await message.delete()
    gifs = ['https://tenor.com/bzw51.gif', 'https://tenor.com/bGVhT.gif', 'https://tenor.com/bxEAU.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/875735518460125224/you_just_posted_cringe.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/875734913431785493/20210102_120156.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/876514848224194630/b694d7741b22ef41346051552194d1ac.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/877643677240029224/Nopers.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/878348887365124106/grustnytomasshelbi.gif',  'https://cdn.discordapp.com/attachments/875721175643340860/879775742802677850/woods_plokh.gif', 'https://tenor.com/view/uselessmouth-%D1%8E%D0%B7%D1%8F-gif-21091770', 'https://cdn.discordapp.com/attachments/806477880305254413/880027693029142578/cringe.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880029651299340308/poshyol_nakhuy.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/889247201149214780/eto_pizdets_blya.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/948284083467866122/1643614983241.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/948284085099458640/nadristal-yakuza.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/948284087230165102/kotenok_yyaauauauae.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/976957339980660747/nas_rano.gif',]
    await ctx.send(random.choice(gifs))

@bot.command(aliases=['dance'])
async def bop(ctx):
    import random
    message = ctx.message
    #await message.delete()
    gifs = ['https://tenor.com/view/morgenshtern-slava-marlow-%D0%BC%D0%BE%D1%80%D0%B3%D0%B5%D0%BD%D1%88%D1%82%D0%B5%D1%80%D0%BD-%D1%81%D0%BB%D0%B0%D0%B2%D0%B0-%D1%81%D0%BB%D0%B0%D0%B2%D0%B0%D0%BC%D0%B5%D1%80%D0%BB%D0%BE%D1%83-gif-19407396', 'https://tenor.com/view/flex-dance-dancing-dances-party-gif-14012855', 'https://tenor.com/view/crab-safe-dance-gif-13211112', 'https://tenor.com/view/frog-dance-dancing-frog-gif-15428202', 'https://tenor.com/view/h%C3%A2m-frog-toad-frog-l%E1%BA%AFc-wiggle-gif-14557565', 'https://tenor.com/view/dancing-dance-moves-grooves-lizard-gif-17757353', 'https://media.discordapp.net/attachments/743186929926930585/802309090008498176/bkj.gif', 'https://tenor.com/view/earthbound-gif-9657779', 'https://tenor.com/view/katana-zero-dance-game-gif-14777010', 'https://tenor.com/view/fat-guy-dance-gif-8760651', 'https://tenor.com/view/w2d-widdly2diddly-party-hardy-lisa-the-painful-rpg-gif-19962510', 'https://tenor.com/view/gachi-gachimuchi-karate-gif-13510787', 'https://media.discordapp.net/attachments/868073702779129856/868156216889720882/gamaz-loop.gif', 'https://media.discordapp.net/attachments/692430796031655988/810585432886083614/Improve_b176e9_5521872.gif', 'https://tenor.com/view/turn-up-the-volume-turn-up-the-music-gif-20340548', 'https://tenor.com/view/puffer-fish-fish-bounce-tap-gif-17107260', 'https://tenor.com/view/cat-meme-caramella-fight-dance-gif-18767519', 'https://tenor.com/view/hot-line-miami-dance-dance-craze-crazy-wiggle-gif-8299617', 'https://tenor.com/view/spiritus-shrimp-shrimp-rave-beer-seafood-gif-21993919', 'https://cdn.discordapp.com/attachments/875721175643340860/875734928413851728/e322dc5.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/875734940313088030/el-sonidito-miami.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/875735133892771900/Fresko_dancing_1.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/875735154914652210/retardbot_319959431_1593497902.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/875735376218718248/1589732957222.gif', 'https://tenor.com/view/ozon-ozondance-ozonflex-ozon671-ozon671games-gif-24312830', 'https://cdn.discordapp.com/attachments/875721175643340860/876515101044273162/sanya_shpigun_bass.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/876515065556238396/prorok_sanboy.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/876514905191223346/ezgif_com-video-to-gif_1.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/876514873637498981/dobro_ebashit_diko.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/876519187961491486/Untitled_8.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/876519116536688680/aaa2.gif', 'https://tenor.com/view/%D0%BF%D0%B0%D0%BF%D0%B8%D1%87-gif-22047696','https://cdn.discordapp.com/attachments/806477880305254413/878576982764441640/Na_igle.gif', 'https://cdn.discordapp.com/attachments/875721175643340860/879775613236437022/khach-skin_fhNlkG5F_Fd1S.gif', 'https://tenor.com/view/%D1%8E%D0%B7%D1%8F-%D1%8E%D0%B7%D1%8Fuselessmouth-uselessmouth-fapah-gif-22249422', 'https://tenor.com/view/uselessmouth-%D1%8E%D0%BB%D1%8F-%D1%8E%D0%B7%D1%8F-gif-20438542', 'https://tenor.com/view/e3-crazy-crazy-dance-crazy-person-%D1%8E%D0%B7%D1%8F-gif-14307212', 'https://tenor.com/view/forsen-discosnake-forsen-bttv-dance-meme-gif-15992409', 'https://cdn.discordapp.com/attachments/806477880305254413/880027423624822824/20200826_221934.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880027814429093898/Cucaracha.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880027981140082688/giphy.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880028002954670090/ebashit_2.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880028335181287434/Ian_Kevin_Curtis.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880056673551675432/PUDGE_DANCE.gif', 'https://tenor.com/bqWmI.gif', 'https://c.tenor.com/9xx5jJaHPpIAAAAd/fat-guy.gif', 'https://cdn.discordapp.com/attachments/743186929926930585/942039139895881789/Untitled.gif', 'https://cdn.discordapp.com/attachments/743186929926930585/942039998604140554/13ad74d1182df9d4.gif', 'https://cdn.discordapp.com/attachments/743186929926930585/942039139895881789/Untitled.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/948284086210936853/tidzhoy.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/948284088123531284/file1.gif', 'https://tenor.com/view/neonomi-gif-24971898', 'https://tenor.com/view/christian-bale-american-psycho-walk-jam-gif-16732505', 'https://tenor.com/view/parrot-party-gif-22113017', 'https://tenor.com/view/mosh-pit-audience-going-wild-music-festival-gif-17442458', 'https://tenor.com/view/disko-ebalo-disco-disco-ebalo-ebalo-%D0%B4%D0%B8%D1%81%D0%BA%D0%BE-gif-25079652', 'https://tenor.com/view/maulgamer-celebration-dance-celebration-celebrating-celebrate-gif-22506461', 'https://tenor.com/view/cat-breakdancing-cat-breakdance-girl-breakdance-cat-and-girl-breakdance-fast-gif-26174754', 'https://media.discordapp.net/attachments/594817131015831572/623577450630348830/image0.gif', 'https://media.discordapp.net/attachments/880060699487899681/952974430810816592/gif-speed-1.gif', 'https://tenor.com/view/dance-russia-hard-bass-break-dance-windmill-gif-16269815']
    await ctx.send(random.choice(gifs))

@bot.command()
async def sad(ctx):
    import random
    message = ctx.message
    #await message.delete()
    gifs = ['https://tenor.com/view/sad-cat-lonely-upset-crying-gif-12536795', 'https://tenor.com/view/crying-black-guy-meme-sad-gif-11746329', 'https://tenor.com/view/%D1%8E%D0%B7%D1%8F-uselessmouth-smoke-cigar-omg-gif-17229012', 'https://tenor.com/view/useless-mouth-%D1%8E%D0%B7%D1%8F-%D1%80%D0%B8%D1%87%D0%B0%D1%80%D0%B4%D1%87%D0%B8%D1%80%D0%BA%D0%B8%D0%BD-yuzya-richard-chirkin-gif-16784157', 'https://cdn.discordapp.com/attachments/806477880305254413/880028013616582717/ezgif-1-312eed3779b1.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880028328763981854/Kiryu.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880029652335341599/Tobi_Maguayr_plachet.gif', 'https://cdn.discordapp.com/attachments/806477880305254413/880058822918537236/1557656886_giphy1.gif']
    await ctx.send(random.choice(gifs))

@bot.command(aliases=['esol'])
async def esolangs(ctx):
    import requests
    from bs4 import BeautifulSoup
    url = 'https://esolangs.org/wiki/Special:Random'
    site = 'https://esolangs.org/wiki/'
    reqs = requests.get(url)
    soup = BeautifulSoup(reqs.text, 'html.parser')
    for title in soup.find_all('title'):
        id = title.get_text().replace(' - Esolang', '')
        if ' ' in id:
            id = id.replace(' ', '_')
        await ctx.reply(site + id, mention_author=False)

@bot.command(aliases=['r/'])
@commands.cooldown(1, 10, commands.BucketType.user)
async def reddit(ctx, *, arg):
    import aiohttp
    import random
    from datetime import datetime
    author = ctx.message.author
    if not ctx.message.channel.is_nsfw():
        await ctx.reply('чтобы случайно не забить нужные тебе каналы лишней инфой, используй эту команду в более укромном месте. в нсфв-канале, например.', mention_author=True)
    if ctx.message.channel.is_nsfw():
        input = '{}'.format(arg)
        site = 'https://www.reddit.com/r/' + str(input) + '/new.json'
        # site = 'https://www.reddit.com/r/aphextwin/comments/pgwgvw/i_found_this_review_on_amazon_while_looking_at/'
        async with aiohttp.ClientSession() as cs:
            # async with cs.get('https://www.reddit.com/r/nsfw/new.json?sort=hot') as r:
            async with cs.get(site) as r:
                res = await r.json()
                number = random.randint(0, len(res['data']['children'])-1)
                title = res['data']['children'][number]['data']['title']
                link = res['data']['children'][number]['data']['url']
                comm = res['data']['children'][number]['data']['permalink']
                commfull = '\nOriginal post: <https://www.reddit.com' + str(comm) + '>'
                '''embed = discord.Embed(title = title)
                if 'v.redd.it' in link:
                    embed.url(link + '/DASH_480.mp4')
                elif 'comments/' in link:
                    embed.description(res['data']['children'] [number]['data']['selftext'])
                else:
                    embed.url(link)'''
                kgarten = res['data']['children']
                if kgarten or len(kgarten) > 0:
                    if input == 'tldr':
                        await ctx.send('твою ж мать, пощади\nна, сам читай: https://www.reddit.com' + comm)
                    else:
                        if 'v.redd.it' in link:
                            link = (link + '/DASH_480.mp4')
                        elif 'comments/' in link:
                            link = (res['data']['children'][number]['data']['selftext'])
                        if '&amp;' in link:
                            link = link.replace('&amp;', '&')
                        if '&amp;' in title:
                            title = title.replace('&amp;', '&')
                        if len(link) >= 1800:
                            sz = 1800
                            lastpoint = -1
                            start = 0
                            await ctx.send('**' + title + '**\n')
                            for i in range(len(link)):
                                if link[i] == ' ':
                                    lastpoint = i
                                if i - start >= sz:
                                    await ctx.send(str(link[start:lastpoint+1]))
                                    start = lastpoint + 1
                            if start < len(link):
                                await ctx.send(str(link[start:len(link)]))
                            await ctx.send(str(commfull))
                        elif len(link) <= 1800:
                            await ctx.reply('**' + title + '**\n' + link + '\n' + str(commfull), mention_author=False)
                elif not res['data']:
                    await ctx.send('Такого сабреддита не существует. Ты ошибся названием, друх.')
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' reddit ' + str(input) + '\n')

@bot.command()
async def osu(ctx):
    import random
    import requests
    from bs4 import BeautifulSoup
    import json
    for i in range(0, 100):
        site = 'https://osu.ppy.sh/beatmapsets/' + str(random.randint(1, 2000000))
        l = requests.get(site)
        soup = str(BeautifulSoup(l.text, 'lxml'))
        if 'Page Missing' in soup:
            pass
        else:
            break
    title = soup.find('title').text[:-22]
    lyst = str(soup.find('script', id='json-beatmapset')).replace('</script>', '').replace('<script id="json-beatmapset" type="application/json">', '').lstrip().strip()
    dicct = json.loads(lyst)
    cover2x = dicct['covers']['cover@2x']
    creator = dicct['creator']
    bpm = dicct['bpm']
    beatmap_info = dicct['beatmaps'][0]
    mode = beatmap_info['mode']
    embed = discord.Embed(title=title, url=site, color=0xde5c96)
    embed.add_field(name='Маппер', value=creator, inline=True)
    embed.add_field(name='\u200b', value='\u200b', inline=True)
    embed.add_field(name='BPM', value=bpm, inline=True)
    embed.add_field(name='Режим игры', value=mode, inline=True)
    embed.set_image(url=cover2x)
    await ctx.reply(embed=embed, mention_author=True)

@bot.command()
async def pop(ctx, *args):
    import random
    quote = ' '.join(args)
    inp = '#{}'.format(quote)
    if len(inp) > 1:
        cycle = int(quote)
    elif len(inp) == 1:
        cycle = random.randint(95, 111)
    pop = ''
    for i in range(0, cycle):
        pop = pop + ' ||' + random.choice(['pop', 'поп', 'POP', 'ПОП', 'ПУК', 'пук', 'чпок', 'среньк', 'пок', 'ПОК']) + '||'
    if cycle > 240 or len(pop) > 2000:
        await ctx.reply('слишком большой попыт какой-то получаеца', mention_author=False)
    else:
        await ctx.reply(pop, mention_author=False)

@bot.command()
async def ost(ctx):
    import datetime
    import time
    datenum = int(time.strftime('%j'))
    # datenum = 5
    year = int('%d' % datetime.datetime.now().year)
    if year % 4 == 0:
        blin = 366
    else:
        blin = 365
    ostalos = blin - datenum
    skl = ostalos % 10
    if skl == 1:
        await ctx.send('Блин блинский, до нового года остался ' + str(ostalos) + ' день')
    if skl in range(2, 5):
        await ctx.send('Блин блинский, до нового года осталось ' + str(ostalos) + ' дня')
    if skl == 0 or skl in range(5, 10):
        await ctx.send('Блин блинский, до нового года осталось ' + str(ostalos) + ' дней')

@bot.command()
async def fact(ctx):
    import random
    with open('facts.txt', encoding='utf8') as file:
        msg = file.read().strip().split("zxc")
        embed = discord.Embed(title='Рандомный факт!', description=msg[random.randint(0,len(msg))], color=discord.Colour.random())
        await ctx.send(embed=embed)

@bot.command()
async def saper(ctx, *args):
    import random
    skipinit = False
    errormessage = 'Поздравляю, ты где-то ошибся. ``xxsaper help`` тебе в помощь.'
    helpmessage = 'Так, ща помогу. Короче, вводится эта команда вот так:\n``xxsaper width height bombs``\n**1**<=``width``<=**15**\n**1**<=``height``<=**15**\n**1**<=bombs<=**(**``width`` **x** ``height``**)-1**\nЕсть еще 4 дефолтных пресета:\n **- Easy:** **6**x**6**, **3** :boom:\n **- Classic:** **9**x**9**, **10** :boom: \n **- Hard:** **10**x**10**, **30** :boom: \n **- Master:** **15**x**15**, **100** :boom: \nОни вводятся вот так: ``xxsaper classic``\nЕсли ты не совсем отупел, то правила тебе, наверное, уже ясны. Так что все, иди взрываться на бомбах.'
    if (len(args) == 0):
        await ctx.send(errormessage)
        return 0
    if (len(args) == 1):
        if ((args[0] == "help") or (args[0] == "Help")):
            await ctx.send(helpmessage)
            return 0
        if ((args[0] == "easy") or (args[0] == "Easy")):
            width = 6
            height = 6
            bombs = 3
            amount = 3
            skipinit = True
        if ((args[0] == "classic") or (args[0] == "Classic")):
            width = 9
            height = 9
            bombs = 10
            amount = 10
            skipinit = True
        if ((args[0] == "hard") or (args[0] == "Hard")):
            width = 10
            height = 10
            bombs = 30
            amount = 30
            skipinit = True
        if ((args[0] == "master") or (args[0] == "Master")):
            width = 15
            height = 15
            bombs = 100
            amount = 100
            skipinit = True
    if skipinit == False:
        try:
            int(args[0])
            int(args[1])
            int(args[2])
            if ((int(args[0]) > 15) or (int(args[0]) < 1)):
                await ctx.send(errormessage)
                return 0
            else:
                width = int(args[0])
            if ((int(args[1]) > 15) or (int(args[1]) < 1)):
                await ctx.send(errormessage)
                return 0
            else:
                height = int(args[1])
            if ((int(args[2]) > (width*height)-1) or (int(args[2]) < 1)):
                await ctx.send(errormessage)
                return 0
            else:
                amount = int(args[2])
                bombs = int(args[2])
        except ValueError:
            await ctx.send(errormessage)
            return 0
    field = []
    for i in range(height):
        field.append([0] * width)
    for i in range(height):
        for j in range(width):
            field[i][j] = "||:zero:||"
    posi = 0
    posj = 0
    while amount > 0:
        posi = random.randint(0, height-1)
        posj = random.randint(0, width-1)
        if field[posi][posj] == "||:zero:||":
            field[posi][posj] = "||:boom:||"
            amount = amount - 1
    for i in range(height):
        for j in range(width):
            if field[i][j] == "||:zero:||":
                neighbors = 0
                if (j+1 <= width-1) and (field[i][j+1] == "||:boom:||"):
                    neighbors = neighbors+1
                if (j-1 >= 0) and (field[i][j-1] == "||:boom:||"):
                    neighbors = neighbors+1
                if (i-1 >= 0) and (field[i-1][j] == "||:boom:||"):
                    neighbors = neighbors+1
                if (i+1 <= height-1) and (field[i+1][j] == "||:boom:||"):
                    neighbors = neighbors+1
                if (i+1 <= height-1) and (j-1 >= 0) and (field[i+1][j-1] == "||:boom:||"):
                    neighbors = neighbors+1
                if (i-1 >= 0) and (j+1 <= width-1) and (field[i-1][j+1] == "||:boom:||"):
                    neighbors = neighbors+1
                if (i+1 <= height-1) and (j+1 <= width-1) and (field[i+1][j+1] == "||:boom:||"):
                    neighbors = neighbors+1
                if (i-1 >= 0) and (j-1 >= 0) and (field[i-1][j-1] == "||:boom:||"):
                    neighbors = neighbors+1
                if neighbors == 1: field[i][j] = "||:one:||"
                elif neighbors == 2: field[i][j] = "||:two:||"
                elif neighbors == 3: field[i][j] = "||:three:||"
                elif neighbors == 4: field[i][j] = "||:four:||"
                elif neighbors == 5: field[i][j] = "||:five:||"
                elif neighbors == 6: field[i][j] = "||:six:||"
                elif neighbors == 7: field[i][j] = "||:seven:||"
                elif neighbors == 8: field[i][j] = "||:eight:||"
    await ctx.send('Сапер **' + str(width) + '**х**' + str(height) + '**. Количество мин: **' + str(bombs) + '**\n')
    line = ''
    if (height*12*width) > 2000:
        for i in range(height):
            for j in range(width):
                if (len(line) > 0) and (i % 6 == 0) and (j == 0): #каждую 5 строчку рестарт
                    await ctx.send(line)
                    line = ''
                line = line + field[i][j] + ' '
            line = line + '\n'
        if len(line) > 0:
            await ctx.send(line)
    else:
        for i in range(height):
            for j in range(width):
                line = line + field[i][j] + ' '
            line = line + '\n'
        await ctx.send(line)

@bot.command()
async def oblique(ctx):
    import random
    with open('oblique_strategies.txt', encoding = 'utf8') as f:
        lines = f.read().splitlines()
        await ctx.reply(embed=discord.Embed(description=random.choice(lines), color=0x828282), mention_author=False)
        
@bot.command(aliases=['party', 'day'])
async def praz(ctx):
    import random
    import requests
    from bs4 import BeautifulSoup as bs
    from fake_useragent import UserAgent
    url = 'https://kakoysegodnyaprazdnik.ru/'
    req = requests.get(url, headers={'User-Agent': UserAgent().chrome})
    soup = bs(req.content.decode('utf-8'), 'lxml')
    day = soup.find('h2', class_="mainpage").text
    praz = soup.find_all('span', itemprop='text')
    items = []
    for item in praz:
        items.append(item.text)
    spis = random.sample(items,10)
    final = '\n'.join(spis)
    await ctx.send(embed=discord.Embed(title=day, description=final, color=0xf50392))

@bot.command()
async def kym(ctx):
    import requests
    from bs4 import BeautifulSoup as bs
    from fake_useragent import UserAgent
    url = 'https://knowyourmeme.com/photos/random'
    req = requests.get(url, headers={'User-Agent': UserAgent().chrome})
    soup = bs(req.content.decode('utf-8'), 'lxml')
    link = soup.find("meta", property="og:image")
    image = link["content"]
    source = soup.find("meta", itemprop='mainEntityOfPage')
    srclink = source['content']
    title = soup.find('h1', id='media-title').text.lstrip().replace('\n',' ')
    views = soup.find('span', class_='view_count').text
    date = soup.find('abbr', class_='timeago').text
    tags = soup.find('p', id='tag_list').text
    uploader = soup.find('div', class_='name left').find('a').text
    embed = discord.Embed(title=title, url=srclink, color=0x13133e)
    embed.add_field(name='Выложил', value=uploader, inline=True)
    embed.add_field(name='Дата', value=date, inline=True)
    embed.add_field(name='Просмотры', value=views, inline=True)
    embed.add_field(name='Теги', value=tags, inline=False)
    embed.set_image(url=image)
    await ctx.reply(embed=embed, mention_author=True)

@bot.command(aliases=['tboir', 'boir'])    
async def isaac(ctx, *, arg):
    import re
    import requests
    from bs4 import BeautifulSoup as bs
    inp = '{}'.format(arg)
    if len(inp) == 1:
        await ctx.reply('Слишком короткий запрос. Вводи больше.', mention_author=True)
    else:
        with open('tboi.txt') as f:
            lines = f.read().splitlines()
            possible = []
            for name in lines:
                if inp.lower() == name.lower():
                    possible.clear()
                    possible.append(name)
                    break
                if inp.lower() in name.lower():
                    possible.append(name)
        if not possible:
            await ctx.reply('Не было найдено ни одного предмета по твоему запросу. Попробуй ещё раз.', mention_author=True)
        if len(possible) > 1:
            sovp = ''
            if len(possible) > 20:
                ost = str(len(possible)-20)
                possible = possible[:20]
                possible.append('и ещё ' + ost + '...')
            for item in possible:
                sovp = sovp + item + '\n'
            embed = discord.Embed(title='Какой из этих предметов тебе нужен?', description=sovp, color=0x763514)
        elif len(possible) == 1:
            index = lines.index(possible[0])
            '''url = 'https://isaac-items.ru/'
            req = requests.get(url)
            soup = bs(req.content.decode('utf-8'), 'lxml')'''
            with open("boi.htm", encoding="utf-8") as f:
                soup = bs(f.read(), 'lxml')
                found = soup.find('p', class_='item-title', string=re.compile(possible[0])).parent
                desc = found.find_all('p')
                nameforwiki = desc[0].text.replace(' ', '_')
                wiki = 'https://bindingofisaacrebirth.fandom.com/wiki/' + nameforwiki
                requ = requests.get(wiki)
                borsh = bs(requ.content, 'lxml')
                spr = borsh.find("meta", property="og:image")['content']
                forout = ''
                for item in desc[1:-1]:
                    forout = forout + item.text + '\n'
                if index in range(778, 905):
                    forout = forout.replace('ItemID', 'TrinketID')
                if index > 904:
                    forout = forout.replace('ItemID', 'CardID')
                embed = discord.Embed(title=desc[0].text, description=forout, color=0x763514)
                embed.set_thumbnail(url=spr)
        await ctx.reply(embed=embed, mention_author=True)

@bot.command(aliases=['tboi', 'boi', 'platinumgod'])    
async def pgod(ctx, *, arg):
    import re
    import requests
    from bs4 import BeautifulSoup as bs
    inp = '{}'.format(arg)
    if len(inp) == 1:
        await ctx.reply('Слишком короткий запрос. Вводи больше.', mention_author=True)
    else:
        with open('tboi.txt') as f:
            lines = f.read().splitlines()
            possible = []
            for name in lines:
                if inp.lower() in name.lower():
                    possible.append(name)
        if not possible:
            await ctx.reply('Не было найдено ни одного предмета по твоему запросу. Попробуй ещё раз.', mention_author=True)
        if len(possible) > 1:
            sovp = ''
            if len(possible) > 20:
                ost = str(len(possible)-20)
                possible = possible[:20]
                possible.append('и ещё ' + ost + '...')
            for item in possible:
                sovp = sovp + item + '\n'
            embed = discord.Embed(title='Какой из этих предметов тебе нужен?', description=sovp, color=0x763514)
        elif len(possible) == 1:
            index = lines.index(possible[0])
            '''url = 'https://isaac-items.ru/'
            req = requests.get(url)
            soup = bs(req.content.decode('utf-8'), 'lxml')'''
            with open("pgod.htm", encoding="utf-8") as f:
                soup = bs(f.read(), 'lxml')
                found = soup.find('p', class_='item-title', string=re.compile(possible[0])).parent
                desc = found.find_all('p')
                nameforwiki = desc[0].text.replace(' ', '_')
                wiki = 'https://bindingofisaacrebirth.fandom.com/wiki/' + nameforwiki
                requ = requests.get(wiki)
                borsh = bs(requ.content, 'lxml')
                spr = borsh.find("meta", property="og:image")['content']
                forout = ''
                for item in desc[1:-1]:
                    forout = forout + item.text + '\n'
                if index in range(778, 905):
                    forout = forout.replace('ItemID', 'TrinketID')
                if index > 904:
                    forout = forout.replace('ItemID', 'CardID')
                embed = discord.Embed(title=desc[0].text, description=forout, color=0x763514)
                embed.set_thumbnail(url=spr)
        await ctx.reply(embed=embed, mention_author=True)

@bot.command()
async def bible(ctx, *args):
    import random
    input = ' '.join(args)
    inp = '#{}'.format(input)
    notf = ['Ничего не найдено. Вернись, когда преисполнишься.', 'Небогоугодная вещь. Сходи в церковь и попробуй ещё раз.', 'Ты точно читал библию, сын мой?']
    found = False
    with open('bible.txt', encoding = 'utf8') as f:
        s = f.read().splitlines()
        if len(inp) == 1:  
            d = random.choice(s).split('|')
            embed = discord.Embed(title=d[2], description=d[3], color=0x7fc7ff)
            found = True
            await ctx.send(embed=embed)
        elif len(inp) > 1:
            for verse in s:
                if inp[1:] in verse or inp[1:] in verse.lower():
                    entries = verse.split('|')
                    embed = discord.Embed(title=entries[2], description=entries[3], color=0x7fc7ff)
                    await ctx.send(embed=embed)
                    found = True
                    break
        if found == False:
            await ctx.reply(random.choice(notf), mention_author=True)

@bot.command(aliases=['avatar', 'pfp'])
async def ava(ctx, user : discord.Member=None):
    if user == None:
        await ctx.reply('Ты либо пытаешься добыть аву у пустоты, либо не юзаешь пинг. Либо страдаешь фигнёй. Не надо так.', mention_author=True)
    elif user:
        embed = discord.Embed(description='Аватарка юзера '+str(user)+':', color=0xb33700)
        embed.set_image(url=str(user.avatar_url).replace('webp','png'))
        await ctx.send(embed=embed)

@bot.command()
async def wordle(ctx):
    import random
    words = ["слива", "хамон","умора","донат","оммаж","аббат","аргон","боран","клоны","кегля","камео","аниме","дания","кегли","рокер","крупа","карго","абвер","абзац","аборт","абрек","абрис","абхаз","абцуг","абшид","аваль","аванс","авгит","авгур","авеню","аверс","авизо","авлос","авось","аврал","авран","автол","автор","агава","агама","агент","агнат","агнец","агнцы","агора","аграф","агути","адепт","адити","адрес","адрон","адряс","ажгон","азарт","азиат","айван","аймак","айран","айрол","айсор","акажу","акант","аканф","акрил","аксис","аксон","актер","актив","актин","акула","акциз","акция","аларм","алгол","алеут","алиби","алкаш","алкил","аллах","аллея","аллод","аллюр","алмаз","алонж","алтей","алтын","алчба","алыча","альва","альфа","амбал","амбар","амбра","амбре","амвон","амеба","аминь","ампер","ампир","анаша","ангар","ангел","ангоб","анион","анкер","анонс","антей","антик","антре","анчар","аншеф","аорта","апекс","аплит","апноэ","апорт","апрош","арбуз","аргал","аргус","арден","ареал","арека","арена","ариец","аркан","армия","армюр","армяк","арсин","артос","архар","архей","архив","аршин","асана","аскер","аскет","аспид","астат","астма","астра","асцит","атака","атлас","атлет","атолл","атрий","аттик","аулос","афера","афина","афиша","ахеец","ахилл","ацтек","ашрам","аэроб","аэрон","бабай","бабка","бабье","багаж","багги","багер","багет","багор","багры","бадан","бадья","базар","базис","байга","байда","бакан","бакен","бакун","бакши","балда","балет","балка","балок","балык","бальи","банан","банда","банту","барак","баран","бареж","баржа","барий","барит","барич","бармы","барон","барыш","басма","баснь","басок","басон","бастр","батан","батат","батек","батог","батон","батуд","батут","батыр","бахта","бахус","бахча","бахши","бачки","бачок","башка","башли","башня","бегун","бедка","бедро","безик","бейка","бекар","бекас","бекон","белек","белец","белка","белое","белок","белый","белая","белье","беляк","беляш","бенди","бердо","берег","берет","берма","берце","бетон","биакс","бивак","бивни","бигус","бидон","бизон","билет","билль","билон","бином","бионт","биота","биржа","бирка","бирюк","бирюч","бисер","бистр","битва","битка","биток","битум","битый","битье","битюг","благо","блажь","бланк","блато","блеск","близь","блинт","блоха","блуза","блюдо","блюмс","блядь","бляха","бобер","бобик","бобок","богач","бодун","бодяк","бойцы","божба","божок","бозон","боинг","бойня","болид","болюс","бомба","бонза","бонмо","бонна","бонус","борат","бордо","борей","борец","борцы","борид","боров","борок","борть","босяк","ботва","ботик","бочаг","бочар","бочка","бочок","бояре","браво","брага","брада","брама","брань","брасс","бреве","брейк","бремя","брешь","бридж","брика","бриль","бритт","бровь","бронх","бронь","брошь","брыжи","брыла","брюки","брюхо","бубен","бубны","бубна","бубон","бугай","бугор","бугры","будка","будни","будра","будяк","бузун","букан","буква","букет","букле","букля","букол","булат","булга","булка","булла","бурак","буран","бурат","бурда","бурка","бурре","бурса","бурун","бурят","бутан","бутен","бутил","бутон","бутса","бутуз","буфер","буфет","бухло","бухта","быдло","былка","былое","былье","бытие","бытье","бычок","бьюик","бэнди","бювар","бювет","бюкса","вабик","вагон","вазон","вакат","вакса","вакуф","валах","валеж","валек","валер","валет","валец","валик","валка","валок","валуй","валух","вальс","ванна","ванта","вапор","варан","варна","варок","варяг","ватин","ватка","вафля","вахня","вахта","вдова","вебер","ведро","ведун","вежда","везир","вейка","векша","велик","велит","вельс","велюр","венгр","венед","венет","венец","венцы","венец","венцы","веник","вента","вепрь","верба","вервь","веред","верес","верея","верже","верфь","верша","весло","весна","весок","весть","ветвь","ветер","ветры","ветка","ветла","вечер","вешка","вещее","вещун","взбег","взвар","взвод","взвоз","вздор","вздох","взлет","взлом","взмах","взмет","взмыв","взнос","взрез","взрыв","взрыд","взыск","вивер","видео","видик","видок","визаж","визир","визит","вилка","вилла","вилок","винцо","виола","вираж","вирус","вирша","виски","висок","вития","виток","витье","вихор","вихры","вихрь","вишну","вклад","влага","вобла","вогул","водка","вожак","вождь","вожжа","возик","возка","возня","возок","война","вокал","волан","волга","волна","волок","волос","волох","волхв","вольт","вопль","ворог","ворон","ворот","ворох","ворье","вотум","вотяк","вошка","вояка","впуск","враки","враль","врата","время","вруша","вспых","всход","втора","вуаль","вчера","въезд","выбег","выбой","выбор","вывал","вывес","вывих","вывод","вывоз","выгар","выгиб","выгон","выгул","выдел","выдох","выдра","выдув","выезд","выжиг","выжим","вызов","вызол","выкат","выкол","выкос","выкуп","выкус","вылаз","вылет","вылов","вылом","вымах","вымол","вымор","вынос","выпад","выпал","выпар","выпас","выпек","выпор","выпот","вырез","выруб","высев","вытье","выход","вычет","вышаг","вышка","вьюга","вязка","вязок","вятич","вятка","гавот","гагат","гадес","газок","газон","гайка","галит","галка","галоп","галун","гамак","гамба","гамма","гамон","ганаш","ганец","ганцы","ганза","ганка","гараж","гарда","гарем","гарус","гаусс","гаучо","гачек","гашиш","гвалт","гевея","гейша","гелий","гемин","гемма","гений","геном","генри","геоид","герлс","герма","герой","гетит","гетра","гетто","гжель","гиады","гибка","гидра","гиена","гилея","гиляк","гинея","гипюр","гирло","гитан","гитов","гичка","глава","главк","гладь","глень","глина","глинт","глипт","глист","глубь","глушь","глыба","глясе","гмина","гнейс","гнида","гниль","гнусь","гобой","говно","говор","гогот","годик","годок","голем","голец","голик","голод","голос","голый","голая","голые","голыш","гольд","голье","гольф","голяк","гомон","гонец","гонцы","гонит","гонка","гонор","гопак","горал","горец","горцы","горец","горцы","горжа","горка","горло","горно","город","горох","горст","горюн","гость","граве","грамм","гранд","грант","грань","гребь","грежа","греза","грена","греча","грива","гридь","гриль","грипп","гроза","гросс","груда","грудь","грунт","груша","грыжа","гряда","грязь","гуава","гуано","гуашь","губан","губка","гугня","гудок","гужик","гузка","гузно","гулаг","гуляш","гумма","гумно","гумус","гуран","гурда","гурия","гусак","гусар","гусек","гусит","гусли","гуцул","гэпэу","гюрза","давка","дадан","дайна","дайра","далия","дамба","дамка","датив","дацан","дачка","дверь","дебай","дебет","дебил","дебит","дебош","дебрь","дебют","девиз","девка","девон","дегти","дедка","дедок","дежка","деизм","деист","декан","декор","дележ","делец","демон","демос","денди","денек","денье","дерба","дерби","дерен","дерма","дерть","десна","десть","детва","детка","дефис","джига","джинн","дзета","дзюдо","диана","диван","диета","дикий","дикая","дикие","дилен","дилер","дильс","динар","динас","динги","динод","диско","дихта","дичок","длань","длина","днище","донья","добор","добро","довод","догма","дождь","дожим","дозор","дойка","дойна","дойра","докер","домек","домен","домер","домик","домна","домок","домра","донец","донцы","донка","донна","донор","донос","донце","донья","дорка","досев","доска","досол","досуг","досыл","досье","дофин","доход","дочка","дошка","драга","драже","драйв","драка","драма","дрань","древо","дрейф","дрель","дрема","дробь","дрова","дрога","дрожь","дрозд","дрофа","друид","дрязг","дрянь","дубец","дубцы","дубка","дубль","дубок","дубье","дувал","дуван","дудак","дудка","дудук","дужка","дукат","дулеб","думец","думцы","думка","дунец","дунцы","дунит","дунст","дупло","дурак","дурни","дурка","дурра","дутар","дутик","дутыш","дутье","духан","душка","душок","дуэль","дщерь","дылда","дымка","дымок","дырка","дышло","дюбек","дюкер","дюшес","дядек","дядья","дятел","дятлы","евнух","еврей","егерь","егоза","ежиха","ежата","ездка","ездок","елина","емеля","емшан","ересь","ерник","есаул","ессей","ехида","жабка","жабра","жажда","жакан","жакет","жамка","жарка","жарок","жатва","жатка","жвало","жевок","желна","желоб","желть","желчь","жених","женка","жеода","жердь","жерех","жерло","жесть","жетон","живец","живцы","живое","живые","живот","живье","жиган","жидок","жизнь","жилет","жилец","жилка","жилое","жилье","жинка","жираф","жирок","жиряк","жисть","житие","житье","жменя","жмудь","жнива","жница","жокей","жопка","жрица","жулан","жулик","жулье","жупан","жупел","журка","жучка","жучок","забег","забой","забор","завал","завет","завод","завоз","завуч","загар","загиб","загон","загул","задел","задик","задок","задор","заеда","заезд","займы","зажим","зажин","зажор","зазор","зазыв","заика","зайка","заказ","закал","закат","закол","закон","закуп","закут","залет","залец","залив","зализ","залог","залом","замах","замер","замес","замет","замок","замок","замор","замша","зандр","занос","запад","запал","запас","запах","запах","запев","запой","запон","запор","зарез","зарин","зарод","зарок","заруб","заряд","засев","засов","засол","засор","засос","засыл","затек","затес","затея","заток","затон","затор","затяг","заумь","заход","зацеп","зачес","зачет","зачин","защип","зайцы","звено","звень","зверь","зебра","зевок","зелье","зельц","земец","земцы","земля","зенит","зенки","зерно","зернь","зефир","зипун","злато","злоба","злюка","знамя","знать","зобик","золка","зоман","зомби","зраза","зубья","зубец","зубцы","зубик","зубок","зудни","зумпф","зурна","зыбка","зыбун","зятек","зятик","иблис","иваси","ивина","ивняк","иврит","игрек","игрец","игрок","игрун","идеал","идиом","идиот","иерей","ижица","ижора","избач","извет","извив","извод","извоз","изгиб","изгой","изида","излет","излом","измол","измор","износ","изъян","изыск","изюбр","икона","икота","иксия","иктус","илеус","илька","имаго","имидж","имена","инвар","ингуш","индий","индол","индра","индус","индюк","инжир","интим","инула","иодид","иомен","иомуд","иомут","ионит","иония","иприт","ирбис","ирида","ирмос","исида","искра","искус","ислам","испод","испуг","иссоп","истец","истцы","истод","исток","исход","итээр","иудей","ифрит","ишиас","йодид","йодль","йомен","кааба","кабак","кабан","кабил","кабул","кавун","кагал","каган","кагат","кагор","кадет","кадиш","кадка","кадык","казак","казан","казах","казна","казнь","казус","кайен","кайла","кайма","кайра","какао","калам","калан","калач","калба","калий","калиф","калла","калым","камас","камни","камея","камин","камка","камса","камус","камча","камыш","канал","канат","канва","канна","канон","каноэ","канун","канюк","капер","капля","капор","капот","каппа","капут","карат","карга","карда","кариб","кария","карма","карст","карта","касик","каска","каско","касса","каста","катар","катер","катет","катод","каток","катыш","кацап","кацик","качка","качок","кашли","кашка","кашне","кашпо","кашуб","кащей","каюта","квадр","квант","кварк","кварц","квача","квота","кегль","кекур","кельт","келья","кенар","кенаф","кепка","кетен","кетон","кефир","кечуа","кешью","кивер","кивок","кивот","кидас","кизил","кизяк","килим","кимвр","кинза","киник","киоск","кипер","кипка","кирза","кирка","кирха","кисет","кисея","киска","киста","кисть","кифоз","кичка","кишка","клава","кладь","клака","класс","клект","клерк","клест","клеть","клефт","клещи","клинч","клипс","клише","клоун","клуня","клупп","клуша","клюка","клюфт","кляча","кнель","кнехт","книга","кникс","кница","князь","коала","коата","кобел","коблы","кобза","кобра","кобыз","ковач","ковер","ковры","ковка","когти","кодак","кодла","кодон","кожан","кожух","кожье","козел","козлы","козлы","кознь","козон","козны","койка","койне","койот","кокет","кокни","кокон","кокор","кокос","колья","колба","колер","колет","колея","колик","колит","колка","колли","колок","колон","колос","колун","колча","колье","кольт","колюр","комья","комар","комли","комик","комма","комми","комод","комок","конек","конец","концы","коник","конка","конто","конус","конюх","копал","копач","копер","копры","копие","копир","копия","копка","копна","копра","копун","копыл","копье","коран","корни","корец","корцы","кореш","корка","короб","корча","корчь","корье","коряк","косач","косая","косые","косец","косцы","косма","косой","косые","косок","кость","косье","косяк","котел","котлы","котик","коток","кофей","кофий","кофта","кохия","коцит","кочан","кочни","кочет","кочка","кошер","кошка","кошма","кощей","крага","кража","краля","крапп","краса","кредо","креол","крепь","кресс","крест","криль","крица","кроат","кровь","кроль","кросс","кроха","кроше","круиз","круть","круча","кручь","крыло","крыша","кубик","кубло","кубок","кувез","кудла","кудлы","кудри","кузен","кузня","кузов","кукан","кукиш","кукла","кукша","кулаж","кулак","кулан","кулек","кулеш","кулик","кулич","кулон","культ","кумач","кумжа","кумир","кумол","кумык","кумыс","кунак","куньи","купаж","купец","купцы","купля","купол","купон","кураж","курай","курва","курец","курцы","курия","курка","курок","куруш","курья","кусок","кутас","кутеж","кутис","куток","кутум","кутья","кутюм","кухва","кухня","кухта","кучер","кучка","кушак","кхмер","кэтти","кювет","кюлот","кяриз","лабаз","лабет","лаваш","лавис","лавка","лагун","ладан","ладья","лазер","лазея","лазка","лазок","лайба","лайда","лайка","лакей","лакец","лакцы","лампа","ламут","ланда","ландо","ланка","лапка","лапти","лапта","лапша","ларва","ларго","ларек","ларец","ларцы","ласка","лассо","латин","латка","латук","латыш","лафет","лафит","лацци","лачка","лачок","лбина","лбище","левак","левит","левша","левый","легат","легаш","легуа","ледок","лежак","лежни","лежка","лейка","лекаж","лемех","лемеш","лемма","лемур","ленок","лента","ленца","лепет","лепка","лепра","лепта","лерка","леска","лесок","лесть","летка","леток","летун","лешак","леший","лещик","лиана","либра","ливан","ливни","ливер","ливка","лидер","лизат","лизин","лизис","лизол","лизун","ликер","лилея","лилия","лиман","лимит","лимон","лимфа","линек","линек","линза","линия","липец","липцы","липид","липка","липси","лирик","лиска","литва","литер","литий","литка","литье","лихач","лихва","лицей","лишай","лишек","лобан","лобби","лобик","лобио","лобок","ловец","ловцы","ловля","логик","логос","лодка","ложка","ложок","локва","локон","локти","ломик","ломка","ломок","ломти","лонжа","лопух","лоток","лотос","лохмы","лоция","лошак","лубья","лубок","лужок","лузга","лукно","лунит","лунка","лупин","лупка","лучик","лучок","лыжня","лысун","лысый","лытка","лычка","льяло","любка","любви","любое","любой","любая","любые","люгер","люмен","люнет","люпин","люпус","люрик","лютик","лютич","лютня","люффа","лючок","лягва","ляжка","лямка","ляпис","лярва","ляссе","ляшка","магик","магия","магма","магот","мадам","мадия","маета","мажор","мазар","мазер","мазик","мазка","мазло","мазня","мазок","мазур","мазут","майер","майка","майна","майор","макао","макет","макса","макси","малек","малец","малик","малка","малое","малый","малье","маляр","мамай","маман","мамба","мамка","мамон","манас","манго","манда","манеж","манер","мание","мания","манка","манко","манна","манок","манор","манси","манто","манту","манул","маори","марал","маран","марго","маржа","марка","марля","масаи","маска","масло","масон","масса","масть","матка","маток","матюг","матюк","мафия","махан","махра","мачок","мачта","мегом","медея","медик","медок","медяк","мезга","мезон","мейоз","мекка","мелис","мелок","мелос","менка","мерея","мерин","мерка","месса","место","месть","месье","месяц","метан","метек","метил","метис","метка","метла","метод","метол","метоп","метро","меццо","мечта","мешок","мигач","мизер","микоз","микст","милка","милое","милый","милая","милые","мильт","мимик","минер","минея","минор","минос","минус","миома","мираб","мираж","мирза","мирок","мирон","миска","митоз","митра","мишка","мишук","млеко","могар","могол","модем","модий","модус","мойва","мойка","мойра","мокко","мокой","мокша","молва","молка","молот","молох","молян","моляр","момме","монах","моном","мопед","морда","мороз","морок","морцо","моряк","мосол","мослы","мосье","мотет","мотив","мотка","мотня","моток","мотор","мотто","мохер","мохна","мочка","мошка","мошна","муаре","мудак","мужья","мужик","музга","музей","мулат","мулек","мулла","муляж","мумие","мумия","мунгу","мураш","мурда","мурза","мурин","мурка","мурло","мурья","мусор","мутон","мутул","муфта","муцин","мучка","мушар","мушка","мымра","мысик","мысль","мысок","мытье","мычка","мышей","мышка","мышца","мэрия","мюзет","мюрид","мякиш","мялка","мямля","мянда","мясцо","мятеж","мятье","набат","набег","набла","набоб","набор","навал","навар","навес","навет","навис","навоз","навой","навык","наган","нагар","нагиб","нагон","нагул","надел","надир","надой","надув","наезд","наймы","нажиг","нажим","нажин","назем","наказ","накал","накат","накол","накос","накра","налеп","налет","налив","налим","налог","налой","намаз","намек","намет","намин","намол","намыв","нанай","нанду","нанка","нанос","напев","напой","напор","нарез","народ","нарта","наруч","наряд","насад","насос","насып","натек","натес","натяг","наука","нафта","нахал","наход","нация","начес","начет","начин","наяда","невер","невма","невод","негус","недра","недуг","немец","немцы","немка","немой","немая","немые","ненец","ненцы","нения","ненка","непер","нерка","нерол","нерпа","несун","нетяг","нефть","нечет","нивка","нивоз","нивух","низка","низок","никса","никто","нилот","нимфа","нисан","нитка","нитон","ничто","ничья","нищий","нищая","нищие","новик","новое","ногай","ногти","ножик","ножка","ножны","нойон","нолик","номад","номер","нонет","нория","норка","норма","норов","носач","носик","носка","носок","нотис","нотка","ночва","ночка","нудга","нужда","нукер","нулик","нутро","нырец","нырцы","нырок","нытик","нытье","нычка","нюанс","оазис","обвал","обвес","обвод","обвоз","обгон","обдел","обдир","обдув","обжиг","обжим","обжин","обжог","обзор","обида","обкат","обком","обкос","облет","облик","облов","облог","облой","обман","обмен","обмер","обмет","обмин","обмол","обмыв","обнос","ободь","обора","образ","обрат","обрез","оброк","обруб","обруч","обрыв","обряд","обсев","обувь","обуза","обход","обчет","общак","общее","объем","обыск","овист","овощь","овраг","овсец","овсюг","овчар","огонь","огрех","одежа","одеон","одурь","ожина","озеро","озимь","озноб","оидий","ойрот","окапи","океан","окись","окиян","оклад","оклик","оковы","окоем","окорм","окрас","окрик","окрол","округ","оксид","октан","октет","окунь","олеин","олень","олеум","олива","олимп","олифа","олово","ольха","омела","омлет","омуль","онагр","оникс","онуча","оолит","ооцит","опара","опека","опята","опера","опись","опиум","оплот","оплыв","опоек","опока","опрос","оптик","орава","орала","орарь","орган","оргия","орден","ордер","ореол","оржад","орион","оркан","орлан","орлец","орлик","орляк","ортит","орфей","орхит","оршад","осада","осень","осетр","осина","оскал","ослик","ослоп","осляк","осман","осмий","осмол","осмос","особа","особь","осоед","осока","осташ","остит","остов","остол","остюк","остяк","осыпь","отава","отара","отбив","отбой","отбор","отвал","отвар","отвес","ответ","отвод","отвоз","отгиб","отгон","отгул","отдел","отдух","отдых","отель","отжиг","отжим","отзол","отзыв","отказ","откат","откол","откос","откуп","откус","отлет","отлив","отлов","отлог","отлуп","отмах","отмер","отмол","относ","отпад","отпал","отпор","отрез","отрог","отрок","отруб","отрыв","отряд","отсев","отсек","отсос","оттек","отток","отход","отцеп","отчал","отчет","отчим","отшиб","отъем","офеня","офорт","офсет","оффис","охват","охота","очерк","очкур","очник","ошеек","ошкуй","ощупь","пагон","падеж","падеж","падла","падог","падуб","падун","пазок","пайва","пайза","пайка","пайол","пакет","пакля","палас","палац","палач","палаш","палех","палец","палея","палия","палка","палуб","пампа","панаш","панда","панер","панна","паныч","панье","папах","папеж","папка","парад","параф","парез","парни","парик","пария","парня","парод","парок","паром","парта","парун","парус","парча","парша","пасма","паста","пасть","пасха","пасюк","патан","патер","патио","патлы","патуа","пауза","пафос","пахви","пахит","пахта","пацан","пачка","пашня","паяло","певни","певец","певцы","певун","пегас","пейот","пекан","пекло","пелит","пемза","пенал","пенге","пенек","пение","пенка","пенни","пенье","пепел","пеплы","пепси","перга","перед","перец","перцы","перка","перло","перья","перси","перст","перун","перье","песец","песцы","песик","песнь","петел","петит","петля","петух","печка","пешец","пешцы","пеший","пешая","пешие","пешка","пешня","пещер","пещур","пиала","пиано","пивко","пивцо","пигус","пижма","пижон","пизда","пикан","пикап","пикет","пикон","пикша","пилав","пилат","пилка","пилон","пилот","пимок","пиния","пинка","пинна","пинок","пинта","пипка","пират","пирит","пирке","пирог","пирок","пирон","пироп","писец","писцы","писун","питие","питок","питон","питух","питье","пифия","пифос","пихта","пицца","пищик","плавь","плаке","пламя","пласт","плато","плаун","плаха","плебс","плева","плеер","племя","плеск","плесо","плеть","плечо","плешь","плинт","плита","плица","плоть","плохо","плюха","пнище","побег","побои","побор","повал","повар","повет","повод","повод","повой","погиб","погон","подий","подог","подой","подол","поедь","поезд","пожар","пожня","пожог","позем","позер","позор","позыв","позык","поиск","пойка","пойло","пойма","показ","покат","покер","покой","покос","покус","полба","полет","полив","полип","полир","полис","полог","полоз","полой","полом","полон","полть","полюс","поляк","поляш","помет","помин","помои","помол","помор","помпа","понос","пончо","понюх","попас","попик","попка","попса","порез","порей","порка","порог","пороз","порок","порос","порох","порск","порто","порты","поруб","порча","порыв","посад","посев","посол","посол","послы","посох","посул","посыл","поташ","потек","потир","поток","потоп","потяг","поход","похул","почва","почет","почин","почка","почта","пошиб","пошив","поэма","право","прана","прель","пресс","приап","прием","прима","принц","приор","приуз","причт","приют","проба","проем","проза","пропс","просо","проух","профи","прусс","прыск","прыть","прядь","пряжа","пряха","псарь","псина","псица","псише","птаха","птица","пуант","пугач","пудик","пудра","пузан","пузач","пукля","пульс","пульт","пунец","пунцы","пункт","пупок","пурга","пурин","пурка","пусто","путец","путцы","путик","путло","пуфик","пучка","пучок","пушка","пушок","пушта","пчела","пшено","пырей","пытка","пышка","пьеза","пьеро","пьеса","пьянь","пэтэу","пялка","пясть","пятак","пятка","пятно","пяток","пятый","пятая","пятые","рабат","раджа","радий","радио","радон","разик","разок","разор","разум","раина","район","ракия","ракля","ракун","ракша","ралли","рамка","рампа","ранет","ранец","ранцы","ранка","ранчо","рапид","растр","ратай","ратин","раунд","рафид","рафик","рафия","рахис","рахит","рацея","рация","рачок","рвань","рвота","рдест","ребаб","ребро","ребус","ревун","регби","регия","редан","редис","редут","режим","резак","резец","резцы","резит","резка","резня","резол","резон","резус","рейка","релиз","релит","рельс","ремез","ремни","ремиз","ренет","рений","рента","репей","репьи","репер","репка","репье","ретро","речка","решка","ржавь","ржица","ржище","риель","ризка","рикша","ринит","рипус","ритор","рифей","рифля","рифма","рицин","ришта","робот","ровер","ровик","ровня","рогач","рогоз","родео","родий","родич","родня","рожак","рожок","рожон","рожны","розан","розга","рознь","ройба","ройка","рокот","ролик","роман","ромец","ромок","ромша","рондо","ронжа","ропак","ропот","ростр","ротик","роток","ротон","ротор","рохля","рояль","ртище","ртуть","рубеж","рубец","рубцы","рубин","рубка","рубль","ругня","рудяк","ружье","руина","рукав","рулет","рулон","румын","рунец","рунцы","рупия","рупор","русак","русин","русло","рутил","ручей","ручьи","ручка","рыбак","рыбец","рыбцы","рыбка","рывок","рыжак","рыжей","рыжий","рында","рынок","рысак","рысца","рытье","рычаг","рэкет","рэлей","рюмка","рюшка","рябец","рябцы","рябик","рябой","рябая","рябые","рябок","рядно","рядок","ряска","рясна","ряшка","сабан","сабей","сабза","сабин","сабля","сабур","саван","савар","савка","саган","сагиб","саджа","садик","садка","садно","садок","сазан","сайга","сайда","сайка","сайра","саква","сакля","салар","салат","салеп","салка","салма","салол","салон","салоп","салют","саман","самба","самбо","самец","самцы","самка","самум","санки","сапер","сапка","сапог","сапун","сарай","саржа","сарос","сарыч","сатин","сатир","сауна","сафра","сахар","сахиб","сачок","сброд","сброс","сбруя","свара","сваха","свеча","свиль","свинг","свист","свита","свора","свояк","связа","связь","сглаз","сдача","сдвиг","сдоба","сеанс","севак","севба","север","севец","севцы","севок","седан","седло","седок","сеево","сезам","сезни","сезон","сейба","сейид","сейша","секач","секта","селен","селин","семга","семик","семит","семья","сенаж","сенат","сенки","сенцо","сепия","серир","серия","серка","серна","серое","серсо","серум","серый","серая","серые","сетка","сеунч","сечка","сиаль","сивер","сивка","сивко","сивуч","сивый","сивая","сивые","сигма","сидни","сидка","сидор","сиена","сижок","сизиф","сизяк","сикоз","силач","силен","силка","силок","силон","силос","силур","сильф","симка","синап","синец","синцы","синод","синто","синус","синяк","синяя","синие","сипай","сирен","сирин","сироп","сирый","сирая","сирые","систр","ситар","ситец","ситцы","ситро","ситце","сифон","скала","скало","скань","скарб","скарн","скаут","скачь","сквер","сквош","скейт","скена","скепт","скетч","скирд","склад","склеп","склиз","склон","скоба","скора","скорм","скотч","скрап","скреп","скрип","скрэб","скуди","скудо","скука","скула","скунс","слава","слайд","слань","слега","слеза","сленг","слизь","слово","слуга","слуда","слука","слюда","слюна","смазь","смена","смерд","смерч","смесь","смета","смола","смоль","смотр","смрад","смута","смуть","смысл","снедь","сноха","сныть","собес","собор","совет","совик","совка","совок","согра","содом","созыв","сойка","сойма","сойот","сокол","солея","солка","солод","соляр","сомик","сомье","сонет","сопка","сопло","сопля","сопор","сопун","сорго","сорит","сорок","сором","сорус","сосед","сосец","сосцы","соска","сосна","сосок","сосуд","сосун","сотка","сотня","сотый","сотая","софит","сохач","сочни","сочок","сошка","спаги","спазм","спайк","спесь","спирт","спица","сплав","сплав","сплин","спорт","спрей","спрос","спрут","спурт","спуск","среда","срост","ссора","ссуда","стадо","сталь","станс","старт","старь","стать","ствол","створ","стега","стезя","стела","стель","стенд","стень","степс","степь","стерх","стикс","стило","стиль","стоик","стокс","столп","стопа","стояк","страж","страз","страх","стриж","стрик","стрит","строй","строп","струг","струп","струя","стужа","ступа","ступь","стыдь","стынь","суаре","сувой","судак","судия","судно","судно","судок","судья","суета","суинг","сучья","сукно","сукре","сулея","сулой","сумах","сумет","сумка","сумма","сунна","супер","супец","супцы","супин","суржа","сурик","сурна","сурок","сусак","сусек","сусло","сутаж","сутки","сутра","суфле","сучка","сучок","сучок","сучье","сушка","сущее","сущик","сфера","схема","схима","сцена","сцинк","съезд","сынок","сыпец","сыпцы","сырец","сырцы","сырок","сырца","сырье","сытый","сытая","сытые","сычуг","сыщик","сэшэа","сюжет","сюита","сябер","сяжок","табак","табес","табло","табор","табун","тавот","тавро","таган","тайцы","тазик","тайга","таймс","тайна","такое","такса","такси","такыр","талан","талер","талес","талиб","талик","талия","талон","талыш","тальк","талья","тамга","тамил","танго","танец","танцы","танин","танок","тапер","тапир","тапка","таран","тараф","тариф","тарын","таска","татка","тауэр","тафта","тафья","тахта","тацет","тачка","ташка","таэль","тварь","твист","театр","тезей","тезис","тезка","теизм","теист","текст","телек","телец","телик","телка","телок","тембр","темка","тенге","тенек","тенор","тепло","терем","терец","терцы","терка","терма","терно","тесак","тесей","теска","тесло","тесто","тесть","тетка","теург","течка","тешка","тиара","тигли","тимол","тимус","тинка","типаж","типец","типцы","типик","типун","тираж","тиран","тиски","титан","титла","титул","тифон","тифус","ткань","тлень","товар","тодес","тойон","токай","толай","толос","толпа","толща","толщь","томан","томат","томик","томми","тондо","тоник","тонна","тонус","топаз","топик","топка","топор","топот","торба","торец","торцы","торий","торос","тоска","тотем","тоуэр","тохар","точка","трава","трамп","транс","транш","трапп","трата","траур","треба","трель","трема","треск","трест","треть","треух","триас","триба","триер","тризм","трико","трипс","тромб","тромп","трояк","труба","трусы","труха","трюмо","тсуга","туаль","тубус","тугай","тугун","тузик","тукан","тулес","тулий","тулуз","тулук","тулун","тулуп","тулья","туляк","тумак","туман","тумба","тумор","тунец","тунцы","тупей","тупец","тупцы","тупик","тупыш","турач","турка","турне","турок","тутор","тутти","туфля","туфта","тучка","тушка","тщета","тыква","тынок","тырло","тырса","тычок","тюбик","тюник","тюрбе","тюрик","тюрок","тютюн","тюфяк","тючок","тябло","тягач","тягло","тяжба","тяпка","уазик","уброд","убрус","убыль","увраж","углич","угода","уголь","угорь","угрев","удаль","удача","удерж","удило","удэге","удэхе","ужата","узанс","узбек","уздца","узина","узник","уйгур","уклад","уклея","уклон","укроп","укрут","укрюк","уксус","улика","улица","улыба","ульта","умбра","умище","умник","умный","умная","умные","умолк","униат","унион","унтер","унция","упрек","упырь","ураза","урарт","урема","урина","урман","усина","усище","ускок","успех","устой","уступ","устье","утеря","утеха","утиль","утица","ухарь","ухват","ухожь","ухряб","учеба","учхоз","ушица","ушкуй","ушник","ущерб","фабра","фавор","фавус","фагот","фадом","фазан","фазис","факел","факир","фалда","фальц","фанат","фанза","фарад","фарси","фасад","фасет","фаска","фасон","фатом","фатум","фатюй","фауна","фацет","фация","фаянс","фелло","фелон","фений","фенил","фенол","ферзь","ферма","ферми","феска","фетва","фетиш","фетюк","фефер","фиакр","фибра","фигли","фигня","фидер","фижма","физик","физия","фикус","филер","филин","филон","филум","фильм","фильц","фимоз","финал","финик","финиш","финка","фиорд","фирма","фитин","фишка","фланг","фланк","флейт","флейц","флинт","флирт","флокс","флора","флюид","фляга","фляер","фобия","фокус","фолио","фолия","фомка","фонон","форма","форум","фоска","фотон","фофан","фраер","фраза","франк","франт","фрахт","фреза","френч","фреон","фронт","фрукт","фрунт","фугас","фужер","фузея","фузия","фукус","фуляр","фураж","фуран","фурия","фурма","фурор","футер","футор","фуфло","фуэте","фырок","фьорд","фюрер","хабар","хадис","хазар","хайло","хакас","хакер","халал","халат","халва","халда","халиф","хамит","хамка","хамло","хамса","хамье","ханжа","ханты","ханша","хапун","харон","харчо","хасид","хатка","хашиш","хвала","хворь","хвост","хедер","хедив","херем","херик","хиазм","хилус","хилый","хилая","хилые","хиляк","химик","химия","химус","хинди","хинин","хинон","хиппи","хирот","хитин","хитон","хлест","хлыст","хлюст","хлябь","хмара","хмель","хмурь","хмырь","хоана","хобби","хобот","ходни","ходжа","ходик","ходка","ходок","ходок","ходун","холин","холка","холод","холоп","холст","холуй","хольд","хомут","хомяк","хорал","хорда","хорей","хорея","хохма","хохол","хохлы","хохот","хошун","хруст","хряпа","хряск","хряст","худое","хунну","хунта","хурал","хурда","хурма","хутор","цадик","цанга","цапка","цапля","цапун","цапфа","царек","цацка","цвель","цветы","цевка","цевье","цедра","цезий","целик","целла","целое","центр","ценур","цепни","цепка","цепня","церий","цефей","цибик","цикля","цинаш","цинга","циник","цирик","циста","цитра","цифра","цокот","цукат","цуцик","цыбик","цыган","цыпка","цэрэу","чабан","чабер","чабры","чадра","чайка","чакан","чакра","чалка","чалма","чалый","чалая","чалые","чарка","часик","часок","часть","чашка","чебак","чебот","челка","чемер","чепан","чепцы","черва","черви","червь","черед","через","черен","череп","чернь","ческа","честь","четка","чехол","чехлы","чечен","чечет","чешка","чешуя","чибис","чилим","чинка","чипсы","чирей","чирьи","чирик","чирок","чирус","чиряк","число","читка","чомга","чомпи","чрево","чреда","чтиво","чтица","чубик","чубук","чувак","чувал","чуваш","чувяк","чугун","чудак","чудик","чужак","чужое","чужая","чужие","чуйка","чукча","чулан","чулок","чумак","чурек","чурка","чутье","чухна","чушка","шабат","шабаш","шабер","шабер","шабры","шабли","шабля","шабот","шабур","шавка","шадуф","шажок","шайба","шайка","шакал","шалаш","шалон","шалун","шаман","шамот","шанец","шанцы","шанкр","шапка","шарап","шарик","шасла","шассе","шатен","шатер","шатры","шатия","шатун","шафер","шахта","шашни","шашка","шашни","шваль","шванк","швара","шварт","шверт","шевер","шевро","шеища","шелеп","шелом","шельф","шемая","шепот","шериф","шибер","шизик","шиизм","шилья","шимми","шинок","шинто","шипок","шипун","ширма","шитво","шитик","шитье","шифер","шифон","шихан","шихта","шишак","шишка","шкала","шкант","шквал","шкерт","шкода","школа","шкура","шланг","шлейф","шлюха","шляпа","шмель","шмоль","шнапс","шнява","шняка","шобла","шорец","шорцы","шорка","шорня","шорох","шорты","шоссе","шофер","шпага","шпала","шпана","шпень","шпиль","шпинь","шпион","шприц","шпрот","шпуля","шпунт","шпынь","шримс","шрифт","штамб","штамм","штамп","штаны","штейн","штиль","штифт","штора","шторм","штраб","штраф","штрек","штрих","штука","штурм","штыка","штырь","шубка","шугай","шудра","шуйца","шулер","шумер","шумок","шурин","шурпа","шуруп","шуряк","шутка","шухер","шушун","шхера","шхуна","шютте","щебни","щебет","щегол","щеглы","щекот","щелок","щенок","щепка","щепье","щерба","щетка","щечка","щипец","щипцы","щипка","щипок","щипцы","щитни","щитик","щиток","щишки","щупик","щупка","щурка","щурок","щучка","эгида","эгрет","эдикт","эйдос","экзот","эклер","экран","эксод","элеат","элита","эллин","эмаль","эммер","энзим","эозин","эолит","эоцен","эпарх","эпонж","эпоха","эрата","эрбий","эрзац","эркер","эсдек","эскер","эскиз","эспри","эссен","эстет","этвеш","этика","этнос","эфиоп","эшарп","югрич","югурт","юдоль","южане","юзист","юкола","юмизм","юниор","юница","юнкер","юнкор","юннат","юнона","юноша","юрага","юрист","юферс","ябеда","ягель","ягода","ягуар","яичко","яишня","якорь","ямина","ямища","ямщик","ярица","ярлык","яруга","ярыга","ясень","яспис","яство","ястык","ясырь","ятвяг","ятовь","яхонт","ферзь","феска","радон","пенис","ласты","аорта","минор","мажор","дартс","нерпа","орава","блядь","блять","хохма","слова","решала","решка","сойка","балда","ягель","парео","греча","ботва","чабан","невод","опала","байка","права","порно","песня","стена","радар","арест","спора","тверк","тогда","через","здесь","более","конец","перед","между","пойти","часть","город","также","никто","взять","вдруг","почти","земля","общий","сразу","выйти","много","право","дверь","образ","закон","война","голос","найти","книга","любой","число","народ","ждать","нужно","форма","связь","кроме","опять","белый","улица","вечер","снова","мысль","месяц","школа","среди","театр","рубль","смысл","рядом","назад","орган","живой","рынок","вести","семья","давно","центр","ответ","автор","часто","смочь","долго","зачем","совет","затем","глава","наука","плечо","точка","далее","около","брать","целый","спать","может","палец","пусть","войти","номер","ехать","метод","фильм","менее","гость","кровь","район","армия","класс","герой","спина","сцена","сесть","будто","уметь","всего","домой","скоро","разве","объем","берег","фирма","завод","точно","снять","песня","чужой","легко","роман","стихи","видно","повод","малый","успех","выход","текст","вовсе","убить","пункт","столь","линия","среда","волос","никак","ветер","огонь","грудь","когда","страх","звать","сумма","вновь","прямо","сфера","иначе","вчера","плохо","расти","мужик","немец","некий","выбор","масса","шесть","нести","слава","кухня","такой","время","знать","стать","чтобы","жизнь","очень","новый","можно","какой","после","самый","потом","слово","место","иметь","ничто","вроде","левый","отдел","товар","актёр","слеза","вывод","норма","возле","рамка","лучше","ладно","приём","тихий","режим","целое","вирус","поиск","налог","доход","карта","давай","божий","сорок","акция","сосед","фраза","толпа","серый","схема","волна","птица","запах","водка","яркий","поезд","адрес","лидер","резко","умный","стиль","весна","ясный","милый","эпоха","запад","тайна","трава","дойти","узкий","лично","фронт","музей","князь","сутки","зайти","судья","крыша","нечто","поток","честь","еврей","сотня","дождь","сухой","синий","труба","осень","пьеса","черта","вверх","молча","кусок","учить","билет","масло","экран","канал","вагон","пятый","дурак","сезон","запас","длина","крыло","округ","доска","вдоль","полёт","ранее","пакет","важно","живот","голый","смена","редко","таков","порог","буква","лодка","серия","шутка","кулак","южный","нефть","цифра","сапог","дикий","жильё","мешок","отказ","замок","диван","добро","покой","вслед","кость","спорт","особо","майор","отдых","ручка","мечта","сюжет","рубеж","крест","взрыв","почва","чисто","заказ","штука","сумка","сойти","хвост","песок","озеро","строй","жалко","дочка","танец","сдать","набор","горло","плата","съезд","путём","кошка","верно","пятно","лезть","ткань","визит","каков","океан","пауза","ствол","тепло","радио","зверь","нация","банка","чётко","метро","везде","отчёт","обмен","тоска","забор","мороз","марка","грязь","спрос","мотор","везти","север","склад","мотив","арест","отряд","нужда","собор","сзади","внизу","салон","капля","пожар","холод","тётка","якобы","обида","рыжий","вклад","гонка","рукав","туман","шофёр","врать","атака","игрок","плыть","тонна","вождь","орден","юноша","бабка","вызов","полка","ровно","бровь","удача","бытие","орать","шапка","ложка","белок","голод","нигде","охота","домик","замуж","ветка","башня","тариф","агент","гений","сахар","благо","жилой","смесь","разум","плита","брюки","мышца","вечно","явный","посол","пачка","шоссе","икона","халат","идеал","лента","бомба","штамм","сиять","ущерб","архив","вслух","мягко","сырьё","штаны","поход","худой","морда","проза","маска","опера","шляпа","бельё","ведро","седой","лампа","малыш","одеть","облик","слева","копия","гнать","уголь","устав","нынче","судно","чашка","элита","ветвь","почта","палка","актив","столб","ангел","штраф","отель","мышка","ножка","свеча","снизу","блюдо","грань","скала","такси","зерно","сосна","форум","блеск","папка","сбить","степь","ковёр","пламя","треть","слабо","певец","ружьё","речка","сырой","финал","недра","девка","знамя","рюмка","исход","общее","звено","грипп","печка","шёпот","пилот","плоть","самец","череп","бочка","гараж","сосуд","поэма","склон","лавка","бокал","кисть","идиот","койка","тесно","якорь","дрова","ворот","опора","сметь","учёба","топор","физик","барон","барак","кукла","жених","носок","всюду","обувь","намёк","котёл","принц","ловко","пушка","бедро","свыше","порыв","сетка","сарай","опрос","прочь","старт","шкура","драка","проба","казак","мусор","влечь","моряк","самка","туфля","химия","мадам","племя","тупой","кубок","полно","ягода","битва","монах","грамм","дырка","побег","базар","драма","отбор","рвать","спирт","кузов","ванна","канон","рыбак","ребро","мамин","сжечь","фрукт","вдова","грубо","балет","весть","казнь","навык","пение","ручей","взвод","спеть","касса","щенок","вздох","юрист","шахта","букет","тираж","шпион","жилец","тезис","залог","струя","остро","очерк","буфет","жажда","сдача","сжать","смело","овощи","пасть","жарко","нитка","разом","рояль","пацан","суета","козёл","наряд","тайга","петля","сбоку","темно","пласт","обман","шарик","рычаг","злоба","песнь","нежно","стадо","вдвое","глина","выезд","закат","вдали","висок","обзор","завет","искра","погон","взнос","слуга","крыса","культ","сынок","былой","довод","спуск","чайка","гордо","грунт","обыск","заряд","купол","отзыв","позор","вопль","катер","люсин","цыган","алмаз","лысый","минус","обряд","поляк","тупик","сколь","тропа","рельс","дилер","ферма","горка","пирог","сталь","табак","почка","тварь","залив","испуг","аллея","вилка","петух","фокус","показ","жадно","овраг","гроза","полюс","русло","будка","олень","рубка","рыбка","трусы","босой","салат","банда","борец","обрыв","хохот","ввиду","комар","майка","парус","перец","пират","стенд","ислам","глупо","ежели","мирно","упрёк","хутор","биржа","исток","налёт","сытый","фасад","истец","пытка","турок","низко","этика","виски","жрать","обком","влага","густо","новое","сеанс","мэрия","палач","шумно","клоун","треск","башка","сплав","ссора","медик","насос","скука","шкала","арена","имидж","ласка","титул","даром","киоск","круто","парта","повар","затея","парад","пучок","газон","пятка","сшить","крона","ожить","равно","синяк","рывок","умело","взлёт","пепел","порок","робко","седло","штурм","проём","чуять","бодро","глухо","негде","немой","влево","дрожь","каюта","кишка","купец","сдвиг","штора","бремя","пусто","тощий","фюрер","вовсю","нищий","пафос","кепка","косой","миска","багаж","конёк","манеж","месть","тайно","чулок","дрянь","кумир","садик","свист","тугой","азарт","геном","гудок","квота","таять","лимон","стопа","белка","вялый","обход","ролик","слюна","щедро","жутко","мелко","оклад","бегом","бетон","камин","пульт","гамма","мерка","афиша","вахта","груда","лгать","папин","родня","тонко","донос","особа","таить","шорох","штамп","греть","некто","бланк","брюхо","груша","демон","магия","скрип","сущий","талия","тесто","хмуро","бабий","вышка","ларёк","сквер","вилла","лапка","уютно","кучка","лихой","пчела","скула","абзац","пасха","франк","бугор","напор","казна","копьё","балка","весло","зачёт","кубик","сеять","червь","щётка","досуг","вихрь","сверх","чутьё","венец","косяк","нюанс","шашка","чудак","въезд","вылет","глубь","корма","пульс","шишка","акула","отсек","приют","свита","кража","лилия","факел","шланг","арбуз","венок","диета","корка","назло","дуэль","ихний","канат","рубин","баран","холст","колея","мафия","рация","будни","бурый","износ","комок","робот","грант","аллах","бурно","глыба","изгиб","рифма","фланг","эскиз","бухта","манер","нутро","тачка","финиш","химик","чудом","аборт","извне","битый","вальс","сокол","черёд","чукча","броня","возня","каска","мятый","салют","баржа","говно","дебют","девиз","макет","опека","подол","почёт","толща","вывоз","рента","церка","каток","лютый","отрыв","уклон","шприц","веник","жулик","кофта","недуг","особь","отбой","тесть","богач","вдаль","мячик","навоз","ощупь","сироп","трест","тяжко","хитро","будда","видео","вишня","донор","дымок","капот","набок","нагло","смола","сыщик","барин","выкуп","заход","долма","мюсли"]
    answers = ["конец","никто","земля","право","дверь","образ","закон","война","стиль","книга","число","народ","форма","связь","улица","мысль","месяц","школа","театр","рубль","смысл","орган","рынок","семья","центр","ответ","автор","стена","совет","глава","наука","плечо","точка","палец","номер","метод","фильм","гость","кровь","район","класс","герой","спина","сцена","объем","берег","фирма","завод","песня","роман","стихи","повод","успех","выход","текст","пункт","линия","среда","волос","ветер","огонь","грудь","когда","страх","сумма","сфера","вчера","мужик","немец","выбор","масса","шесть","слава","кухня","время","жизнь","слово","место","отдел","товар","актер","слеза","вывод","норма","рамка","прием","режим","целое","поиск","налог","доход","карта","акция","сосед","фраза","толпа","серый","волна","птица","запах","водка","поезд","адрес","лидер","весна","эпоха","запад","тайна","трава","музей","князь","сутки","судья","крыша","поток","честь","еврей","сотня","дождь","труба","осень","пьеса","черта","кусок","билет","масло","экран","канал","вагон","дурак","сезон","запас","длина","крыло","округ","доска","полет","пакет","живот","смена","порог","буква","лодка","серия","шутка","кулак","нефть","цифра","сапог","жилье","мешок","отказ","замок","диван","добро","покой","вслед","кость","спорт","майор","отдых","ручка","мечта","сюжет","рубеж","крест","взрыв","почва","заказ","штука","сумка","хвост","песок","озеро","строй","дочка","танец","набор","горло","плата","съезд","кошка","пятно","ткань","визит","океан","пауза","ствол","тепло","радио","зверь","нация","банка","метро","отчет","обмен","тоска","забор","мороз","марка","грязь","спрос","мотор","север","склад","мотив","арест","отряд","нужда","собор","салон","капля","пожар","холод","тетка","обида","вклад","гонка","рукав","туман","шофер","атака","игрок","тонна","вождь","орден","юноша","бабка","вызов","полка","бровь","удача","бытие","шапка","ложка","белок","голод","охота","домик","замуж","ветка","башня","тариф","агент","гений","сахар","благо","смесь","разум","плита","брюки","мышца","посол","пачка","шоссе","икона","халат","идеал","лента","бомба","штамм","ущерб","архив","вслух","сырье","штаны","поход","морда","проза","маска","опера","шляпа","белье","ведро","лампа","малыш","облик","копия","уголь","устав","судно","чашка","элита","ветвь","почта","палка","актив","столб","ангел","штраф","отель","мышка","ножка","свеча","блюдо","грань","скала","такси","зерно","сосна","форум","блеск","папка","степь","ковер","пламя","треть","певец","ружье","речка","сырой","финал","недра","девка","знамя","рюмка","исход","звено","грипп","печка","шепот","пилот","плоть","самец","череп","бочка","гараж","сосуд","поэма","склон","лавка","бокал","кисть","идиот","койка","тесно","якорь","дрова","ворот","опора","учеба","топор","физик","барон","барак","кукла","жених","носок","обувь","намек","котел","принц","пушка","бедро","порыв","сетка","сарай","опрос","старт","шкура","драка","проба","казак","мусор","моряк","самка","туфля","химия","мадам","племя","кубок","ягода","битва","монах","грамм","дырка","побег","базар","драма","отбор","спирт","кузов","ванна","канон","рыбак","ребро","фрукт","вдова","грубо","балет","весть","казнь","навык","пение","ручей","взвод","касса","щенок","вздох","юрист","шахта","букет","тираж","шпион","жилец","тезис","залог","струя","очерк","буфет","жажда","сдача","овощи","пасть","нитка","рояль","пацан","суета","козел","наряд","тайга","петля","темно","пласт","обман","шарик","рычаг","злоба","песнь","стадо","глина","выезд","закат","висок","обзор","завет","искра","погон","взнос","слуга","крыса","культ","сынок","довод","спуск","чайка","грунт","обыск","заряд","купол","отзыв","позор","вопль","катер","цыган","алмаз","минус","обряд","поляк","тупик","тропа","рельс","дилер","ферма","горка","пирог","сталь","табак","почка","тварь","залив","испуг","аллея","вилка","петух","фокус","показ","овраг","гроза","полюс","русло","будка","олень","рубка","рыбка","трусы","босой","салат","банда","борец","обрыв","хохот","ввиду","комар","майка","парус","перец","пират","стенд","ислам","упрек","хутор","биржа","исток","налет","фасад","истец","пытка","турок","этика","виски","обком","влага","сеанс","мэрия","палач","клоун","треск","башка","сплав","ссора","медик","насос","скука","шкала","арена","имидж","ласка","титул","даром","киоск","круто","парта","повар","затея","парад","пучок","газон","пятка","крона","синяк","рывок","взлет","пепел","порок","седло","штурм","проем","бодро","дрожь","каюта","кишка","купец","сдвиг","штора","бремя","пафос","кепка","миска","багаж","конек","манеж","месть","чулок","дрянь","кумир","садик","свист","азарт","геном","гудок","квота","лимон","стопа","белка","обход","ролик","слюна","мелко","оклад","бегом","бетон","камин","пульт","гамма","мерка","афиша","вахта","груда","родня","донос","особа","шорох","штамп","бланк","брюхо","груша","демон","магия","скрип","талия","тесто","вышка","ларек","сквер","вилла","лапка","кучка","пчела","скула","абзац","пасха","франк","бугор","напор","казна","копье","балка","весло","зачет","кубик","червь","щетка","досуг","вихрь","чутье","венец","косяк","нюанс","шашка","чудак","въезд","вылет","глубь","корма","пульс","шишка","акула","отсек","приют","свита","кража","лилия","факел","шланг","арбуз","венок","диета","корка","дуэль","канат","рубин","баран","холст","колея","мафия","рация","будни","износ","комок","робот","грант","аллах","бурно","глыба","изгиб","рифма","фланг","эскиз","бухта","манер","нутро","тачка","финиш","химик","чудом","аборт","вальс","сокол","чукча","броня","возня","каска","салют","баржа","дебют","девиз","макет","опека","подол","почет","толща","вывоз","рента","церка","каток","отрыв","уклон","шприц","веник","жулик","кофта","недуг","особь","отбой","тесть","богач","вдаль","мячик","навоз","ощупь","сироп","трест","будда","видео","вишня","донор","дымок","капот","смола","сыщик","барин","выкуп","заход","питон"]
    #ТУДУ: ПРЕДУСМОТРЕТЬ СЛУЧАЙ, В КОТОРОМ НЕСКОЛЬКО БУКВ ИЗ ВВОДИМОГО СЛОВА ССЫЛАЮТСЯ К ОДНОЙ БУКВЕ ИЗ ЗАГАДАННОГО СЛОВА (НЕ ДОЛЖНО БЫТЬ ЛИШНИХ ЖЁЛТЫХ)
    chars = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"
    toguess = random.choice(answers)
    green = ":green_square:  "
    yellow = ":yellow_square:  "
    red = ":white_large_square:  "
    grem = ["<:letter01:944586970334654464>", "<:letter02:944586970405961789>", "<:letter03:944586970401742868>", "<:letter04:944586969927807057>", "<:letter05:944586970405949520>", "<:letter06:944586970078801993>", "<:letter07:944586969961357343>", "<:letter08:944586970238164993>", "<:letter09:944586970003275797>", "<:letter10:944586970343047198>", "<:letter11:944586969994887179>", "<:letter12:944586970439508019>", "<:letter13:944586970447884369>", "<:letter14:944586970540158986>", "<:letter15:944586970393378846>", "<:letter16:944586970410156042>", "<:letter17:944586970439491594>", "<:letter18:944586970263347212>", "<:letter19:944586970565345361>", "<:letter20:944586970561151006>", "<:letter21:944586970540154911>", "<:letter22:944586970540171384>", "<:letter23:944586970745671730>", "<:letter24:944586970116534313>", "<:letter25:944586970749886504>", "<:letter26:944586970569519155>", "<:letter27:944586970649223209>", "<:letter28:944586970749870100>", "<:letter29:944586970829561916>", "<:letter30:944586970598871050>", "<:letter31:944586970607259679>", "<:letter32:944586970242379777>", "<:letter33:944587007387127848>"]
    yeem = ["<:letter01:944587074349183036>", "<:letter02:944587074139455529>", "<:letter03:944587074336591963>","<:letter04:944587073946517526>", "<:letter05:944587074303057960>", "<:letter06:944587074525351976>", "<:letter07:944587074315624549>", "<:letter08:944587074336591932>", "<:letter09:944587074311422044>", "<:letter10:944587074462437406>", "<:letter11:944587074286268426>", "<:letter12:944587073967489046>", "<:letter13:944587074638610572>", "<:letter14:944587074571477052>", "<:letter15:944587074386939914>", "<:letter16:944587074349182986>", "<:letter17:944587074315628584>", "<:letter18:944587074026217493>", "<:letter19:944587074454036520>", "<:letter20:944587074315616327>", "<:letter21:944587073971716218>", "<:letter22:944587074068156437>", "<:letter23:944587074022023239>", "<:letter24:944587074189811794>", "<:letter25:944587074512756747>", "<:letter26:944587074672164915>", "<:letter27:944587074487607307>", "<:letter28:944587074428878858>", "<:letter29:944587074563096636>", "<:letter30:944587074441453599>", "<:letter31:944587074613444609>", "<:letter32:944587074248507564>", "<:letter33:944587074114310205>"]
    reem = ["<:letter01:946057459573858345>", "<:letter02:946057459703881728>", "<:letter03:946057459779371068>","<:letter04:946057459984916530>", "<:letter05:946057459607437384>", "<:letter06:946057459599020032>", "<:letter07:946057459829727323>", "<:letter08:946057459750027316>", "<:letter09:946057460454662214>", "<:letter10:946057459640971304>", "<:letter11:946057459703885834>", "<:letter12:946057471850606592>", "<:letter13:946057459401887766>", "<:letter14:946057459888431154>", "<:letter15:946057459963920504>", "<:letter16:946057459691315272>", "<:letter17:946057459594842182>", "<:letter18:946057460773437452>", "<:letter19:946057459661951006>", "<:letter20:946057472022560799>", "<:letter21:946057459376730113>", "<:letter22:946057472102269048>", "<:letter23:946057460119126036>", "<:letter24:946057460152664095>", "<:letter25:946057459603218433>", "<:letter26:946057460068810834>", "<:letter27:946057459850686464>", "<:letter28:946057460010061915>", "<:letter29:946057459632594965>", "<:letter30:946057460173656064>", "<:letter31:946057459594846209>", "<:letter32:946057459821338675>", "<:letter33:946057459536105493>"]
    progress = ""
    currentstep = ""
    channel = ctx.message.channel
    def check(m):
        return m.author == ctx.author and m.channel == channel
    for i in range (0,6):
        pas = False
        if i > 0:
            if 6-i == 5:
                await ctx.reply(progress + "\nОсталось 5 попыток.", mention_author=True)
            elif 6-i >= 2:
                await ctx.reply(progress + "\nОсталось " + str(6-i) + " попытки.", mention_author=True)
            else:
                await ctx.reply(progress + "\nПоследняя попытка.", mention_author=True)
        else:
            await ctx.reply("Погнали. Напиши любое слово, состоящее из 5 букв.", mention_author=True)
        while pas == False:
            #wait = await bot.wait_for('message', check=lambda message: message.author == ctx.author)
            wait = await bot.wait_for('message', check=check)
            async for msg in ctx.channel.history(limit = 1):
                inp = msg.content.lower()
            if inp == 'стоп':
                await ctx.reply("Понял. Гамовер.", mention_author=True)
                break
            elif len(inp) != 5:
                await ctx.reply("Длина слова должна быть равна 5!", mention_author=True)
            elif inp not in words:
                await ctx.reply("Такого слова нет в словаре.", mention_author=True)
            else:
                pas = True
        guesses = ""
        currentstep = ""
        for index in range(0,5):
            if inp[index] == toguess[index]:
                for charindex in range(0,33):
                    if inp[index] == chars[charindex]:
                        currentstep += grem[charindex]
            elif inp[index] in toguess:
                for charindex in range(0,33):
                    if inp[index] == chars[charindex]:
                        currentstep += yeem[charindex]
            else:
                for charindex in range(0,33):
                    if inp[index] == chars[charindex]:
                        currentstep += reem[charindex]
        scheck = 0
        for emoji in currentstep.split('><'):
            for element in grem:
                if emoji in element:
                    scheck += 1
                    break
        if scheck == 5:
            if i+1 <= 3:
                achfile = open('achievements/wordle.txt', encoding='utf-8').read().splitlines()
                hasach = False
                for id in achfile:
                    if ctx.message.author.id not in id:
                        hasach = True
                        break
                if hasach:
                    await ctx.reply("\U0001F3C6 **Открыто достижение!**\nМОЗГИ - угадать слово в вордле за три или менее ходов.", mention_author=True)
                    file.write(ctx.message.author.id + '\n')
            await ctx.reply("ХАРОШ!\n" + str(i+1) + "/6", mention_author=True)
            break
        progress += currentstep + '\n'
        if 6-i == 1:
            await ctx.reply('Плох. Загаданное слово: ' + toguess, mention_author=True)

@bot.command()
async def ach(ctx):
    import re
    import random
    import requests
    from bs4 import BeautifulSoup as bs
    aid = random.randint(0, 200000)
    website = 'https://retroachievements.org'
    address = website + '/achievement/' + str(aid)
    #address = 'https://retroachievements.org/achievement/97429'
    l = requests.get(address)
    soup = bs(l.text, 'lxml').find('div', {'id': 'achievement'})
    game = soup.find('h3', class_='longheader').text
    gamelink = soup.find('div', class_='navpath').find_all('a')[2]['href']
    gamelink = website + str(gamelink)
    pic = str(soup.find('img')['src']).replace('_lock', '')
    achbox = soup.find('div', {'id': 'achievemententry'})
    achname = achbox.find('a').text
    achdesc = re.search(r"(?<=<br/>).*?(?=<br/>)", str(achbox)).group(0)
    ratio = re.search(r"(?<=</a>).*?(?=<span)", str(achbox)).group(0)[2:-1]
    trueratio = achbox.find('span', class_='TrueRatio').text[2:-1]
    numbers = soup.find_all('b')
    won = numbers[1].text
    summary = numbers[2].text
    unoff = 'Unofficial Achievement'
    if won == unoff:
        won = numbers[2].text
        summary = numbers[3].text
    percent = re.search(r"\(([A-Za-z0-9_]+)\%\)", str(soup)).group(0)
    creator = soup.find('p', class_='smalldata').find('a').text
    embed = discord.Embed(title=game, url=gamelink, color=0xcc9900)
    embed.add_field(name=achname, value=achdesc, inline=False)
    embed.add_field(name='Points', value=ratio, inline=True)
    embed.add_field(name='Retro Ratio', value=trueratio, inline=True)
    embed.add_field(name='Completing Stats', value='Won by ' + won + ' of ' + summary + ' possible players ' + percent, inline=False)
    embed.add_field(name='Created by', value=creator, inline=False)
    if numbers[1].text == unoff:
        embed.add_field(name='**THIS ACHIEVEMENT IS UNOFFICIAL!**', value=f'[Link]({address})', inline=False)
    if numbers[1].text != unoff:
        embed.add_field(name='_ _', value=f'[Link to this achievement]({address})', inline=False)
    embed.set_thumbnail(url = pic)
    await ctx.reply(embed=embed, mention_author = True)

@bot.command(pass_context=True, aliases=['fortunecookie', 'fcookie'])
async def fortune(ctx, *args):
    from PIL import Image, ImageDraw, ImageFont
    import random
    import glob
    idd = str(ctx.message.id)
    inp = ' '.join(args)
    inpp = '#{}'.format(inp)
    text = inpp[1:]
    if len(inpp) == 1:
        with open('fortunes.txt', encoding = 'utf8') as file:
            fortunes = file.read().split('\n\n')
            msg = random.choice(fortunes)
        linecounter = 0
        for line in msg.split('\n'):
            linecounter += 1
        if linecounter == 1:
            paper = "bg1.png"
            initialpoint = 70
        elif linecounter == 2:
            paper = "bg2.png"
            initialpoint = 90
        elif linecounter == 3:
            paper = "bg3.png"
            initialpoint = 105
        with Image.open(paper).convert("RGBA") as im:
            W, H = (im.width, im.height)
            font = ImageFont.truetype("UpheavalPro-Regular.ttf", 40, encoding='UTF-8')
            #im = Image.new("RGBA",(W,H),"yellow")
            draw = ImageDraw.Draw(im)
            offset = 0
            for line in msg.split('\n'):
                w, h = draw.textsize(line, font=font)
                draw.text(((W-w)/2,(initialpoint+offset)/2), line, fill="black", font=font)
                offset += 66
            imgs = im.save("fortune/autogenerated/" + idd + ".png")
            tosend = random.choice(glob.glob("fortune/autogenerated/" + idd + ".png"))
            result = discord.File(tosend, filename=None, spoiler=False)
            await ctx.reply(file=result, mention_author=False)
    elif len(inpp) > 1:
        linecounter = 0
        overflow = False
        toomuchrows = False
        for line in text.split('/'):
            linecounter += 1
            if len(line) > 22:
                overflow = True
                break
        if linecounter == 1:
            paper = "bg1.png"
            initialpoint = 70
        elif linecounter == 2:
            paper = "bg2.png"
            initialpoint = 90
        elif linecounter == 3:
            paper = "bg3.png"
            initialpoint = 105
        elif linecounter > 3:
            toomuchrows = True
        if overflow:
            await ctx.reply('Длина строк не должна превышать 22 символа!', mention_author=False)
        elif toomuchrows:
            await ctx.reply('Выходит слишком много строк! Юзай максимум три.', mention_author=False)
        else:
            with Image.open(paper).convert("RGBA") as im:
                W, H = (im.width, im.height)
                font = ImageFont.truetype("UpheavalPro-Regular.ttf", 40, encoding='UTF-8')
                #im = Image.new("RGBA",(W,H),"yellow")
                draw = ImageDraw.Draw(im)
                offset = 0
                for line in text.split('/'):
                    w, h = draw.textsize(line, font=font)
                    draw.text(((W-w)/2,(initialpoint+offset)/2), line, fill="black", font=font)
                    offset += 66
                imgs = im.save("fortune/custom/" + idd + ".png")
                tosend = random.choice(glob.glob("fortune/custom/" + idd + ".png"))
                result = discord.File(tosend, filename=None, spoiler=False)
                await ctx.reply(file=result, mention_author=False)

@bot.command(aliases=['lol'])
async def lolsport(ctx):
    import requests
    from bs4 import BeautifulSoup as bs
    import json
    url = 'https://tmnforever.tm-exchange.com/trackrandom?name=lolsport&author=lolsport'
    l = requests.get(url)
    soup = bs(l.content.decode('utf-8'), 'lxml')
    trackname = soup.find('div', {'class': 'col text-break'}).text[1:-1]
    id_ = soup.find('div', {'class': 'col-auto flexinfo'}).text[1:-4]
    tracklink = 'https://tmnforever.tm-exchange.com/trackshow/' + id_
    authortime = soup.find('td', {'template': 'trackinformation'})['template-data']
    timeval = json.loads(authortime).get('ReplayTime')
    atmiliseconds = str(timeval)[-3:-1]
    atseconds = str(timeval)[:-3]
    atminutes = str(int(atseconds)//60)
    atimeformated = atminutes + ':' + atseconds + '.' + atmiliseconds
    recordstable = soup.find('div', {'data-type': 'dedimania'})
    screen = tracklink + '/image/0'
    download = soup.find('div', {'class': 'col text-right'}).find('a')['href']
    dlink = 'https://tmnforever.tm-exchange.com' + download
    upload = soup.find('span', {'template': 'time'})['template-data']
    embed = discord.Embed(title=trackname, url=tracklink, color=0x494949)
    embed.add_field(name='Авторское время', value=atimeformated, inline=False)
    embed.add_field(name='_ _', value=f'[Скачать карту]({dlink})', inline=False)
    embed.set_thumbnail(url = screen)
    await ctx.reply(embed=embed, mention_author = True)

@bot.command()
async def color(ctx):
    import random
    from PIL import Image, ImageDraw, ImageFilter
    import glob
    hax = '1234567890abcdef'
    color = '#'
    s = 25
    for i in range(0,6):
        color += random.choice(hax)
    def draw_ellipse(image, bounds, width=1, outline='white', antialias=4):
        mask = Image.new(
            size=[int(dim * antialias) for dim in image.size],
            mode='L', color='black')
        draw = ImageDraw.Draw(mask)
        for offset, fill in (width/-2.0, 'white'), (width/2.0, 'black'):
            left, top = [(value + offset) * antialias for value in bounds[:2]]
            right, bottom = [(value - offset) * antialias for value in bounds[2:]]
            draw.ellipse([left, top, right, bottom], fill=fill)
        mask = mask.resize(image.size, Image.LANCZOS)
        image.paste(outline, mask=mask)
    img = Image.new("RGBA", (s, s))
    #img1 = ImageDraw.Draw(img)
    #img1.ellipse((0,0,s,s), fill=color)
    #img.filter(ImageFilter.GaussianBlur(radius=5))
    draw_ellipse(img, (0,0,s,s), width=1, outline='')
    idd = str(ctx.message.id)
    imgs = img.save("colors/" + idd + ".png")
    tosend = random.choice(glob.glob("colors/" + idd + ".png"))
    result = discord.File(tosend, filename=None, spoiler=False)
    await ctx.reply('``'+color+'``', file=result, mention_author=False)

@bot.command(aliases=['f'])
async def fool(ctx, *args):
    input = ' '.join(args)
    inp = '#{}'.format(input)
    inps = inp[1:].split(' ')
    fools = {'66':'<:66:993971027677810830>',
         'ahuenna':'<:ahuenna:993971029644935228>',
         'aloha':'<:aloha:993971031427514509>',
         'awkward':'<:awkward:993971033767936000>',
         'chtooo':'<:chtooo:993971035818967161>',
         'click':'<:click:993971038650122260>',
         'coolman':'<:coolman:993971040583700490>',
         'depression':'<:depression:993971042383052967>',
         'fisting':'<:fisting:993971045268721826>',
         'flowergift':'<:flowergift:993971047290392646>',
         'horny':'<:fuckinhorny:993971049131688087>',
         'gaypointer':'<:gaypointer:993971050742288476>',
         'hmm':'<:hmmmm:993971053267275986>',
         'isleep':'<:isleep:993971055599308870>',
         'joyful':'<:joyful:993971057830666260>',
         'lmao':'<:lmao:993971060301103184>',
         'nasrano':'<:nasrano:993971062062718996>',
         'sigh':'<:sigh:993971064264728596>',
         'smooch':'<:smooch:993971065829212189>',
         'tongueout':'<:tongueout:993971068421287987>',
         'poker':'<:trueneutral:993971070283567204>',
         'wha':'<:wha:993971072963727370>',
         'whistle':'<:whistle:993971074704347257>',
         'wink':'<:winkwink:993971076545662991>',
         'zloi':'<:zloi:993971079129354290>'}
    if len(inp) == 1:
        foolslist = '**Спискота всех эмодзи из дурака:**'
        '''for key in fools.keys():
            foolslist += key + ', '
        await ctx.reply(foolslist[:-2], mention_author=True)'''
        await ctx.send(foolslist)
        await ctx.send('https://media.discordapp.net/attachments/806477880305254413/994532608715268147/foolemojilist.png')
    elif len(inp) > 1:
        out = ''
        for ems in inps:
            found = False
            for key in fools.keys():
                if ems == key:
                    #await ctx.send(fools[key])
                    out+= fools[key]+' '
                    found = True
                    break
        if found:
            await ctx.send(out)
        if not found:
            if len(inps) == 1:
                await ctx.reply('Такого эмодзи нету. Давай ещё раз.', mention_author=True)
            elif len(inps) > 1:
                await ctx.reply('Одного из прописанных эмодзи не существует. Трай аген', mention_author=True)

# КРИПТО
@bot.command()
async def crypto(ctx):
    from datetime import datetime
    author = ctx.message.author
    help_str = "**b64/deb64 <text/code>** - простенькая команда для шифровки/дешифровки вписанного после команды текста с использованием Base64, просто чтобы было;\n**b32/deb32 <text/code>, b85 (или ascii85, base85)/deb85 (или deascii85, debase85) <text/code>** - аналогично команде выше, только с другими разрядностями бейса;\n**bacon/debacon <text/code>** - язык бешеных кроликов из реймана. шучу. это шифр бэкона, в котором каждая буква заменяется набором из пяти двоичных символов (в данном случае - буквами А и В). кириллица не поддерживается;\n**uni <text>** - переводит текст в код юникода;\n**latgib <text>** - превращает текст в псевдолатинскую абракадабру (latin gibberish). крайне простая вещь, но выглядит прикольно. кириллица не поддерживается, мб в будущем сделаю транслит\n**bin/debin <text/binary>** - шифратор-дешифратор двоичного кода;\n**morse/demorse <text/code>** - команды для работы с морзянкой. поддерживают кириллицу (на заметку: зашифрованная кириллица отличается от латиницы более жирными точками);\n**clock/declock <text/code>** - модифицированный a1z26. каждая пара часов отвечает за свою букву. полный список расшифровки букв находится тут: https://pastebin.com/xvFG3Ajj;\n**torus <english_text>** - меняет раскладку вписанного текста на русскую;\n**toeng <russian_text>** - меняет раскладку вписанного текста на английскую\n**xxvernam <text>** - зашифровывает сообщение алгоритмом Вернама. В лс придёт ключ для его расшифровки, не бойся если чо\n**xxdevernam <ciphertext/key>** - расшифровывает сообщение обратным алгоритмом Вернама. Для этого нужен зашифрованный текст и ключ. Обе части аргумента должны быть разделены слешем."
    await ctx.reply(embed=discord.Embed(title='Крипто-команды:', description=help_str, color=0xb33700), mention_author=False)
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' crypto\n')

@bot.command()
async def b64(ctx, *, arg):
    import base64
    s = '{}'.format(arg)
    b = s.encode("UTF-8")
    e = base64.b64encode(b)
    s1 = e.decode("UTF-8")
    await ctx.reply('**Сообщение закодировано. Вот чо вышло:**\n```' + s1 + '```', mention_author=False)

@bot.command()
async def deb64(ctx, *, arg):
    import base64
    s = '{}'.format(arg)
    b1 = s.encode("UTF-8")
    d = base64.b64decode(b1)
    s1 = d.decode("UTF-8")
    await ctx.reply('**Сообщение расшифровано. Вот чо в нём было:**\n```' + s1 + '```', mention_author=False)

@bot.command()
async def b32(ctx, *, arg):
    import base64
    s = '{}'.format(arg)
    b = s.encode("UTF-8")
    e = base64.b32encode(b)
    s1 = e.decode("UTF-8")
    await ctx.reply('**Сообщение закодировано. Вот чо вышло:**\n```' + s1 + '```', mention_author=False)

@bot.command()
async def deb32(ctx, *, arg):
    import base64
    s = '{}'.format(arg)
    b1 = s.encode("UTF-8")
    d = base64.b32decode(b1)
    s1 = d.decode("UTF-8")
    await ctx.reply('**Сообщение расшифровано. Вот чо в нём было:**\n```' + s1 + '```', mention_author=False)

@bot.command(pass_context=True, aliases=['ascii85', 'base85'])
async def b85(ctx, *, arg):
    import base64
    s = '{}'.format(arg)
    b = s.encode("UTF-8")
    e = base64.b85encode(b)
    s1 = e.decode("UTF-8")
    await ctx.reply('**Сообщение закодировано. Вот чо вышло:**\n```' + s1 + '```', mention_author=False)

@bot.command(pass_context=True, aliases=['deascii85', 'debase85'])
async def deb85(ctx, *, arg):
    import base64
    s = '{}'.format(arg)
    b1 = s.encode("UTF-8")
    d = base64.b85decode(b1)
    s1 = d.decode("UTF-8")
    await ctx.reply('**Сообщение расшифровано. Вот чо в нём было:**\n```' + s1 + '```', mention_author=False)

@bot.command()
async def bacon(ctx, *, arg):
    def multiple_replace(target_str, replace_values):
        for i, j in replace_values.items():
            target_str = target_str.replace(i, j)
        return target_str

    my_str = '{}'.format(arg)
    low_str = my_str.lower()
    zero = low_str.replace(' ', '')
    repl = {"a":"AAAAA ", "b":"AAAAB ", "c":"AAABA ", "d":"AAABB ", "e":"AABAA ", "f":"AABAB ", "g":"AABBA ", "h":"AABBB ",
            "i":"ABAAA ", "j":"ABAAB ", "k":"ABABA ", "l":"ABABB ", "m":"ABBAA ", "n":"ABBAB ", "o":"ABBBA ", "p":"ABBBB ",
            "q":"BAAAA ", "r":"BAAAB ", "s":"BAABA ", "t":"BAABB ", "u":"BABAA ", "v":"BABAB ", "w":"BABBA ", "x":"BABBB ",
            "y":"BBAAA ", "z":"BBAAB "}

    obsh = multiple_replace(zero, repl)
    await ctx.reply('```' + obsh + '```', mention_author=False)

@bot.command()
async def debacon(ctx, *, arg):
    def multiple_replace(target_str, replace_values):
        for i, j in replace_values.items():
            target_str = target_str.replace(i, j)
        return target_str

    my_str = '{}'.format(arg)
    repl = {"AAAAA":"a", "AAAAB":"b", "AAABA":"c", "AAABB":"d", "AABAA":"e", "AABAB":"f", "AABBA":"g", "AABBB":"h", "ABAAA":"i",
            "ABAAB":"j", "ABABA":"k", "ABABB":"l", "ABBAA":"m", "ABBAB":"n", "ABBBA":"o", "ABBBB":"p", "BAAAA":"q", "BAAAB":"r",
            "BAABA":"s", "BAABB":"t", "BABAA":"u", "BABAB":"v", "BABBA":"w", "BABBB":"x", "BBAAA":"y", "BBAAB":"z"}
    final = {" ":""}

    perv = multiple_replace(my_str, repl)
    obsh = multiple_replace(perv, final)
    await ctx.reply('```' + obsh + '```', mention_author=False)

@bot.command()
async def latgib(ctx, *, arg):
    import random
    text = '{}'.format(arg)
    rev = ""
    for word in text.split():
        ends = ["us", "um", "it", "ae", "is", "em", "ei", "a", "on", "en", "u", "er", "am", "as", "ibus", "ebus", "erum", "i"]
        oko = random.choice(ends)
        if len(word) > 2:
            rev = "{} {}".format(rev, word[::-1] + oko)
        else:
            rev = "{} {}".format(rev, word)
    await ctx.reply('```' + rev[1:] + '```', mention_author=False)

@bot.command()
async def uni(ctx, *, arg):
    s = '{}'.format(arg)
    z = ' '.join(hex(ord(c)).split('x')[-1] for c in s)
    await ctx.reply('```' + z + '```', mention_author=False)

@bot.command()
async def bin(ctx, *, arg):
    s = '{}'.format(arg)
    await ctx.reply('```' + (' '.join(map(lambda x: "{0:b}".format(ord(x)).zfill(16), s))) + '```', mention_author=False)

@bot.command()
async def debin(ctx, *, arg):
    result = ''
    input_string = '{}'.format(arg)
    for word in input_string.strip().split(' '):
        number = int(word, 2)
        result += chr(number)
    await ctx.reply('```' + result + '```', mention_author=False)

@bot.command()
async def morse(ctx, *, arg):
    my_str = '{}'.format(arg)
    low_str = my_str.lower()
    sp = {".":".-.-.-", "-":"-....-",
          "a":".-", "b":"-...", "c":"-.-.", "d":"-..", "e":".", "f":"..-.", "g":"--.", "h":"....", "i":"..", "j":".---", "k":"-.-", "l":".-..", "m":"--",
          "n":"-.", "o":"---", "p":".--.", "q":"--.-", "r":".-.", "s":"...", "t":"-", "u":"..-", "v":"...-", "w":".--", "x":"-..-", "y":"-.--", "z":"--..",
          "а":"•-", "б":"-•••", "в":"•--", "г":"--•", "д":"-••", "е":"•", "ё":"•", "ж":"•••-", "з":"--••", "и":"••", "й":"•---", "к":"-•-", "л":"•-••", "м":"--",
          "н":"-•", "о":"---", "п":"•--•", "р":"•-•", "с":"•••", "т":"-", "у":"••-", "ф":"••-•", "х":"••••", "ц":"-•-•", "ч":"---•", "ш":"----", "щ":"--•-",
          "ъ":"•--•-•", "ы":"-•--", "ь":"-••-", "э":"••-••", "ю":"••--", "я":"•-•-",
          "0":"-----", "1":".----", "2":"..---", "3":"...--", "4":"....-", "5":".....", "6":"-....", "7":"--...", "8":"---..", "9":"----.",
          ",":"--..--", "?":"..--..", "!":"-.-.--", "'":".----.", "(":"-.--.", ")":"-.--.-", "&":".-...", ":":"---...", ";":"-.-.-.", "=":"-...-", "+":".-.-.",
          "_":"..--.-", '\"':".-..-.", "$":"...-..-", "@":".--.-.", "/":"-..-."}
    result = []
    for word in low_str.split():
        word2 = []
        for i in word:
            word2.append(sp[i])
        result.append(' '.join(word2))
    await ctx.reply('```' + (' / '.join(result)) + '```', mention_author=False)

@bot.command()
async def demorse(ctx, *, arg):
    my_str = '{}'.format(arg)
    low_str = my_str.lower()
    mas = [[".",".-.-.-"], ["-","-....-"],
           ["a",".-"], ["b","-..."], ["c","-.-."], ["d","-.."], ["e","."], ["f","..-."], ["g","--."], ["h","...."], ["i",".."],
           ["j",".---"], ["k","-.-"], ["l",".-.."], ["m","--"], ["n","-."], ["o","---"], ["p",".--."], ["q","--.-"], ["r",".-."],
           ["s","..."], ["t","-"], ["u","..-"], ["v","...-"], ["w",".--"], ["x","-..-"], ["y","-.--"], ["z","--.."],
           ["а","•-"], ["б","-•••"], ["в","•--"], ["г","--•"], ["д","-••"], ["е","•"], ["ж","•••-"], ["з","--••"], ["и","••"],
           ["й","•---"], ["к","-•-"], ["л","•-••"], ["м","--"], ["н","-•"], ["о","---"], ["п","•--•"], ["р","•-•"], ["с","•••"],
           ["т","-"], ["у","••-"], ["ф","••-•"], ["х","••••"], ["ц","-•-•"], ["ч","---•"], ["ш","----"], ["щ","--•-"], ["ъ","•--•-•"],
           ["ы","-•--"], ["ь","-••-"], ["э","••-••"], ["ю","••--"], ["я","•-•-"],
           ["0","-----"], ["1",".----"], ["2","..---"], ["3","...--"], ["4","....-"], ["5","....."],
           ["6","-...."], ["7","--..."], ["8","---.."], ["9","----."],
           [",","--..--"], ["?","..--.."], ["!","-.-.--"], ["'",".----."], ["(","-.--."], [")","-.--.-"], ["&",".-..."], [":","---..."],
           [";","-.-.-."], ["=","-...-"], ["+",".-.-."], ["_","..--.-"], ['\"',".-..-."], ["$","...-..-"], ["@",".--.-."], ["/","-..-."], [" ","/"]]
    symbols = ".-• /"
    itog = []
    for letter in low_str.split(' '):
        for i in range(len(mas)):
            if letter == mas[i][1]:
                itog.append(mas[i][0])
                break
    neprav = False
    for char in low_str:
        if char.isalpha() or char.isdigit():
            neprav = True
            break
    if neprav:
        await ctx.reply('Ты чёт не то у меня просишь. Мб ты по ошибке хочешь расшифровать текст вместо морзянки?', mention_author=True)
    else:
        await ctx.reply('```' + (''.join(itog)) + '```', mention_author = False)

@bot.command()
async def clock(ctx, *, arg):
    my_str = '{}'.format(arg)
    low_str = my_str.lower()
    sp = {"a":":clock12::clock1:", "b":":clock12::clock2:", "c":":clock12::clock3:", "d":":clock12::clock4:", "e":":clock12::clock5:",
          "f":":clock12::clock6:", "g":":clock12::clock7:", "h":":clock12::clock8:", "i":":clock12::clock9:", "j":":clock12::clock10:",
          "k":":clock12::clock11:", "l":":clock1::clock2:", "m":":clock1::clock3:", "n":":clock1::clock4:", "o":":clock1::clock5:",
          "p":":clock1::clock6:", "q":":clock1::clock7:", "r":":clock1::clock8:", "s":":clock1::clock9:", "t":":clock2::clock12:",
          "u":":clock2::clock1:", "v":":clock2::clock2:", "w":":clock2::clock3:", "x":":clock2::clock4:", "y":":clock2::clock5:", "z":":clock2::clock6:",
          "а":":clock12::clock1:", "б":":clock12::clock2:", "в":":clock12::clock3:", "г":":clock12::clock4:", "д":":clock12::clock5:",
          "е":":clock12::clock6:", "ё":":clock12::clock7:", "ж":":clock12::clock8:", "з":":clock12::clock9:", "и":":clock12::clock10:",
          "й":":clock12::clock11:", "к":":clock1::clock2:", "л":":clock1::clock3:", "м":":clock1::clock4:", "н":":clock1::clock5:",
          "о":":clock1::clock6:", "п":":clock1::clock7:", "р":":clock1::clock8:", "с":":clock1::clock9:", "т":":clock2::clock12:",
          "у":":clock2::clock1:", "ф":":clock2::clock2:", "х":":clock2::clock3:", "ц":":clock2::clock4:", "ч":":clock2::clock5:",
          "ш":":clock2::clock6:", "щ":":clock2::clock7:", "ъ":":clock2::clock8:", "ы":":clock2::clock9:", "ь":":clock3::clock12:",
          "э":":clock3::clock1:", "ю":":clock3::clock2:", "я":":clock3::clock3:"}
    result = []
    for word in low_str.split():
        word2 = []
        for i in word:
            word2.append(sp[i])
        result.append('-'.join(word2))
    await ctx.reply('-\U0001F55B\U0001F55B-'.join(result), mention_author=False) 

@bot.command()
async def declock(ctx, *, arg):
    my_str = '{}'.format(arg)
    low_str = my_str.lower()
    mas = [["a","\U0001F55B\U0001F550"], ["b","\U0001F55B\U0001F551"], ["c","\U0001F55B\U0001F552"], ["d","\U0001F55B\U0001F553"],
           ["e","\U0001F55B\U0001F554"], ["f","\U0001F55B\U0001F555"], ["g","\U0001F55B\U0001F556"], ["h","\U0001F55B\U0001F557"],
           ["i","\U0001F55B\U0001F558"], ["j","\U0001F55B\U0001F559"], ["k","\U0001F55B\U0001F55A"], ["l","\U0001F550\U0001F551"],
           ["m","\U0001F550\U0001F552"], ["n","\U0001F550\U0001F553"], ["o","\U0001F550\U0001F554"], ["p","\U0001F550\U0001F555"],
           ["q","\U0001F550\U0001F556"], ["r","\U0001F550\U0001F557"], ["s","\U0001F550\U0001F558"], ["t","\U0001F551\U0001F55B"],
           ["u","\U0001F551\U0001F550"], ["v","\U0001F551\U0001F551"], ["w","\U0001F551\U0001F552"], ["x","\U0001F551\U0001F553"],
           ["y","\U0001F551\U0001F554"], ["z","\U0001F551\U0001F555"], [" ","\U0001F55B\U0001F55B"]]
    masrus = [["а","\U0001F55B\U0001F550"], ["б","\U0001F55B\U0001F551"], ["в","\U0001F55B\U0001F552"], ["г","\U0001F55B\U0001F553"],
              ["д","\U0001F55B\U0001F554"], ["е","\U0001F55B\U0001F555"], ["ё","\U0001F55B\U0001F556"], ["ж","\U0001F55B\U0001F557"],
              ["з","\U0001F55B\U0001F558"], ["и","\U0001F55B\U0001F559"], ["й","\U0001F55B\U0001F55A"], ["к","\U0001F550\U0001F551"],
              ["л","\U0001F550\U0001F552"], ["м","\U0001F550\U0001F553"], ["н","\U0001F550\U0001F554"], ["о","\U0001F550\U0001F555"],
              ["п","\U0001F550\U0001F556"], ["р","\U0001F550\U0001F557"], ["с","\U0001F550\U0001F558"], ["т","\U0001F551\U0001F55B"],
              ["у","\U0001F551\U0001F550"], ["ф","\U0001F551\U0001F551"], ["х","\U0001F551\U0001F552"], ["ц","\U0001F551\U0001F553"],
              ["ч","\U0001F551\U0001F554"], ["ш","\U0001F551\U0001F555"], ["щ","\U0001F551\U0001F556"], ["ъ","\U0001F551\U0001F557"],
              ["ы","\U0001F551\U0001F558"], ["ь","\U0001F552\U0001F55B"], ["э","\U0001F552\U0001F550"], ["ю","\U0001F552\U0001F551"],
              ["я","\U0001F552\U0001F552"], [" ","\U0001F55B\U0001F55B"]]
    itog = []
    for letter in low_str.split('-'):
        for i in range(len(mas)):
            if letter == mas[i][1]:
                itog.append(mas[i][0])
    itogrus = []
    for letter in low_str.split('-'):
        for i in range(len(masrus)):
            if letter == masrus[i][1]:
                itogrus.append(masrus[i][0])
    await ctx.reply('```eng: ' + (''.join(itog)) + '\nrus: ' + (''.join(itogrus)) + '```', mention_author=False)

@bot.command()
async def torus(ctx, *, arg):
    layout = dict(zip(map(ord, "qwertyuiop[]asdfghjkl;'zxcvbnm,./`"
                               'QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>?~'),
                               "йцукенгшщзхъфывапролджэячсмитьбю.ё"
                               'ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ,Ё'))
    a = '{}'.format(arg)
    await ctx.reply('```' + (a.translate(layout)) + '```', mention_author=False)

@bot.command()
async def toeng(ctx, *, arg):
    layout = dict(zip(map(ord, "йцукенгшщзхъфывапролджэячсмитьбю.ё"
                               'ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ,Ё'),
                               "qwertyuiop[]asdfghjkl;'zxcvbnm,./`"
                               'QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>?~'))
    a = '{}'.format(arg)
    await ctx.reply('```' + (a.translate(layout)) + '```', mention_author=False)

@bot.command()
async def trans(ctx, *, arg):
    my_str = '{}'.format(arg)
    sp = {'а':'a', 'б':'b', 'в':'v', 'г':'g', 'д':'d', 'е':'e', 'ё':'yo', 'ж':'zh', 'з':'z', 'и':'i', 'й':'y', 'к':'k', 'л':'l', 'м':'m', 'н':'n',
          'о':'o', 'п':'p', 'р':'r', 'с':'s', 'т':'t', 'у':'u', 'ф':'f', 'х':'h', 'ц':'ts', 'ч':'ch', 'ш':'sh', 'щ':'sch', "ъ":"'", 'ы':'y', "ь":"'",
          'э':'e', 'ю':'yu', 'я':'ya'}
    result = []
    for word in my_str.split():
        word2 = []
        for i in word:
            word2.append(sp[i])
        result.append(''.join(word2))
    await ctx.reply('```' + (' '.join(result)) + '```', mention_author=False)

@bot.command()
async def detrans(ctx, *, arg):
    def multiple_replace(target_str, replace_values):
        for i, j in replace_values.items():
            target_str = target_str.replace(i, j)
        return target_str

    my_str = '{}'.format(arg)
    sp = {'sch':'щ', 'ya':'я', 'yu':'ю', 'oo':'у', 'yo':'ё', 'zh':'ж', 'ii':'ий', 'yi':'ый', 'ch':'ч', 'sh':'ш'}
    spp = {'a':'а', 'b':'б', 'v':'в', 'g':'г', 'd':'д', 'e':'е', 'z':'з', 'i':'и', 'y':'й', 'k':'к', 'l':'л',
           'm':'м', 'n':'н', 'o':'о', 'p':'п', 'r':'р', 's':'с', 't':'т', 'u':'у', 'f':'ф', 'h':'х', 'c':'ц', "'":'ь'}

    first = multiple_replace(my_str, sp)
    obsh = multiple_replace(first, spp)
    await ctx.reply('```' + (obsh) + '```', mention_author=False)

@bot.command()
async def hexc(ctx, *, arg):
    from PIL import Image, ImageDraw
    import binascii
    import random
    import glob
    idd = str(ctx.message.id)
    text = '{}'.format(arg)
    a = str(binascii.hexlify(bytes(text, encoding="utf8")))
    b = a.replace("b'", "").replace("'", "")
    c = [b[x:x+6] for x in range(0, len(b), 6)]
    if len(c) > 20:
        w = 1000
    else:
        w = len(c)*50
    h = 50+(50*round(len(c)/20))
    img = Image.new("RGBA", (w, h)) # RGBA - альфа-канал
    img1 = ImageDraw.Draw(img)
    xsum, ysum = 0, 0
    for i in c:
        if xsum >= 1000:
            xsum = xsum - 1000
            ysum = ysum + 50
        if len(i) < 6:
            for n in range(0, 6-len(i)):
                i = i + '0'
        img1.rectangle([(xsum, ysum), (xsum+50, ysum+50)], fill="#" + i)
        xsum = xsum + 50
    imgs = img.save("hexcol/" + idd + ".png")
    tosend = random.choice(glob.glob("hexcol/" + idd + ".png"))
    result = discord.File(tosend, filename=None, spoiler=False)
    await ctx.reply(file=result, mention_author=False)

@bot.command()
async def dehexc(ctx, *args):
    from PIL import Image
    import requests
    quote = ' '.join(args)
    input = '#{}'.format(quote)
    x, y = 1, 25
    if len(input) == 1:
        attachment = ctx.message.attachments[0]
        url = attachment.url
    if len(input) > 1:
        if 'https://' in input:
            if requests.get(input.replace('#', '')).ok:
                url = input.replace('#', '')
        else:
            await ctx.reply('прикрепи рабочую ссылку, а то чо как я не знаю', mention_author=True)
    img = Image.open(requests.get(url, stream=True).raw)
    width, height = img.size
    stroka = ''
    for i in range(0, int(width/50)*int(height/50)):
        if x >= 1001 or x >= width:
            x = x - 1000
            y = y + 50
        pix = img.getpixel((x, y))
        hexified = '%02x%02x%02x' % (pix[0], pix[1], pix[2])
        stroka = stroka + hexified
        x = x + 50
    await ctx.reply('```' + str(bytes.fromhex(stroka).decode('utf-8')) + '```', mention_author=False)

@bot.command()
async def hexcc(ctx, *, arg):
    from PIL import Image, ImageDraw
    import binascii
    import random
    import glob
    idd = str(ctx.message.id)
    text = '{}'.format(arg)
    a = str(binascii.hexlify(bytes(text, encoding="utf8")))
    b = a.replace("b'", "").replace("'", "")
    c = [b[x:x+6] for x in range(0, len(b), 6)]
    if len(c) > 20:
        w = 1000
    else:
        w = len(c)*50
    h = 50+(50*round(len(c)/20))
    img = Image.new("RGBA", (w, h)) # RGBA - альфа-канал
    img1 = ImageDraw.Draw(img)
    xsum, ysum = 0, 0
    for i in c:
        if xsum >= 1000:
            xsum = xsum - 1000
            ysum = ysum + 50
        if len(i) < 6:
            for n in range(0, 6-len(i)):
                i = i + '0'
        img1.rectangle([(xsum, ysum), (xsum+50, ysum+50)], fill="#" + i)
        img1.text((xsum, ysum), i)
        xsum = xsum + 50
    imgs = img.save("hexcol/" + idd + ".png")
    tosend = random.choice(glob.glob("hexcol/" + idd + ".png"))
    result = discord.File(tosend, filename=None, spoiler=False)
    await ctx.reply(file=result, mention_author=False)

@bot.command()
async def vernam(ctx, *, arg):
    import random
    inp = '{}'.format(arg)
    idtosend = ctx.message.author.id
    def debin(binary):
        deb = ''
        for word in binary.strip().split(' '):
            number = int(word, 2)
            deb += chr(number)
        return deb
    #преобразование в бинарку
    bin = ' '.join(map(lambda x: "{0:b}".format(ord(x)).zfill(16), inp))
    #генерация бинарного ключа, равного по длине с исходным текстом
    charnumb = len(inp)
    key = ''
    for i in range(0, charnumb):
        for j in range(0, 16):
            key += str(random.randint(0,1))
        key += ' '
    #ксор
    xored = ''
    for i in range(0, len(bin)):
        if bin[i] == ' ':
            xored += ' '
        elif bin[i] != key[i]:
            xored += '1'
        elif bin[i] == key[i]:
            xored += '0'
    me = await bot.fetch_user(idtosend)
    await ctx.reply('Результат шифровки:\n```' + debin(xored) + '```\nВ бинарном виде:\n```' + xored + '```\nАвтоматически сгенерированный ключ выслан в лс, проверяй.', mention_author=True)
    await me.send('---------------------\nВот твой ключ\n```' + debin(key) + '\nили в бинарном виде:\n' + key + '```\nк тексту\n```' + inp + '```\n')

@bot.command()
async def devernam(ctx, *, arg):
    def tobin(inp):
        return ' '.join(map(lambda x: "{0:b}".format(ord(x)).zfill(16), inp))
    def debin(binary):
        deb = ''
        for word in binary.strip().split(' '):
            number = int(word, 2)
            deb += chr(number)
        return deb
    input = '{}'.format(arg)
    text = input.split('/')
    inp = tobin(text[0])
    key = ''
    if len(text) != 1:
        key = tobin(text[1])
    if len(text) == 1 or '/' not in input or key == '' or len(text) > 2:
        await ctx.reply('Тут что-то не так. Перечитай шаблон пользования командой в xxcrypto и проверь, вставил ли ты шифртекст или ключ.', mention_author=True)
    elif key:
        xored = ''
        for i in range(0, len(inp)):
            if inp[i] == ' ':
                xored += ' '
            elif inp[i] != key[i]:
                xored += '1'
            elif inp[i] == key[i]:
                xored += '0'
        await ctx.reply('Результат дешифровки:\n```' + debin(xored) + '```', mention_author=True)

@bot.command(pass_context=True, aliases=['s'])
async def sound(ctx, *, arg):
    from datetime import datetime
    import asyncio
    from mutagen.mp3 import MP3
    import random
    author = ctx.message.author
    input = '{}'.format(arg)
    path = "sounds/"+str(input)+".mp3"
    if str(input) == "pig":
        path = "sounds/"+str(input)+str(random.randint(1,4))+".mp3"
    with open('log.txt', 'a') as file:
        file.write(str(datetime.now()) + ' ' + str(author) + ' sound ' + str(input) + '\n')
    if os.path.isfile(path):
        # voice = get(self.bot.voice_clients, guild=ctx.guild)
        channel = ctx.author.voice.channel
        vc = await channel.connect()
        # vc.play(discord.FFmpegPCMAudio(executable="/usr/bin/ffmpeg", source=path))
        vc.play(discord.FFmpegPCMAudio(executable="ffmpeg.exe", source=path))
        soundlength = MP3(path).info.length
        await asyncio.sleep(soundlength)
        '''sec = 0
        while True:
            time.sleep(0.1)
            sec += 0.1
        if sec > soundlength:'''
        await vc.disconnect()
    else:
        if str(input) == "help":
            files = ""
            for file in sorted(os.listdir("sounds/")):
                head, tail = os.path.split("sounds/"+str(file))
                files=files+tail.replace('.mp3', ', ')
            await ctx.reply('**Список всех звуков:** \n' + files[:-2], mention_author=False)
        else:
            await ctx.reply('Извиняй, но такого звука нет', mention_author = True)

@bot.command()
async def join(ctx):
    channel = ctx.author.voice.channel
    await channel.connect()

@bot.command()
async def stop(ctx):
    if (ctx.voice_client):
        await ctx.voice_client.disconnect()

@bot.command(aliases=['scr'])
async def screen(ctx):
    import random
    if not ctx.message.channel.is_nsfw():
        await ctx.reply('из этических соображений я решил, что команду будет лучше применять в nsfw-каналах. вот.', mention_author=True)
    else:
        a = [a for a in "0123456789abcdefghijklmnopqrstuvwxyz"]
        b = "https://prnt.sc/"
        for i in "123456":
            b = b + str(random.choice(a))
        await ctx.reply(b, mention_author=False)

# ТУТ ЛЕЖИТ КОММАНД_ЕРРОР
@bot.event
async def on_command_error(ctx, error):
    import random
    import asyncio
    from datetime import datetime
    author = ctx.message.author
    missingarg_str = ["Аргумента нету, слушай. Без него ваще не могу.", "Видишь аргументы? И я не вижу, а они есть. Дуй в xxhelp и чекай, где ошибся.", "Не хватает аргумента. Перечитай ещё раз строчку с командой в xxhelp, чтобы уж точно понять, как ей пользоваться.", "Ошибка стоп-ноль-ноль-ноль-ноль-ноль-ААААА: аргумент не найден. Пропиши xxhelp и перечитай строчку с командой.", "Аргумента нет, ничё делать не буду. Шуруй в xxhelp.", "Где аргумент, Лебовски? Гони аргумент, Лебовски.", "Приписка не найдена. Вали в xxhelp и чтобы такого больше не повторилось, понял?"]
    if isinstance(error, commands.CommandNotFound):
        errmes = await ctx.send(embed=discord.Embed(description=(random.choice(wrong_str)), color=0xb33700))
        await asyncio.sleep(5.0)
        await errmes.delete()
        with open('log.txt', 'a') as file:
            file.write(str(datetime.now()) + ' ' + str(author) + ' error\n')
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.reply(random.choice(missingarg_str), mention_author=True)
        with open('log.txt', 'a') as file:
            file.write(str(datetime.now()) + ' ' + str(author) + ' args_error\n')
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.reply('Во избежание дудоса команду можно повторить только через ' + str(round(error.retry_after, 2)) + ' секунд.', mention_author=True)
